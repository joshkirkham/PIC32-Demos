Disassembly Listing for LED_Driver
Generated From:
/home/swood/HarmonyProjects/LED_Driver/firmware/LED_Driver.X/dist/LED_Driver/debug/LED_Driver.X.debug.elf
Mar 16, 2023 4:17:23 AM

---  /opt/microchip/mplabx/v6.00/packs/Microchip/PIC32MZ-EF_DFP/1.3.58/xc32/startup/crt0.S  -------------
                                                  1:     /*********************************************************************
                                                  2:      *
                                                  3:      *                  C Runtime Startup
                                                  4:      *
                                                  5:      *********************************************************************
                                                  6:      * Filename:        crt0.S
                                                  7:      *
                                                  8:      * Processor:       PIC32
                                                  9:      *
                                                  10:     * Compiler:        MPLAB XC32
                                                  11:     *                  MPLAB X IDE
                                                  12:     * Company:         Microchip Technology Inc.
                                                  13:     *
                                                  14:     * Software License Agreement
                                                  15:     *
                                                  16:     * Copyright (c) 2014, Microchip Technology Inc. and its subsidiaries ("Microchip")
                                                  17:     * All rights reserved.
                                                  18:     *
                                                  19:     * This software is developed by Microchip Technology Inc. and its
                                                  20:     * subsidiaries ("Microchip").
                                                  21:     *
                                                  22:     * Redistribution and use in source and binary forms, with or without
                                                  23:     * modification, are permitted provided that the following conditions are met:
                                                  24:     *
                                                  25:     * 1.      Redistributions of source code must retain the above copyright
                                                  26:     * notice, this list of conditions and the following disclaimer.
                                                  27:     *
                                                  28:     * 2.      Redistributions in binary form must reproduce the above copyright
                                                  29:     * notice, this list of conditions and the following disclaimer in the
                                                  30:     * documentation and/or other materials provided with the distribution.
                                                  31:     * Publication is not required when this file is used in an embedded 
                                                  32:     * application.
                                                  33:     *
                                                  34:     * 3.      Microchip's name may not be used to endorse or promote products
                                                  35:     * derived from this software without specific prior written permission.
                                                  36:     *
                                                  37:     * THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED
                                                  38:     * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
                                                  39:     * MERCHANTABILITY AND FITNESS FOR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
                                                  40:     * MICROCHIP BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
                                                  41:     * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
                                                  42:     * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS;
                                                  43:     * OR BUSINESS INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                                  44:     * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
                                                  45:     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
                                                  46:     * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                                                  47:     *
                                                  48:     ********************************************************************/
                                                  49:    
                                                  50:    #include "xc.h"
                                                  51:    #include <cp0defs.h>
                                                  52:    
                                                  53:    #ifdef __LIBBUILD__
                                                  54:       # Replace the standard debugging information with a simple filename. This
                                                  55:       # prevents the library build directory from showing up in MPLAB IDE. It
                                                  56:       # also effectively disables source-line debugging.
                                                  57:       .file 1 "libpic32/startup/crt0.S"
                                                  58:       .loc 1 0
                                                  59:    #endif
                                                  60:    
                                                  61:    #if (__XC32_VERSION > 1000) && !defined(CPP_INIT)
                                                  62:    #define CPP_INIT
                                                  63:    #endif
                                                  64:    
                                                  65:    #if !defined(PIC32_SRS_SET_COUNT)
                                                  66:    #  if defined(__PIC32_SRS_SET_COUNT)
                                                  67:    #    define PIC32_SRS_SET_COUNT __PIC32_SRS_SET_COUNT
                                                  68:    #  else
                                                  69:    #    warning PIC32_SRS_SET_COUNT not defined on build line
                                                  70:    #    define PIC32_SRS_SET_COUNT 2
                                                  71:    #  endif
                                                  72:    #endif
                                                  73:    
                                                  74:    #if defined(__PIC32MX) || defined(__PIC32MM) || defined(__PIC32MZ)
                                                  75:    #define INIT_DATA 1
                                                  76:    #endif
                                                  77:    
                                                  78:    /* This file contains 32-bit assembly code */
                                                  79:           .set nomips16
                                                  80:    
                                                  81:            ##################################################################
                                                  82:            # Entry point of the entire application
                                                  83:            ##################################################################
                                                  84:            .section .reset,code,keep
                                                  85:            .align 2
                                                  86:            .set noreorder
                                                  87:            .ent _reset
                                                  88:    
                                                  89:    ############################
                                                  90:    # Begin ISA switching code #
                                                  91:    ############################
                                                  92:    
                                                  93:    #if defined (__mips_micromips)
                                                  94:            .set micromips
                                                  95:    #endif
                                                  96:    
                                                  97:    #if (defined(__PIC32_HAS_MICROMIPS)) && (defined(__PIC32_HAS_MIPS32R2))
                                                  98:    _reset:
                                                  99:            .word 0x10000003     /* MIPS32:    branch forward 0x10 bytes from here  */
                                                  100:                                /* MicroMIPS: ADDI32 $0, $0, 0x0007 (nop)          */
                                                  101:                                /* DO NOT change the relative branch               */
                                                  102:   
                                                  103:           .word 0x00000000     /* NOP */
                                                  104:   __reset_micromips_isa:
                                                  105:           .set    micromips
BFC00008  0006F3F0   TGE ZERO, A2                 106:           jal     _startup
BFC0000C  00000000   NOP                          107:           nop
                                                  108:   
                                                  109:           .align 2
                                                  110:           /* Device not in proper ISA mode */
                                                  111:           .set nomicromips
                                                  112:   __reset_switch_isa:
BFC00010  0FF00006   JAL 0xBFC00018               113:           jal _startup
BFC00014  00000000   NOP                          114:           nop
                                                  115:   
                                                  116:   #else
                                                  117:   
                                                  118:   _reset:
                                                  119:           jal _startup
                                                  120:           nop
                                                  121:   
                                                  122:   #endif  /* __PIC32_HAS_MICROMIPS */
                                                  123:   
                                                  124:           .align 2
                                                  125:           .end _reset
                                                  126:           .globl _reset
                                                  127:           .size _reset, .-_reset
                                                  128:   
                                                  129:           .section .reset.startup,code,keep
                                                  130:           .align 2
                                                  131:           .set noreorder
                                                  132:   
                                                  133:   #if defined (__mips_micromips)
                                                  134:           .set micromips
                                                  135:   #else
                                                  136:           .set nomicromips
                                                  137:   #endif
                                                  138:   
                                                  139:   ############################
                                                  140:   # End ISA switching code   #
                                                  141:   ############################
                                                  142:   
                                                  143:           ##################################################################
                                                  144:           # Startup code
                                                  145:           ##################################################################
                                                  146:           .align 2
                                                  147:           .globl _startup
                                                  148:           .set noreorder
                                                  149:           .ent _startup
                                                  150:   _startup:
                                                  151:           ##################################################################
                                                  152:           # If entered because of an NMI, jump to the NMI handler.
                                                  153:           ##################################################################
BFC00018  401A6000   MFC0 K0, Status              154:           mfc0    k0,_CP0_STATUS
BFC0001C  7F5A04C0   EXT K0, K0, 19, 1            155:           ext     k0,k0,19,1              # Extract NMI bit
BFC00020  13400005   BEQ K0, ZERO, 0xBFC00038     156:           beqz    k0,_no_nmi
BFC00024  00000000   NOP                          157:           nop
BFC00028  3C1A9D00   LUI K0, -25344               158:           la      k0,_nmi_handler
BFC00030  03400008   JR K0                        159:           jr      k0
BFC00034  00000000   NOP                          160:           nop
                                                  161:   _no_nmi:
                                                  162:   
                                                  163:           ##################################################################
                                                  164:           # Initialize Stack Pointer
                                                  165:           #   _stack is initialized by the linker script to point to the
                                                  166:           #    starting location of the stack in DRM
                                                  167:           ##################################################################
BFC00038  3C1D8008   LUI SP, -32760               168:           la      sp,_stack
                                                  169:   
                                                  170:           ##################################################################
                                                  171:           # Initialize Global Pointer
                                                  172:           #   _gp is initialized by the linker script to point to "middle"
                                                  173:           #   of the small variables region
                                                  174:           ##################################################################
BFC00040  3C1C8001   LUI GP, -32767               175:           la      gp,_gp
                                                  176:   
                                                  177:   #if (PIC32_SRS_SET_COUNT == 2)
                                                  178:           ##################################################################
                                                  179:           # Initialize Global Pointer in Shadow Set
                                                  180:           #   The SRSCtl's PSS field must be set to the shadow set in which
                                                  181:           #   to initialize the global pointer.  Since we have only a
                                                  182:           #   single shadow set (besides the normal), we will initialize
                                                  183:           #   SRSCtl<PSS> to SRSCtl<HSS>.  We then write the global pointer
                                                  184:           #   to the previous shadow set to ensure that on interrupt, the
                                                  185:           #   global pointer has been initialized.
                                                  186:           ##################################################################
                                                  187:           mfc0    t1,_CP0_SRSCTL          # Read SRSCtl register
                                                  188:           add     t3,t1,zero              # Save off current SRSCtl
                                                  189:           ext     t2,t1,26,4              # to obtain HSS field
                                                  190:           ins     t1,t2,6,4               # Put HSS field
                                                  191:           mtc0    t1,_CP0_SRSCTL          # into SRSCtl<PSS>
                                                  192:           ehb                             # Clear hazard before using new SRSCTL
                                                  193:           wrpgpr  gp,gp                   # Set global pointer in PSS
                                                  194:           mtc0    t3,_CP0_SRSCTL          # Restore SRSCtl
                                                  195:           ehb
                                                  196:   
                                                  197:   #elif (PIC32_SRS_SET_COUNT > 2)
                                                  198:           ##################################################################
                                                  199:           # Initialize Global Pointer in Shadow Set(s)
                                                  200:           #   The SRSCtl PSS field must be set to the shadow set in which
                                                  201:           #   to initialize the global pointer.  We will initialize
                                                  202:           #   SRSCtl<PSS> to the number of reg sets and work down to set zero.
                                                  203:           #   We write the global pointer to the previous shadow set to
                                                  204:           #   ensure that on interrupt, the global pointer has been
                                                  205:           #   initialized.
                                                  206:           ##################################################################
BFC00048  40096002   MFC0 T1, SRSCtl              207:           mfc0    t1,_CP0_SRSCTL          # Read SRSCtl register
BFC0004C  01205820   ADD T3, T1, ZERO             208:           add     t3,t1,zero              # Save off current SRSCtl
                                                  209:   
BFC00050  240A0007   ADDIU T2, ZERO, 7            210:           li      t2,(PIC32_SRS_SET_COUNT-1)
                                                  211:   
BFC00054  7D494984   INS T1, T2, 6, 4             212:   1:      ins     t1,t2,6,4               # Put next shadow set field
BFC00058  40896002   MTC0 T1, SRSCtl              213:           mtc0    t1,_CP0_SRSCTL          # into SRSCtl<PSS>
BFC0005C  000000C0   EHB                          214:           ehb                             # Clear hazard before using new SRSCTL
BFC00060  41DCE000   WRPGPR GP, GP                215:           wrpgpr  gp,gp                   # Set global pointer in PSS
                                                  216:   
BFC00064  254AFFFF   ADDIU T2, T2, -1             217:           addiu   t2,t2,-1                # Next lower shadow set
                                                  218:                                           # Loop for all sets
BFC00068  1540FFFA   BNE T2, ZERO, 0xBFC00054     219:           bne     t2,$0,1b                # Down to zero (normal GPR set)
BFC0006C  00000000   NOP                          220:           nop
                                                  221:   
BFC00070  408B6002   MTC0 T3, SRSCtl              222:           mtc0    t3,_CP0_SRSCTL          # Restore SRSCtl
BFC00074  000000C0   EHB                          223:           ehb
                                                  224:   
                                                  225:   #endif /* (PIC32_SRS_SET_COUNT > 2) */
                                                  226:   
                                                  227:           ##################################################################
                                                  228:           # Call the "on reset" procedure
                                                  229:           ##################################################################
BFC00078  3C089D00   LUI T0, -25344               230:           la      t0,_on_reset
BFC00080  0100F809   JALR T0                      231:           jalr    t0
BFC00084  00000000   NOP                          232:           nop
                                                  233:   
                                                  234:   #if defined(INIT_MMU_MZ_FIXED) || defined(__PIC32_HAS_MMU_MZ_FIXED)
                                                  235:           ##################################################################
                                                  236:           # Initialize TLB for fixed mapping to EBI and SQI
                                                  237:           ##################################################################
                                                  238:           .extern __pic32_tlb_init_ebi_sqi
BFC00088  3C089D00   LUI T0, -25344               239:           la      t0,__pic32_tlb_init_ebi_sqi
BFC00090  0100F809   JALR T0                      240:           jalr    t0
BFC00094  00000000   NOP                          241:           nop
                                                  242:   #endif
                                                  243:   
                                                  244:           ##################################################################
                                                  245:           # Clear uninitialized data sections
                                                  246:           ##################################################################
                                                  247:   _start_bss_init:
BFC00098  3C088000   LUI T0, -32768               248:           la      t0,_bss_begin
BFC000A0  3C098000   LUI T1, -32768               249:           la      t1,_bss_end
BFC000A8  10000003   BEQ ZERO, ZERO, 0xBFC000B8   250:           b       _bss_check
BFC000AC  00000000   NOP                          251:           nop
                                                  252:   
                                                  253:   _bss_init:
BFC000B0  AD000000   SW ZERO, 0(T0)               254:           sw      zero,0x0(t0)
BFC000B4  25080004   ADDIU T0, T0, 4              255:           addu    t0,4
                                                  256:   _bss_check:
BFC000B8  0109082B   SLTU AT, T0, T1              257:           bltu    t0,t1,_bss_init
BFC000C0  00000000   NOP                          258:           nop
                                                  259:   
                                                  260:   #if defined(INIT_L1_CACHE) || defined(__PIC32_HAS_L1CACHE)
                                                  261:           ##################################################################
                                                  262:           # Initialize L1 cache. This must be done after bss clearing
                                                  263:           # since the _bss_end symbol may not be cache-line aligned.
                                                  264:           ##################################################################
                                                  265:           .extern   __pic32_init_cache
BFC000C4  3C08BFC0   LUI T0, -16448               266:           la      t0,__pic32_init_cache
BFC000CC  0100F809   JALR T0                      267:           jalr    t0
BFC000D0  00000000   NOP                          268:           nop
                                                  269:   #endif
                                                  270:   
                                                  271:   #if defined(INIT_DATA) || defined(__PIC32_HAS_INIT_DATA)
                                                  272:   
                                                  273:   #if defined(__LIBBUILD__) /* Prebuilt crt0.o file */
                                                  274:   
                                                  275:           ##################################################################
                                                  276:           # Initialize data using the linker-generated .dinit table
                                                  277:           # For use with XC32 versions prior to XC32 v2.10 only.
                                                  278:           ##################################################################
                                                  279:           .equiv FMT_CLEAR,0
                                                  280:           .equiv FMT_COPY,1
                                                  281:   _dinit_init:
                                                  282:           la      t0,_dinit_addr
                                                  283:   
                                                  284:   #define SRC t0
                                                  285:   #define DST t1
                                                  286:   #define LEN t2
                                                  287:   #define FMT t3
                                                  288:   
                                                  289:   0:      lw      DST,0(SRC)
                                                  290:           beqz    DST,9f
                                                  291:           addu    SRC,4
                                                  292:           lw      LEN,0(SRC)
                                                  293:           addu    SRC,4
                                                  294:           lw      FMT,0(SRC)
                                                  295:           beq     FMT,$0,_dinit_clear
                                                  296:           addu    SRC,4
                                                  297:   
                                                  298:   _dinit_copy:
                                                  299:           lbu     t4,0(SRC)
                                                  300:           subu    LEN,1
                                                  301:           addu    SRC,1
                                                  302:           sb      t4,0(DST)
                                                  303:           bne     LEN,$0,_dinit_copy
                                                  304:           addu    DST,1
                                                  305:   
                                                  306:           b       _dinit_end
                                                  307:           nop
                                                  308:   
                                                  309:   _dinit_clear:
                                                  310:           sb      $0,(DST)
                                                  311:           subu    LEN,1
                                                  312:           bne     LEN,$0,_dinit_clear
                                                  313:           addu    DST,1
                                                  314:   
                                                  315:   _dinit_end:
                                                  316:           addu    SRC,3
                                                  317:           addiu   LEN,$0,-4
                                                  318:           and     SRC,LEN,SRC
                                                  319:           lw      DST,0(SRC)
                                                  320:           bne     DST,$0,0b
                                                  321:           nop
                                                  322:   9:
                                                  323:   
                                                  324:   #else
                                                  325:           #####################################################################
                                                  326:           # Initialize data using the linker-generated .dinit table
                                                  327:           # XC32 v2.10 and later provide the data-init code in a separate file
                                                  328:           # packaged with the compiler rather than the DFP. Use that init
                                                  329:           # code instead.
                                                  330:           #####################################################################
                                                  331:           .extern   __pic32_data_init
BFC000D4  3C089D00   LUI T0, -25344               332:           la      t0, __pic32_data_init
BFC000DC  0100F809   JALR T0                      333:           jalr    t0
BFC000E0  00000000   NOP                          334:           nop
                                                  335:   
                                                  336:   #if defined(_OFF168_VOFF_POSITION)
BFC000E4  3C09BF81   LUI T1, -16511               337:           lui	t1,%hi(OFF168)
BFC000E8  3C0A0000   LUI T2, 0                    338:           lui	t2,%hi(__vector_offset_168)
BFC000EC  254A0218   ADDIU T2, T2, 536            339:           addiu	t2,t2,%lo(__vector_offset_168)
BFC000F0  AD2A07E0   SW T2, 2016(T1)              340:           sw	t2,%lo(OFF168)(t1)
                                                  341:   #endif
                                                  342:   
                                                  343:   #endif /* __LIBBUILD__ */
                                                  344:   
                                                  345:   #endif /* INIT_DATA */
                                                  346:   
                                                  347:           ##################################################################
                                                  348:           # If there are no RAM functions, skip the next section --
                                                  349:           # initializing bus matrix registers.
                                                  350:           ##################################################################
BFC000F4  3C090000   LUI T1, 0                    351:           la      t1,_ramfunc_begin
BFC000FC  11200001   BEQ T1, ZERO, 0xBFC00104     352:           beqz    t1,_ramfunc_done
BFC00100  00000000   NOP                          353:           nop
                                                  354:   
                                                  355:   #if defined(INIT_SSX) || defined(__PIC32_HAS_SSX)
                                                  356:     /* No initialization required */
                                                  357:   #else /* Use BMX */
                                                  358:           ##################################################################
                                                  359:           # Initialize bus matrix registers if RAM functions exist in the
                                                  360:           # application
                                                  361:           ##################################################################
                                                  362:           la      t1,_bmxdkpba_address
                                                  363:           la      t2,BMXDKPBA
                                                  364:           sw      t1,0(t2)
                                                  365:           la      t1,_bmxdudba_address
                                                  366:           la      t2,BMXDUDBA
                                                  367:           sw      t1,0(t2)
                                                  368:           la      t1,_bmxdupba_address
                                                  369:           la      t2,BMXDUPBA
                                                  370:           sw      t1,0(t2)
                                                  371:   #endif /* INIT_SSX */
                                                  372:   
                                                  373:   _ramfunc_done:
                                                  374:   
                                                  375:           ##################################################################
                                                  376:           # Initialize CP0 registers
                                                  377:           ##################################################################
                                                  378:           # Initialize Count register
                                                  379:           ##################################################################
BFC00104  40804800   MTC0 ZERO, Count             380:           mtc0    zero,_CP0_COUNT
                                                  381:   
                                                  382:           ##################################################################
                                                  383:           # Initialize Compare register
                                                  384:           ##################################################################
BFC00108  240AFFFF   ADDIU T2, ZERO, -1           385:           li      t2,-1
BFC0010C  408A5800   MTC0 T2, Compare             386:           mtc0    t2,_CP0_COMPARE
                                                  387:   
                                                  388:           ##################################################################
                                                  389:           # Ensure BEV set and Initialize EBase register
                                                  390:           ##################################################################
BFC00110  3C080040   LUI T0, 64                   391:           li      t0, (1<<22)
BFC00114  400A6000   MFC0 T2, Status              392:           mfc0    t2,_CP0_STATUS
BFC00118  010A5025   OR T2, T0, T2                393:           or      t2,t0,t2               # Set BEV bit 22
BFC0011C  408A6000   MTC0 T2, Status              394:           mtc0    t2,_CP0_STATUS
                                                  395:   
BFC00120  3C099D00   LUI T1, -25344               396:           la      t1,_ebase_address
BFC00128  000000C0   EHB                          397:           ehb
BFC0012C  40897801   MTC0 T1, EBase               398:           mtc0    t1,_CP0_EBASE
                                                  399:           
                                                  400:           ##################################################################
                                                  401:           # Initialize PRISS register to a safer default for devices that 
                                                  402:           # have it. The application should re-initialize it to an
                                                  403:           # application-specific value.
                                                  404:           #
                                                  405:           # We do NOT do this by default.
                                                  406:           ##################################################################
                                                  407:   #if defined(USE_DEFAULT_PRISS_VALUE) 
                                                  408:   #if defined(_PRISS_PRI7SS_POSITION)
                                                  409:   #if (PIC32_SRS_SET_COUNT >= 7)
                                                  410:           li	    t2, 0x76540000
                                                  411:           addiu	t2, t2, 0x3210
                                                  412:           lui	    t1, %hi(PRISS)
                                                  413:           sw	    t2, %lo(PRISS)(t1)
                                                  414:   #elif (PIC32_SRS_SET_COUNT <= 2)
                                                  415:           li	    t2, 0x10000000
                                                  416:           lui	    t1, %hi(PRISS)
                                                  417:           sw	    t2, %lo(PRISS)(t1)
                                                  418:   #endif /* PIC32_SRS_SET_COUNT */
                                                  419:   #endif /* _PRISS_PRI7SS_POSITION */
                                                  420:   #endif /* USE_DEFAULT_PRISS_VALUE */
                                                  421:           
                                                  422:           ##################################################################
                                                  423:           # Initialize IntCtl/INTCON.VS register with _vector_spacing
                                                  424:           ##################################################################
BFC00130  3C090000   LUI T1, 0                    425:           la      t1,_vector_spacing
                                                  426:   #if defined(INIT_INTCONVS) || defined(__PIC32_HAS_INTCONVS)
                                                  427:           la      t0, INTCON
                                                  428:           lw      t2, 0(t0)
                                                  429:           li      t2, 0
                                                  430:           ins     t2, t1, 16, 7
                                                  431:   #if defined(__PIC32MM) && defined(_INTCON_MVEC_MASK)
                                                  432:           ori     t2, t2, _INTCON_MVEC_MASK
                                                  433:   #endif
                                                  434:           sw      t2, 0(t0)
                                                  435:   #endif
BFC00138  240A0000   ADDIU T2, ZERO, 0            436:           li      t2,0                    # Clear t2 and
BFC0013C  7D2A4944   INS T2, T1, 5, 5             437:           ins     t2,t1,5,5               # shift value to VS field
BFC00140  408A6001   MTC0 T2, IntCtl              438:           mtc0    t2,_CP0_INTCTL
                                                  439:   
                                                  440:           ##################################################################
                                                  441:           # Initialize CAUSE registers
                                                  442:           # - Enable counting of Count register <DC = 0>
                                                  443:           # - Use special exception vector <IV = 1>
                                                  444:           # - Clear pending software interrupts <IP1:IP0 = 0>
                                                  445:           ##################################################################
BFC00144  3C090080   LUI T1, 128                  446:           li      t1,0x00800000
BFC00148  40896800   MTC0 T1, Cause               447:           mtc0    t1,_CP0_CAUSE
                                                  448:   
                                                  449:           ##################################################################
                                                  450:           # Initialize STATUS register
                                                  451:           # - Access to Coprocessor 0 not allowed in user mode <CU0 = 0>
                                                  452:           # - User mode uses configured endianness <RE = 0>
                                                  453:           # - Preserve Bootstrap Exception vectors <BEV>
                                                  454:           # - Preserve soft reset <SR> and non-maskable interrupt <NMI>
                                                  455:           # - CorExtend enabled based on whether CorExtend User Defined
                                                  456:           #   Instructions have been implemented <CEE = Config<UDI>>
                                                  457:           # - Disable any pending interrupts <IM7..IM2 = 0, IM1..IM0 = 0>
                                                  458:           # - Disable hardware interrupts <IPL7:IPL2 = 0>
                                                  459:           # - Base mode is Kernel mode <UM = 0>
                                                  460:           # - Error level is normal <ERL = 0>
                                                  461:           # - Exception level is normal <EXL = 0>
                                                  462:           # - Interrupts are disabled <IE = 0>
                                                  463:           # - DSPr2 ASE is enabled for devices that support it <MX = 1>
                                                  464:           # - FPU64 is enabled for devices that support it <CU1=1> & <FR=1>
                                                  465:           ##################################################################
BFC0014C  40088000   MFC0 T0, Config              466:           mfc0    t0,_CP0_CONFIG
BFC00150  7D090580   EXT T1, T0, 22, 1            467:           ext     t1,t0,22,1              # Extract UDI from Config register
BFC00154  00094C40   SLL T1, T1, 17               468:           sll     t1,t1,17                # Move UDI to Status.CEE location
BFC00158  40086000   MFC0 T0, Status              469:           mfc0    t0,_CP0_STATUS
BFC0015C  3C010058   LUI AT, 88                   470:           and     t0,t0,0x00580000        # Preserve SR, NMI, and BEV
                                                  471:   #if defined(INIT_DSPR2) || defined(__PIC32_HAS_DSPR2)
BFC00164  3C0A0100   LUI T2, 256                  472:           li      t2, 0x01000000          # Set the Status.MX bit to enable DSP
BFC00168  01484025   OR T0, T2, T0                473:           or      t0,t2,t0
                                                  474:   #endif
                                                  475:   #if defined(INIT_FPU64) || defined(__PIC32_HAS_FPU64)
BFC0016C  3C0A2400   LUI T2, 9216                 476:           li      t2, 0x24000000          # Set the Status.CU1 and Status.FR bits to
BFC00170  01484025   OR T0, T2, T0                477:           or      t0,t2,t0                # enable the FPU in FR64 mode
                                                  478:   #endif
                                                  479:   
BFC00174  01284025   OR T0, T1, T0                480:           or      t0,t1,t0                # Include Status.CEE (from UDI)
BFC00178  40886000   MTC0 T0, Status              481:           mtc0    t0,_CP0_STATUS
                                                  482:           
                                                  483:   #if defined(PIC32WK) && defined(_CP0_CONFIG3) && defined (__mips_micromips)
                                                  484:           # Ensure that the ISAONEXEC bit is set for the microMIPS ISA for the PIC32WK family
                                                  485:           # _bsc0 (_CP0_CONFIG3, _CP0_CONFIG3_SELECT, ISAONEXEC_MASK)
                                                  486:           li      t1,0x10000              # ISAONEXEC bit
                                                  487:           mfc0    t0,_CP0_CONFIG3
                                                  488:           or      t1,t0,t1
                                                  489:           mtc0    t1,_CP0_CONFIG3
                                                  490:   
                                                  491:   #endif /* PIC32WK && __mips_micromips */
                                                  492:   
                                                  493:   #if defined(INIT_FPU64) || defined(__PIC32_HAS_FPU64)
                                                  494:                                           # FPU Control and Status
BFC0017C  3C0A0100   LUI T2, 256                  495:           li      t2,0x1000000            # FCSR: RM=0, FS=1, FO=0, FN=0
                                                  496:                                           # Enables: 0b00000 E=1, V=0, Z=0, O=0, U=0, I=0
BFC00180  44CAF800   CTC1 T2, F31                 497:           ctc1    t2, $31                 # High perf on denormal operands & tiny results
                                                  498:   #endif
BFC00184  000000C0   EHB                          499:           ehb
                                                  500:   
                                                  501:           ##################################################################
                                                  502:           # Call the "on bootstrap" procedure
                                                  503:           ##################################################################
BFC00188  3C089D00   LUI T0, -25344               504:           la      t0,_on_bootstrap
BFC00190  0100F809   JALR T0                      505:           jalr    t0
BFC00194  00000000   NOP                          506:           nop
                                                  507:   
                                                  508:           ##################################################################
                                                  509:           # Initialize Status<BEV> for normal exception vectors
                                                  510:           ##################################################################
BFC00198  40086000   MFC0 T0, Status              511:           mfc0    t0,_CP0_STATUS
BFC0019C  3C01FFBF   LUI AT, -65                  512:           and     t0,t0,0xffbfffff        # Clear BEV
BFC001A8  40886000   MTC0 T0, Status              513:           mtc0    t0,_CP0_STATUS
                                                  514:   
                                                  515:           ##################################################################
                                                  516:           # Call main. We do this via a thunk in the text section so that
                                                  517:           # a normal jump and link can be used, enabling the startup code
                                                  518:           # to work properly whether main is written in MIPS16 or MIPS32
                                                  519:           # code. I.e., the linker will correctly adjust the JAL to JALX if
                                                  520:           # necessary
                                                  521:           ##################################################################
BFC001AC  30840000   ANDI A0, A0, 0               522:           and     a0,a0,0
BFC001B0  30A50000   ANDI A1, A1, 0               523:           and     a1,a1,0
BFC001B4  3C089D00   LUI T0, -25344               524:           la      t0,_main_entry
BFC001BC  01000008   JR T0                        525:           jr      t0
BFC001C0  00000000   NOP                          526:           nop
                                                  527:   
                                                  528:           .end _startup
                                                  529:   
                                                  530:           ##################################################################
                                                  531:           # Boot Exception Vector Handler
                                                  532:           # Jumps to _bootstrap_exception_handler
                                                  533:           ##################################################################
                                                  534:           .section .bev_handler,code,keep
                                                  535:           .align 2
                                                  536:           .set noreorder
                                                  537:           .ent _bev_exception
                                                  538:   _bev_exception:
BFC00380  3C1A9D00   LUI K0, -25344               539:           la        k0,_bootstrap_exception_handler
BFC00388  03400008   JR K0                        540:           jr        k0
BFC0038C  00000000   NOP                          541:           nop
                                                  542:   
                                                  543:           .end _bev_exception
                                                  544:   
                                                  545:           ##################################################################
                                                  546:           # General Exception Vector Handler
                                                  547:           # Jumps to _general_exception_context
                                                  548:           ##################################################################
                                                  549:           .section .gen_handler,code
                                                  550:           .align 2
                                                  551:           .set noreorder
                                                  552:           .ent _gen_exception
                                                  553:   _gen_exception:
9D000180  3C1A9D00   LUI K0, -25344               554:   0:      la      k0,_general_exception_context
9D000188  03400008   JR K0                        555:           jr      k0
9D00018C  00000000   NOP                          556:           nop
                                                  557:   
                                                  558:           .end _gen_exception
                                                  559:   
                                                  560:   #if defined(INIT_MMU_MZ_FIXED) || defined(__PIC32_HAS_MMU_MZ_FIXED)
                                                  561:           ##################################################################
                                                  562:           # Simple TLB-Refill Exception Vector
                                                  563:           # Jumps to _simple_tlb_refill_exception_context
                                                  564:           ##################################################################
                                                  565:           .section .simple_tlb_refill_vector,code,keep
                                                  566:           .align 2
                                                  567:           .set noreorder
                                                  568:           .ent simple_tlb_refill_vector
                                                  569:   simple_tlb_refill_vector:
9D000000  3C1A9D00   LUI K0, -25344               570:           la      k0,_simple_tlb_refill_exception_context
9D000008  03400008   JR K0                        571:           jr      k0
9D00000C  00000000   NOP                          572:           nop
                                                  573:   
                                                  574:           .end simple_tlb_refill_vector
                                                  575:   #endif
                                                  576:   
                                                  577:   #if defined(INIT_L1_CACHE) || defined(__PIC32_HAS_L1CACHE)
                                                  578:           ##################################################################
                                                  579:           # Cache-Error Exception Vector Handler
                                                  580:           # Jumps to _cache_err_exception_context
                                                  581:           ##################################################################
                                                  582:           .section .cache_err_vector,code,keep
                                                  583:           .align 2
                                                  584:           .set noreorder
                                                  585:           .ent _cache_err_vector
                                                  586:   _cache_err_vector:
9D000100  3C1A9D00   LUI K0, -25344               587:           la      k0,_cache_err_exception_context
9D000108  03400008   JR K0                        588:           jr      k0
9D00010C  00000000   NOP                          589:           nop
                                                  590:   
                                                  591:           .end _cache_err_vector
                                                  592:   #endif
                                                  593:   
                                                  594:           .section .text.main_entry,code,keep
                                                  595:           .align 2
                                                  596:           .ent _main_entry
                                                  597:   _main_entry:
                                                  598:   
                                                  599:   #if defined(CPP_INIT)
                                                  600:           .weak _init
                                                  601:           # call .init section to run constructors etc
9D00301C  3C040000   LUI A0, 0                    602:           lui	a0,%hi(_init)
9D003020  27BDFFE8   ADDIU SP, SP, -24            603:           addiu	sp,sp,-24
9D003024  24840000   ADDIU A0, A0, 0              604:           addiu	a0,a0,%lo(_init)
9D003028  10800003   BEQ A0, ZERO, 0x9D003038     605:           beq	a0,$0,2f
9D00302C  AFBF0014   SW RA, 20(SP)                606:           sw	$31,20(sp)	 #,
9D003030  0080F809   JALR A0                      607:           jalr	a0
9D003034  00000000   NOP                          608:           nop
                                                  609:   2:
                                                  610:   #endif
9D003038  30840000   ANDI A0, A0, 0               611:           and     a0,a0,0
9D00303C  30A50000   ANDI A1, A1, 0               612:           and     a1,a1,0
                                                  613:   
                                                  614:           ##################################################################
                                                  615:   
                                                  616:           # Call main
                                                  617:           ##################################################################
9D003040  3C089D00   LUI T0, -25344               618:           la    	t0,main
9D003048  0100F809   JALR T0                      619:           jalr 	t0
9D00304C  00000000   NOP                          620:           nop
                                                  621:   
                                                  622:   #if defined(CALL_EXIT)
                                                  623:           ##################################################################
                                                  624:           # Call exit()
                                                  625:           ##################################################################
                                                  626:           jal exit
                                                  627:           nop
                                                  628:   #endif
                                                  629:   
                                                  630:           ##################################################################
                                                  631:           # Just in case, go into infinite loop
                                                  632:           # Call a software breakpoint only with -mdebugger compiler option
                                                  633:           ##################################################################
                                                  634:           .weak __exception_handler_break
                                                  635:   __crt0_exit:
                                                  636:   1:
9D003050  3C029D00   LUI V0, -25344               637:           la      v0,__exception_handler_break
9D003058  10400003   BEQ V0, ZERO, 0x9D003068     638:           beq     v0,0,0f
9D00305C  00000000   NOP                          639:           nop
9D003060  0040F809   JALR V0                      640:           jalr    v0
9D003064  00000000   NOP                          641:           nop
                                                  642:   
9D003068  1000FFF9   BEQ ZERO, ZERO, 0x9D003050   643:   0:      b       1b
9D00306C  00000000   NOP                          644:           nop
                                                  645:   
                                                  646:           .globl __crt0_exit
                                                  647:           .end _main_entry
---  /home/swood/HarmonyProjects/LED_Driver/firmware/src/main.c  ----------------------------------------
1:                   /*******************************************************************************
2:                     Main Source File
3:                   
4:                     Company:
5:                       Microchip Technology Inc.
6:                   
7:                     File Name:
8:                       main.c
9:                   
10:                    Summary:
11:                      This file contains the "main" function for a project.
12:                  
13:                    Description:
14:                      This file contains the "main" function for a project.  The
15:                      "main" function calls the "SYS_Initialize" function to initialize the state
16:                      machines of all modules in the system
17:                   *******************************************************************************/
18:                  
19:                  // *****************************************************************************
20:                  // *****************************************************************************
21:                  // Section: Included Files
22:                  // *****************************************************************************
23:                  // *****************************************************************************
24:                  
25:                  #include <stddef.h>                     // Defines NULL
26:                  #include <stdbool.h>                    // Defines true
27:                  #include <stdlib.h>                     // Defines EXIT_FAILURE
28:                  #include "definitions.h"                // SYS function prototypes
29:                  #include <stdio.h>
30:                  #include <string.h>
31:                  
32:                  
33:                  void drive_leds(uint8_t value) {
34:                  
35:                      OE_Set();
36:                      uint8_t flag = 1;
37:                      for (int i = 0; i < 8; ++i) {
38:                          CLK_Set();
39:                          if (value & (flag << i)) {
40:                              SDI_Set(); 
41:                          }
42:                          CLK_Clear();
43:                          SDI_Clear();
44:                      }
45:                      LE_Set();
46:                      LE_Clear();
47:                      OE_Clear();
48:                  }
49:                  // *****************************************************************************
50:                  // *****************************************************************************
51:                  // Section: Main Entry Point
52:                  // *****************************************************************************
53:                  // *****************************************************************************
54:                  
55:                  int main ( void )
56:                  {
57:                      /* Initialize all modules */
58:                      SYS_Initialize ( NULL );
59:                      
60:                      SDI_OutputEnable();
61:                      CLK_OutputEnable();
62:                      LE_OutputEnable();
63:                      SDO_InputEnable();
64:                      OE_OutputEnable();
65:                      
66:                      SDI_Clear();
67:                      CLK_Clear();
68:                      LE_Clear();
69:                      OE_Set();
70:                  
71:                      char outBuffer[256];
72:                      uint8_t buffer;
73:                      while ( true )
74:                      {
75:                          UART6_Read(&buffer, 1);
76:                          while (UART6_ReadIsBusy());
77:                          drive_leds(buffer);
78:                          sprintf(outBuffer, "Updated LEDs to %d\r\n", buffer);
79:                          UART6_Write(outBuffer, strlen(outBuffer));
80:                          
81:                          /* Maintain state machines of all polled MPLAB Harmony modules. */
82:                          SYS_Tasks ( );
83:                      }
84:                  
85:                      /* Execution should not come here during normal operation */
86:                  
87:                      return ( EXIT_FAILURE );
88:                  }
89:                  
90:                  
91:                  /*******************************************************************************
92:                   End of File
93:                  */
94:                  
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D0026CC  27BDFEE0   ADDIU SP, SP, -288
9D0026D0  AFBF011C   SW RA, 284(SP)
9D0026D4  AFB00118   SW S0, 280(SP)
9D0026D8  0F400044   JAL SYS_Initialize
9D0026DC  00002025   OR A0, ZERO, ZERO
9D0026E0  3C02BF86   LUI V0, -16506
9D0026E4  24060100   ADDIU A2, ZERO, 256
9D0026E8  AC460614   SW A2, 1556(V0)
9D0026EC  24050040   ADDIU A1, ZERO, 64
9D0026F0  AC450614   SW A1, 1556(V0)
9D0026F4  24030400   ADDIU V1, ZERO, 1024
9D0026F8  3C02BF86   LUI V0, -16506
9D0026FC  AC430814   SW V1, 2068(V0)
9D002700  3C02BF86   LUI V0, -16506
9D002704  24040080   ADDIU A0, ZERO, 128
9D002708  AC440618   SW A0, 1560(V0)
9D00270C  24020004   ADDIU V0, ZERO, 4
9D002710  3C04BF86   LUI A0, -16506
9D002714  AC820214   SW V0, 532(A0)
9D002718  3C04BF86   LUI A0, -16506
9D00271C  AC860634   SW A2, 1588(A0)
9D002720  AC850634   SW A1, 1588(A0)
9D002724  3C04BF86   LUI A0, -16506
9D002728  AC830834   SW V1, 2100(A0)
9D00272C  3C03BF86   LUI V1, -16506
9D002730  AC620238   SW V0, 568(V1)
9D002734  3C109D00   LUI S0, -25344
9D002738  261032B8   ADDIU S0, S0, 12984
9D00273C  24050001   ADDIU A1, ZERO, 1
9D002740  0F400AE9   JAL UART6_Read
9D002744  27A40110   ADDIU A0, SP, 272
9D002748  0F40007D   JAL UART6_ReadIsBusy
9D00274C  00000000   NOP
9D002750  1440FFFD   BNE V0, ZERO, main
9D002754  00000000   NOP
9D002758  0F400B8B   JAL drive_leds
9D00275C  93A40110   LBU A0, 272(SP)
9D002760  93A60110   LBU A2, 272(SP)
9D002764  02002825   OR A1, S0, ZERO
9D002768  0F400C59   JAL __wrap_sprintf
9D00276C  27A40010   ADDIU A0, SP, 16
9D002770  0F40070D   JAL strlen
9D002774  27A40010   ADDIU A0, SP, 16
9D002778  00402825   OR A1, V0, ZERO
9D00277C  0F4009E3   JAL UART6_Write
9D002780  27A40010   ADDIU A0, SP, 16
9D002784  1000FFEE   BEQ ZERO, ZERO, main
9D002788  24050001   ADDIU A1, ZERO, 1
9D002E2C  3C02BF86   LUI V0, -16506
9D002E30  24030004   ADDIU V1, ZERO, 4
9D002E34  AC430238   SW V1, 568(V0)
9D002E38  00001025   OR V0, ZERO, ZERO
9D002E3C  3C08BF86   LUI T0, -16506
9D002E40  24070040   ADDIU A3, ZERO, 64
9D002E44  240A0001   ADDIU T2, ZERO, 1
9D002E48  24060100   ADDIU A2, ZERO, 256
9D002E4C  3C05BF86   LUI A1, -16506
9D002E50  24090008   ADDIU T1, ZERO, 8
9D002E54  AD070638   SW A3, 1592(T0)
9D002E58  004A1804   SLLV V1, T2, V0
9D002E5C  00641824   AND V1, V1, A0
9D002E60  54600001   BNEL V1, ZERO, 0x9D002E68
9D002E64  AD060638   SW A2, 1592(T0)
9D002E68  ACA70634   SW A3, 1588(A1)
9D002E6C  ACA60634   SW A2, 1588(A1)
9D002E70  24420001   ADDIU V0, V0, 1
9D002E74  1449FFF7   BNE V0, T1, 0x9D002E54
9D002E78  3C03BF86   LUI V1, -16506
9D002E7C  24020400   ADDIU V0, ZERO, 1024
9D002E80  AC620838   SW V0, 2104(V1)
9D002E84  3C03BF86   LUI V1, -16506
9D002E88  AC620834   SW V0, 2100(V1)
9D002E8C  3C02BF86   LUI V0, -16506
9D002E90  24030004   ADDIU V1, ZERO, 4
9D002E94  AC430234   SW V1, 564(V0)
9D002E98  03E00008   JR RA
9D002E9C  00000000   NOP
---  /home/swood/HarmonyProjects/LED_Driver/firmware/src/config/LED_Driver/stdio/xc32_monitor.c  --------
1:                   /*******************************************************************************
2:                    Debug Console Source file
3:                   
4:                     Company:
5:                       Microchip Technology Inc.
6:                   
7:                     File Name:
8:                       xc32_monitor.c
9:                   
10:                    Summary:
11:                      debug console Source File
12:                  
13:                    Description:
14:                      None
15:                  
16:                  *******************************************************************************/
17:                  
18:                  /*******************************************************************************
19:                  * Copyright (C) 2018 Microchip Technology Inc. and its subsidiaries.
20:                  *
21:                  * Subject to your compliance with these terms, you may use Microchip software
22:                  * and any derivatives exclusively with Microchip products. It is your
23:                  * responsibility to comply with third party license terms applicable to your
24:                  * use of third party software (including open source software) that may
25:                  * accompany Microchip software.
26:                  *
27:                  * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
28:                  * EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
29:                  * WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
30:                  * PARTICULAR PURPOSE.
31:                  *
32:                  * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
33:                  * INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
34:                  * WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
35:                  * BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
36:                  * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
37:                  * ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
38:                  * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
39:                  *******************************************************************************/
40:                  #include <stddef.h>
41:                  
42:                  extern int read(int handle, void *buffer, unsigned int len);
43:                  extern int write(int handle, void * buffer, size_t count);
44:                  
45:                  
46:                  int read(int handle, void *buffer, unsigned int len)
47:                  {
48:                     return -1;
49:                  }
50:                  
51:                  int write(int handle, void * buffer, size_t count)
52:                  {
53:                     return -1;
54:                  }
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
---  /home/swood/HarmonyProjects/LED_Driver/firmware/src/config/LED_Driver/peripheral/uart/plib_uart6.c  
1:                   /*******************************************************************************
2:                     UART6 PLIB
3:                   
4:                     Company:
5:                       Microchip Technology Inc.
6:                   
7:                     File Name:
8:                       plib_uart6.c
9:                   
10:                    Summary:
11:                      UART6 PLIB Implementation File
12:                  
13:                    Description:
14:                      None
15:                  
16:                  *******************************************************************************/
17:                  
18:                  /*******************************************************************************
19:                  * Copyright (C) 2019 Microchip Technology Inc. and its subsidiaries.
20:                  *
21:                  * Subject to your compliance with these terms, you may use Microchip software
22:                  * and any derivatives exclusively with Microchip products. It is your
23:                  * responsibility to comply with third party license terms applicable to your
24:                  * use of third party software (including open source software) that may
25:                  * accompany Microchip software.
26:                  *
27:                  * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
28:                  * EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
29:                  * WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
30:                  * PARTICULAR PURPOSE.
31:                  *
32:                  * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
33:                  * INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
34:                  * WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
35:                  * BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
36:                  * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
37:                  * ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
38:                  * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
39:                  *******************************************************************************/
40:                  
41:                  #include "device.h"
42:                  #include "plib_uart6.h"
43:                  
44:                  // *****************************************************************************
45:                  // *****************************************************************************
46:                  // Section: UART6 Implementation
47:                  // *****************************************************************************
48:                  // *****************************************************************************
49:                  
50:                  UART_OBJECT uart6Obj;
51:                  
52:                  void static UART6_ErrorClear( void )
53:                  {
54:                      UART_ERROR errors = UART_ERROR_NONE;
55:                      uint8_t dummyData = 0u;
56:                  
57:                      errors = (UART_ERROR)(U6STA & (_U6STA_OERR_MASK | _U6STA_FERR_MASK | _U6STA_PERR_MASK));
58:                  
59:                      if(errors != UART_ERROR_NONE)
60:                      {
61:                          /* If it's a overrun error then clear it to flush FIFO */
62:                          if(U6STA & _U6STA_OERR_MASK)
63:                          {
64:                              U6STACLR = _U6STA_OERR_MASK;
65:                          }
66:                  
67:                          /* Read existing error bytes from FIFO to clear parity and framing error flags */
68:                          while(U6STA & _U6STA_URXDA_MASK)
69:                          {
70:                              dummyData = U6RXREG;
71:                          }
72:                  
73:                          /* Clear error interrupt flag */
74:                          IFS5CLR = _IFS5_U6EIF_MASK;
75:                  
76:                          /* Clear up the receive interrupt flag so that RX interrupt is not
77:                           * triggered for error bytes */
78:                          IFS5CLR = _IFS5_U6RXIF_MASK;
79:                      }
80:                  
81:                      // Ignore the warning
82:                      (void)dummyData;
83:                  }
84:                  
85:                  void UART6_Initialize( void )
86:                  {
87:                      /* Set up UxMODE bits */
88:                      /* STSEL  = 0 */
89:                      /* PDSEL = 0 */
90:                      /* UEN = 0 */
91:                  
92:                      U6MODE = 0x8;
93:                  
94:                      /* Enable UART6 Receiver and Transmitter */
95:                      U6STASET = (_U6STA_UTXEN_MASK | _U6STA_URXEN_MASK | _U6STA_UTXISEL1_MASK );
96:                  
97:                      /* BAUD Rate register Setup */
98:                      U6BRG = 216;
99:                  
100:                     /* Disable Interrupts */
101:                     IEC5CLR = _IEC5_U6EIE_MASK;
102:                 
103:                     IEC5CLR = _IEC5_U6RXIE_MASK;
104:                 
105:                     IEC5CLR = _IEC5_U6TXIE_MASK;
106:                 
107:                     /* Initialize instance object */
108:                     uart6Obj.rxBuffer = NULL;
109:                     uart6Obj.rxSize = 0;
110:                     uart6Obj.rxProcessedSize = 0;
111:                     uart6Obj.rxBusyStatus = false;
112:                     uart6Obj.rxCallback = NULL;
113:                     uart6Obj.txBuffer = NULL;
114:                     uart6Obj.txSize = 0;
115:                     uart6Obj.txProcessedSize = 0;
116:                     uart6Obj.txBusyStatus = false;
117:                     uart6Obj.txCallback = NULL;
118:                     uart6Obj.errors = UART_ERROR_NONE;
119:                 
120:                     /* Turn ON UART6 */
121:                     U6MODESET = _U6MODE_ON_MASK;
122:                 }
123:                 
124:                 bool UART6_SerialSetup( UART_SERIAL_SETUP *setup, uint32_t srcClkFreq )
125:                 {
126:                     bool status = false;
127:                     uint32_t baud;
128:                     uint32_t status_ctrl;
129:                     bool brgh = 1;
130:                     int32_t uxbrg = 0;
131:                 
132:                     if((uart6Obj.rxBusyStatus == true) || (uart6Obj.txBusyStatus == true))
133:                     {
134:                         /* Transaction is in progress, so return without updating settings */
135:                         return status;
136:                     }
137:                 
138:                     if (setup != NULL)
139:                     {
140:                         baud = setup->baudRate;
141:                 
142:                         if ((baud == 0) || ((setup->dataWidth == UART_DATA_9_BIT) && (setup->parity != UART_PARITY_NONE)))
143:                         {
144:                             return status;
145:                         }
146:                 
147:                         if(srcClkFreq == 0)
148:                         {
149:                             srcClkFreq = UART6_FrequencyGet();
150:                         }
151:                 
152:                         /* Calculate BRG value */
153:                         if (brgh == 0)
154:                         {
155:                             uxbrg = (((srcClkFreq >> 4) + (baud >> 1)) / baud ) - 1;
156:                         }
157:                         else
158:                         {
159:                             uxbrg = (((srcClkFreq >> 2) + (baud >> 1)) / baud ) - 1;
160:                         }
161:                 
162:                         /* Check if the baud value can be set with low baud settings */
163:                         if((uxbrg < 0) || (uxbrg > UINT16_MAX))
164:                         {
165:                             return status;
166:                         }
167:                 
168:                         /* Turn OFF UART6. Save UTXEN, URXEN and UTXBRK bits as these are cleared upon disabling UART */
169:                 
170:                         status_ctrl = U6STA & (_U6STA_UTXEN_MASK | _U6STA_URXEN_MASK | _U6STA_UTXBRK_MASK);
171:                 
172:                         U6MODECLR = _U6MODE_ON_MASK;
173:                 
174:                         if(setup->dataWidth == UART_DATA_9_BIT)
175:                         {
176:                             /* Configure UART6 mode */
177:                             U6MODE = (U6MODE & (~_U6MODE_PDSEL_MASK)) | setup->dataWidth;
178:                         }
179:                         else
180:                         {
181:                             /* Configure UART6 mode */
182:                             U6MODE = (U6MODE & (~_U6MODE_PDSEL_MASK)) | setup->parity;
183:                         }
184:                 
185:                         /* Configure UART6 mode */
186:                         U6MODE = (U6MODE & (~_U6MODE_STSEL_MASK)) | setup->stopBits;
187:                 
188:                         /* Configure UART6 Baud Rate */
189:                         U6BRG = uxbrg;
190:                 
191:                         U6MODESET = _U6MODE_ON_MASK;
192:                 
193:                         /* Re-enable UTXEN, URXEN and UTXBRK. */
194:                         U6STASET = status_ctrl;
195:                 
196:                         status = true;
197:                     }
198:                 
199:                     return status;
200:                 }
201:                 
202:                 bool UART6_AutoBaudQuery( void )
203:                 {
204:                     if(U6MODE & _U6MODE_ABAUD_MASK)
205:                         return true;
206:                     else
207:                         return false;
208:                 }
209:                 
210:                 void UART6_AutoBaudSet( bool enable )
211:                 {
212:                     if( enable == true )
213:                     {
214:                         U6MODESET = _U6MODE_ABAUD_MASK;
215:                     }
216:                 
217:                     /* Turning off ABAUD if it was on can lead to unpredictable behavior, so that
218:                        direction of control is not allowed in this function.                      */
219:                 }
220:                 
221:                 bool UART6_Read(void* buffer, const size_t size )
222:                 {
223:                     bool status = false;
224:                     uint8_t* lBuffer = (uint8_t* )buffer;
225:                 
226:                     if(lBuffer != NULL)
227:                     {
228:                         /* Check if receive request is in progress */
229:                         if(uart6Obj.rxBusyStatus == false)
230:                         {
231:                             /* Clear error flags and flush out error data that may have been received when no active request was pending */
232:                             UART6_ErrorClear();
233:                 
234:                             uart6Obj.rxBuffer = lBuffer;
235:                             uart6Obj.rxSize = size;
236:                             uart6Obj.rxProcessedSize = 0;
237:                             uart6Obj.rxBusyStatus = true;
238:                             uart6Obj.errors = UART_ERROR_NONE;
239:                 
240:                             status = true;
241:                 
242:                             /* Enable UART6_FAULT Interrupt */
243:                             IEC5SET = _IEC5_U6EIE_MASK;
244:                 
245:                             /* Enable UART6_RX Interrupt */
246:                             IEC5SET = _IEC5_U6RXIE_MASK;
247:                         }
248:                     }
249:                 
250:                     return status;
251:                 }
252:                 
253:                 bool UART6_Write( void* buffer, const size_t size )
254:                 {
255:                     bool status = false;
256:                     uint8_t* lBuffer = (uint8_t*)buffer;
257:                 
258:                     if(lBuffer != NULL)
259:                     {
260:                         /* Check if transmit request is in progress */
261:                         if(uart6Obj.txBusyStatus == false)
262:                         {
263:                             uart6Obj.txBuffer = lBuffer;
264:                             uart6Obj.txSize = size;
265:                             uart6Obj.txProcessedSize = 0;
266:                             uart6Obj.txBusyStatus = true;
267:                             status = true;
268:                 
269:                             /* Initiate the transfer by writing as many bytes as we can */
270:                             while((!(U6STA & _U6STA_UTXBF_MASK)) && (uart6Obj.txSize > uart6Obj.txProcessedSize) )
271:                             {
272:                                 if (( U6MODE & (_U6MODE_PDSEL0_MASK | _U6MODE_PDSEL1_MASK)) == (_U6MODE_PDSEL0_MASK | _U6MODE_PDSEL1_MASK))
273:                                 {
274:                                     /* 9-bit mode */
275:                                     U6TXREG = ((uint16_t*)uart6Obj.txBuffer)[uart6Obj.txProcessedSize++];
276:                                 }
277:                                 else
278:                                 {
279:                                     /* 8-bit mode */
280:                                     U6TXREG = uart6Obj.txBuffer[uart6Obj.txProcessedSize++];
281:                                 }
282:                             }
283:                 
284:                             IEC5SET = _IEC5_U6TXIE_MASK;
285:                         }
286:                     }
287:                 
288:                     return status;
289:                 }
290:                 
291:                 UART_ERROR UART6_ErrorGet( void )
292:                 {
293:                     UART_ERROR errors = uart6Obj.errors;
294:                 
295:                     uart6Obj.errors = UART_ERROR_NONE;
296:                 
297:                     /* All errors are cleared, but send the previous error state */
298:                     return errors;
299:                 }
300:                 
301:                 void UART6_ReadCallbackRegister( UART_CALLBACK callback, uintptr_t context )
302:                 {
303:                     uart6Obj.rxCallback = callback;
304:                 
305:                     uart6Obj.rxContext = context;
306:                 }
307:                 
308:                 bool UART6_ReadIsBusy( void )
309:                 {
310:                     return uart6Obj.rxBusyStatus;
311:                 }
312:                 
313:                 size_t UART6_ReadCountGet( void )
314:                 {
315:                     return uart6Obj.rxProcessedSize;
316:                 }
317:                 
318:                 bool UART6_ReadAbort(void)
319:                 {
320:                     if (uart6Obj.rxBusyStatus == true)
321:                     {
322:                         /* Disable the fault interrupt */
323:                         IEC5CLR = _IEC5_U6EIE_MASK;
324:                 
325:                         /* Disable the receive interrupt */
326:                         IEC5CLR = _IEC5_U6RXIE_MASK;
327:                 
328:                         uart6Obj.rxBusyStatus = false;
329:                 
330:                         /* If required application should read the num bytes processed prior to calling the read abort API */
331:                         uart6Obj.rxSize = uart6Obj.rxProcessedSize = 0;
332:                     }
333:                 
334:                     return true;
335:                 }
336:                 
337:                 void UART6_WriteCallbackRegister( UART_CALLBACK callback, uintptr_t context )
338:                 {
339:                     uart6Obj.txCallback = callback;
340:                 
341:                     uart6Obj.txContext = context;
342:                 }
343:                 
344:                 bool UART6_WriteIsBusy( void )
345:                 {
346:                     return uart6Obj.txBusyStatus;
347:                 }
348:                 
349:                 size_t UART6_WriteCountGet( void )
350:                 {
351:                     return uart6Obj.txProcessedSize;
352:                 }
353:                 
354:                 void UART6_FAULT_InterruptHandler (void)
355:                 {
356:                     /* Save the error to be reported later */
357:                     uart6Obj.errors = (UART_ERROR)(U6STA & (_U6STA_OERR_MASK | _U6STA_FERR_MASK | _U6STA_PERR_MASK));
358:                 
359:                     /* Disable the fault interrupt */
360:                     IEC5CLR = _IEC5_U6EIE_MASK;
361:                 
362:                     /* Disable the receive interrupt */
363:                     IEC5CLR = _IEC5_U6RXIE_MASK;
364:                 
365:                     /* Clear rx status */
366:                     uart6Obj.rxBusyStatus = false;
367:                 
368:                     UART6_ErrorClear();
369:                 
370:                     /* Client must call UARTx_ErrorGet() function to get the errors */
371:                     if( uart6Obj.rxCallback != NULL )
372:                     {
373:                         uart6Obj.rxCallback(uart6Obj.rxContext);
374:                     }
375:                 }
376:                 
377:                 void UART6_RX_InterruptHandler (void)
378:                 {
379:                     if(uart6Obj.rxBusyStatus == true)
380:                     {
381:                         while((_U6STA_URXDA_MASK == (U6STA & _U6STA_URXDA_MASK)) && (uart6Obj.rxSize > uart6Obj.rxProcessedSize) )
382:                         {
383:                             if (( U6MODE & (_U6MODE_PDSEL0_MASK | _U6MODE_PDSEL1_MASK)) == (_U6MODE_PDSEL0_MASK | _U6MODE_PDSEL1_MASK))
384:                             {
385:                                 /* 9-bit mode */
386:                                 ((uint16_t*)uart6Obj.rxBuffer)[uart6Obj.rxProcessedSize++] = (uint16_t )(U6RXREG);
387:                             }
388:                             else
389:                             {
390:                                 /* 8-bit mode */
391:                                 uart6Obj.rxBuffer[uart6Obj.rxProcessedSize++] = (uint8_t )(U6RXREG);
392:                             }
393:                         }
394:                 
395:                         /* Clear UART6 RX Interrupt flag */
396:                         IFS5CLR = _IFS5_U6RXIF_MASK;
397:                 
398:                         /* Check if the buffer is done */
399:                         if(uart6Obj.rxProcessedSize >= uart6Obj.rxSize)
400:                         {
401:                             uart6Obj.rxBusyStatus = false;
402:                 
403:                             /* Disable the fault interrupt */
404:                             IEC5CLR = _IEC5_U6EIE_MASK;
405:                 
406:                             /* Disable the receive interrupt */
407:                             IEC5CLR = _IEC5_U6RXIE_MASK;
408:                 
409:                 
410:                             if(uart6Obj.rxCallback != NULL)
411:                             {
412:                                 uart6Obj.rxCallback(uart6Obj.rxContext);
413:                             }
414:                         }
415:                     }
416:                     else
417:                     {
418:                         // Nothing to process
419:                         ;
420:                     }
421:                 }
422:                 
423:                 void UART6_TX_InterruptHandler (void)
424:                 {
425:                     if(uart6Obj.txBusyStatus == true)
426:                     {
427:                         while((!(U6STA & _U6STA_UTXBF_MASK)) && (uart6Obj.txSize > uart6Obj.txProcessedSize) )
428:                         {
429:                             if (( U6MODE & (_U6MODE_PDSEL0_MASK | _U6MODE_PDSEL1_MASK)) == (_U6MODE_PDSEL0_MASK | _U6MODE_PDSEL1_MASK))
430:                             {
431:                                 /* 9-bit mode */
432:                                 U6TXREG = ((uint16_t*)uart6Obj.txBuffer)[uart6Obj.txProcessedSize++];
433:                             }
434:                             else
435:                             {
436:                                 /* 8-bit mode */
437:                                 U6TXREG = uart6Obj.txBuffer[uart6Obj.txProcessedSize++];
438:                             }
439:                         }
440:                 
441:                         /* Clear UART6TX Interrupt flag */
442:                         IFS5CLR = _IFS5_U6TXIF_MASK;
443:                 
444:                         /* Check if the buffer is done */
445:                         if(uart6Obj.txProcessedSize >= uart6Obj.txSize)
446:                         {
447:                             uart6Obj.txBusyStatus = false;
448:                 
449:                             /* Disable the transmit interrupt, to avoid calling ISR continuously */
450:                             IEC5CLR = _IEC5_U6TXIE_MASK;
451:                 
452:                             if(uart6Obj.txCallback != NULL)
453:                             {
454:                                 uart6Obj.txCallback(uart6Obj.txContext);
455:                             }
456:                         }
457:                     }
458:                     else
459:                     {
460:                         // Nothing to process
461:                         ;
462:                     }
463:                 }
464:                 
465:                 
466:                 
467:                 bool UART6_TransmitComplete( void )
468:                 {
469:                     bool transmitComplete = false;
470:                 
471:                     if((U6STA & _U6STA_TRMT_MASK))
472:                     {
473:                         transmitComplete = true;
474:                     }
475:                 
476:                     return transmitComplete;
477:                 }
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
00000004  00000000   NOP
00000008  00000000   NOP
0000000C  00000000   NOP
00000010  00000000   NOP
00000018  00000000   NOP
00000020  00000000   NOP
00000028  00000000   NOP
0000002C  00000000   NOP
00000030  00000000   NOP
00000034  00000000   NOP
00000038  00000000   NOP
00000040  00000000   NOP
0000004C  00000000   NOP
00000054  00000000   NOP
00000058  00000000   NOP
0000005C  00000000   NOP
00000060  00000000   NOP
00000064  00000000   NOP
00000068  00000000   NOP
00000074  00000000   NOP
00000078  00000000   NOP
0000007C  00000000   NOP
00000088  00000000   NOP
00000090  00000000   NOP
0000009C  00000000   NOP
000000A8  00000000   NOP
000000AC  00000000   NOP
000000B0  00000000   NOP
000000B4  00000000   NOP
000000C0  00000000   NOP
000000C4  00000000   NOP
000000C8  00000000   NOP
000000CC  00000000   NOP
000000D4  00000000   NOP
000000E0  00000000   NOP
000000E4  00000000   NOP
000000EC  00000000   NOP
000000F4  00000000   NOP
000000FC  00000000   NOP
00000104  00000000   NOP
00000108  00000000   NOP
00000110  00000000   NOP
9D000190  27BDFFE8   ADDIU SP, SP, -24
9D000194  AFBF0014   SW RA, 20(SP)
9D000198  AFB00010   SW S0, 16(SP)
9D00019C  3C02BF82   LUI V0, -16510
9D0001A0  8C422A10   LW V0, 10768(V0)
9D0001A4  3042000E   ANDI V0, V0, 14
9D0001A8  3C108000   LUI S0, -32768
9D0001AC  261003A4   ADDIU S0, S0, 932
9D0001B0  AE020030   SW V0, 48(S0)
9D0001B4  3C02BF81   LUI V0, -16511
9D0001B8  3C031000   LUI V1, 4096
9D0001BC  AC430114   SW V1, 276(V0)
9D0001C0  3C032000   LUI V1, 8192
9D0001C4  AC430114   SW V1, 276(V0)
9D0001C8  0F400BA8   JAL UART6_ErrorClear
9D0001CC  A200002C   SB ZERO, 44(S0)
9D0001D0  8E020024   LW V0, 36(S0)
9D0001D4  10400003   BEQ V0, ZERO, 0x9D0001E4
9D0001D8  3C038000   LUI V1, -32768
9D0001DC  0040F809   JALR V0
9D0001E0  8C6403CC   LW A0, 972(V1)
9D0001E4  8FBF0014   LW RA, 20(SP)
9D0001E8  8FB00010   LW S0, 16(SP)
9D0001EC  03E00008   JR RA
9D0001F0  27BD0018   ADDIU SP, SP, 24
9D0001F4  3C028000   LUI V0, -32768
9D0001F8  03E00008   JR RA
9D0001FC  904203D0   LBU V0, 976(V0)
9D002028  3C028000   LUI V0, -32768
9D00202C  904203D0   LBU V0, 976(V0)
9D002030  10400041   BEQ V0, ZERO, 0x9D002138
9D002034  3C08BF82   LUI T0, -16510
9D002038  3C028000   LUI V0, -32768
9D00203C  244203A4   ADDIU V0, V0, 932
9D002040  3C07BF82   LUI A3, -16510
9D002044  24060006   ADDIU A2, ZERO, 6
9D002048  3C05BF82   LUI A1, -16510
9D00204C  8D032A10   LW V1, 10768(T0)
9D002050  30630001   ANDI V1, V1, 1
9D002054  5060001E   BEQL V1, ZERO, 0x9D0020D0
9D002058  3C02BF81   LUI V0, -16511
9D00205C  8C430020   LW V1, 32(V0)
9D002060  8C44001C   LW A0, 28(V0)
9D002064  0064202B   SLTU A0, V1, A0
9D002068  14800006   BNE A0, ZERO, 0x9D002084
9D00206C  00000000   NOP
9D002070  3C02BF81   LUI V0, -16511
9D002074  3C032000   LUI V1, 8192
9D002078  AC430094   SW V1, 148(V0)
9D00207C  1000001D   BEQ ZERO, ZERO, 0x9D0020F4
9D002080  3C028000   LUI V0, -32768
9D002084  8CE42A00   LW A0, 10752(A3)
9D002088  30840006   ANDI A0, A0, 6
9D00208C  14860009   BNE A0, A2, 0x9D0020B4
9D002090  00000000   NOP
9D002094  8CA92A30   LW T1, 10800(A1)
9D002098  8C440018   LW A0, 24(V0)
9D00209C  246A0001   ADDIU T2, V1, 1
9D0020A0  AC4A0020   SW T2, 32(V0)
9D0020A4  00031840   SLL V1, V1, 1
9D0020A8  00831821   ADDU V1, A0, V1
9D0020AC  1000FFE7   BEQ ZERO, ZERO, 0x9D00204C
9D0020B0  A4690000   SH T1, 0(V1)
9D0020B4  8CA92A30   LW T1, 10800(A1)
9D0020B8  8C440018   LW A0, 24(V0)
9D0020BC  246A0001   ADDIU T2, V1, 1
9D0020C0  AC4A0020   SW T2, 32(V0)
9D0020C4  00831821   ADDU V1, A0, V1
9D0020C8  1000FFE0   BEQ ZERO, ZERO, 0x9D00204C
9D0020CC  A0690000   SB T1, 0(V1)
9D0020D0  3C032000   LUI V1, 8192
9D0020D4  AC430094   SW V1, 148(V0)
9D0020D8  3C028000   LUI V0, -32768
9D0020DC  244203A4   ADDIU V0, V0, 932
9D0020E0  8C430020   LW V1, 32(V0)
9D0020E4  8C42001C   LW V0, 28(V0)
9D0020E8  0062102B   SLTU V0, V1, V0
9D0020EC  14400012   BNE V0, ZERO, 0x9D002138
9D0020F0  3C028000   LUI V0, -32768
9D0020F4  244203A4   ADDIU V0, V0, 932
9D0020F8  A040002C   SB ZERO, 44(V0)
9D0020FC  3C03BF81   LUI V1, -16511
9D002100  3C041000   LUI A0, 4096
9D002104  AC640114   SW A0, 276(V1)
9D002108  3C042000   LUI A0, 8192
9D00210C  AC640114   SW A0, 276(V1)
9D002110  8C420024   LW V0, 36(V0)
9D002114  10400008   BEQ V0, ZERO, 0x9D002138
9D002118  3C038000   LUI V1, -32768
9D00211C  27BDFFE8   ADDIU SP, SP, -24
9D002120  AFBF0014   SW RA, 20(SP)
9D002124  0040F809   JALR V0
9D002128  8C6403CC   LW A0, 972(V1)
9D00212C  8FBF0014   LW RA, 20(SP)
9D002130  03E00008   JR RA
9D002134  27BD0018   ADDIU SP, SP, 24
9D002138  03E00008   JR RA
9D00213C  00000000   NOP
9D002140  3C028000   LUI V0, -32768
9D002144  904203B8   LBU V0, 952(V0)
9D002148  1040003E   BEQ V0, ZERO, 0x9D002244
9D00214C  3C028000   LUI V0, -32768
9D002150  244303A4   ADDIU V1, V0, 932
9D002154  8C6A0004   LW T2, 4(V1)
9D002158  8C4603A4   LW A2, 932(V0)
9D00215C  3C09BF82   LUI T1, -16510
9D002160  244303A4   ADDIU V1, V0, 932
9D002164  3C08BF82   LUI T0, -16510
9D002168  24070006   ADDIU A3, ZERO, 6
9D00216C  3C05BF82   LUI A1, -16510
9D002170  8D222A10   LW V0, 10768(T1)
9D002174  30420200   ANDI V0, V0, 512
9D002178  1440001A   BNE V0, ZERO, 0x9D0021E4
9D00217C  3C02BF81   LUI V0, -16511
9D002180  8C620008   LW V0, 8(V1)
9D002184  004A202B   SLTU A0, V0, T2
9D002188  14800006   BNE A0, ZERO, 0x9D0021A4
9D00218C  00000000   NOP
9D002190  3C02BF81   LUI V0, -16511
9D002194  3C034000   LUI V1, 16384
9D002198  AC430094   SW V1, 148(V0)
9D00219C  1000001A   BEQ ZERO, ZERO, 0x9D002208
9D0021A0  3C028000   LUI V0, -32768
9D0021A4  8D042A00   LW A0, 10752(T0)
9D0021A8  30840006   ANDI A0, A0, 6
9D0021AC  14870008   BNE A0, A3, 0x9D0021D0
9D0021B0  24440001   ADDIU A0, V0, 1
9D0021B4  AC640008   SW A0, 8(V1)
9D0021B8  00021040   SLL V0, V0, 1
9D0021BC  00C21021   ADDU V0, A2, V0
9D0021C0  94420000   LHU V0, 0(V0)
9D0021C4  ACA22A20   SW V0, 10784(A1)
9D0021C8  1000FFE9   BEQ ZERO, ZERO, 0x9D002170
9D0021CC  00000000   NOP
9D0021D0  AC640008   SW A0, 8(V1)
9D0021D4  7CC2118A   LBUX V0, V0(A2)
9D0021D8  ACA22A20   SW V0, 10784(A1)
9D0021DC  1000FFE4   BEQ ZERO, ZERO, 0x9D002170
9D0021E0  00000000   NOP
9D0021E4  3C034000   LUI V1, 16384
9D0021E8  AC430094   SW V1, 148(V0)
9D0021EC  3C028000   LUI V0, -32768
9D0021F0  244203A4   ADDIU V0, V0, 932
9D0021F4  8C430008   LW V1, 8(V0)
9D0021F8  8C420004   LW V0, 4(V0)
9D0021FC  0062102B   SLTU V0, V1, V0
9D002200  14400010   BNE V0, ZERO, 0x9D002244
9D002204  3C028000   LUI V0, -32768
9D002208  244203A4   ADDIU V0, V0, 932
9D00220C  A0400014   SB ZERO, 20(V0)
9D002210  3C03BF81   LUI V1, -16511
9D002214  3C044000   LUI A0, 16384
9D002218  AC640114   SW A0, 276(V1)
9D00221C  8C42000C   LW V0, 12(V0)
9D002220  10400008   BEQ V0, ZERO, 0x9D002244
9D002224  3C038000   LUI V1, -32768
9D002228  27BDFFE8   ADDIU SP, SP, -24
9D00222C  AFBF0014   SW RA, 20(SP)
9D002230  0040F809   JALR V0
9D002234  8C6403B4   LW A0, 948(V1)
9D002238  8FBF0014   LW RA, 20(SP)
9D00223C  03E00008   JR RA
9D002240  27BD0018   ADDIU SP, SP, 24
9D002244  03E00008   JR RA
9D002248  00000000   NOP
9D00278C  1080001D   BEQ A0, ZERO, 0x9D002804
9D002790  00001025   OR V0, ZERO, ZERO
9D002794  3C028000   LUI V0, -32768
9D002798  904303B8   LBU V1, 952(V0)
9D00279C  14600019   BNE V1, ZERO, 0x9D002804
9D0027A0  00001025   OR V0, ZERO, ZERO
9D0027A4  3C028000   LUI V0, -32768
9D0027A8  AC4403A4   SW A0, 932(V0)
9D0027AC  244203A4   ADDIU V0, V0, 932
9D0027B0  AC450004   SW A1, 4(V0)
9D0027B4  AC400008   SW ZERO, 8(V0)
9D0027B8  24030001   ADDIU V1, ZERO, 1
9D0027BC  A0430014   SB V1, 20(V0)
9D0027C0  3C0ABF82   LUI T2, -16510
9D0027C4  00401825   OR V1, V0, ZERO
9D0027C8  3C09BF82   LUI T1, -16510
9D0027CC  24080006   ADDIU T0, ZERO, 6
9D0027D0  3C07BF82   LUI A3, -16510
9D0027D4  8D422A10   LW V0, 10768(T2)
9D0027D8  30420200   ANDI V0, V0, 512
9D0027DC  14400006   BNE V0, ZERO, 0x9D0027F8
9D0027E0  3C02BF81   LUI V0, -16511
9D0027E4  8C620008   LW V0, 8(V1)
9D0027E8  0045302B   SLTU A2, V0, A1
9D0027EC  14C00007   BNE A2, ZERO, 0x9D00280C
9D0027F0  00000000   NOP
9D0027F4  3C02BF81   LUI V0, -16511
9D0027F8  3C034000   LUI V1, 16384
9D0027FC  AC430118   SW V1, 280(V0)
9D002800  24020001   ADDIU V0, ZERO, 1
9D002804  03E00008   JR RA
9D002808  00000000   NOP
9D00280C  8D262A00   LW A2, 10752(T1)
9D002810  30C60006   ANDI A2, A2, 6
9D002814  14C80008   BNE A2, T0, 0x9D002838
9D002818  24460001   ADDIU A2, V0, 1
9D00281C  AC660008   SW A2, 8(V1)
9D002820  00021040   SLL V0, V0, 1
9D002824  00821021   ADDU V0, A0, V0
9D002828  94420000   LHU V0, 0(V0)
9D00282C  ACE22A20   SW V0, 10784(A3)
9D002830  1000FFE8   BEQ ZERO, ZERO, 0x9D0027D4
9D002834  00000000   NOP
9D002838  AC660008   SW A2, 8(V1)
9D00283C  7C82118A   LBUX V0, V0(A0)
9D002840  ACE22A20   SW V0, 10784(A3)
9D002844  1000FFE3   BEQ ZERO, ZERO, 0x9D0027D4
9D002848  00000000   NOP
9D002B1C  3C02BF82   LUI V0, -16510
9D002B20  24030008   ADDIU V1, ZERO, 8
9D002B24  AC432A00   SW V1, 10752(V0)
9D002B28  3C02BF82   LUI V0, -16510
9D002B2C  34039400   ORI V1, ZERO, -27648
9D002B30  AC432A18   SW V1, 10776(V0)
9D002B34  3C02BF82   LUI V0, -16510
9D002B38  240300D8   ADDIU V1, ZERO, 216
9D002B3C  AC432A40   SW V1, 10816(V0)
9D002B40  3C02BF81   LUI V0, -16511
9D002B44  3C031000   LUI V1, 4096
9D002B48  AC430114   SW V1, 276(V0)
9D002B4C  3C032000   LUI V1, 8192
9D002B50  AC430114   SW V1, 276(V0)
9D002B54  3C034000   LUI V1, 16384
9D002B58  AC430114   SW V1, 276(V0)
9D002B5C  3C038000   LUI V1, -32768
9D002B60  246203A4   ADDIU V0, V1, 932
9D002B64  AC400018   SW ZERO, 24(V0)
9D002B68  AC40001C   SW ZERO, 28(V0)
9D002B6C  AC400020   SW ZERO, 32(V0)
9D002B70  A040002C   SB ZERO, 44(V0)
9D002B74  AC400024   SW ZERO, 36(V0)
9D002B78  AC6003A4   SW ZERO, 932(V1)
9D002B7C  AC400004   SW ZERO, 4(V0)
9D002B80  AC400008   SW ZERO, 8(V0)
9D002B84  A0400014   SB ZERO, 20(V0)
9D002B88  AC40000C   SW ZERO, 12(V0)
9D002B8C  AC400030   SW ZERO, 48(V0)
9D002B90  3C02BF82   LUI V0, -16510
9D002B94  34038000   ORI V1, ZERO, -32768
9D002B98  AC432A08   SW V1, 10760(V0)
9D002B9C  03E00008   JR RA
9D002BA0  00000000   NOP
9D002BA4  1080001F   BEQ A0, ZERO, 0x9D002C24
9D002BA8  00001025   OR V0, ZERO, ZERO
9D002BAC  3C028000   LUI V0, -32768
9D002BB0  904303D0   LBU V1, 976(V0)
9D002BB4  1460001B   BNE V1, ZERO, 0x9D002C24
9D002BB8  00001025   OR V0, ZERO, ZERO
9D002BBC  27BDFFE0   ADDIU SP, SP, -32
9D002BC0  AFBF001C   SW RA, 28(SP)
9D002BC4  AFB10018   SW S1, 24(SP)
9D002BC8  AFB00014   SW S0, 20(SP)
9D002BCC  00A08825   OR S1, A1, ZERO
9D002BD0  0F400BA8   JAL UART6_ErrorClear
9D002BD4  00808025   OR S0, A0, ZERO
9D002BD8  3C028000   LUI V0, -32768
9D002BDC  244203A4   ADDIU V0, V0, 932
9D002BE0  AC500018   SW S0, 24(V0)
9D002BE4  AC51001C   SW S1, 28(V0)
9D002BE8  AC400020   SW ZERO, 32(V0)
9D002BEC  24030001   ADDIU V1, ZERO, 1
9D002BF0  A043002C   SB V1, 44(V0)
9D002BF4  AC400030   SW ZERO, 48(V0)
9D002BF8  3C02BF81   LUI V0, -16511
9D002BFC  3C031000   LUI V1, 4096
9D002C00  AC430118   SW V1, 280(V0)
9D002C04  3C032000   LUI V1, 8192
9D002C08  AC430118   SW V1, 280(V0)
9D002C0C  24020001   ADDIU V0, ZERO, 1
9D002C10  8FBF001C   LW RA, 28(SP)
9D002C14  8FB10018   LW S1, 24(SP)
9D002C18  8FB00014   LW S0, 20(SP)
9D002C1C  03E00008   JR RA
9D002C20  27BD0020   ADDIU SP, SP, 32
9D002C24  03E00008   JR RA
9D002C28  00000000   NOP
9D002EA0  3C02BF82   LUI V0, -16510
9D002EA4  8C422A10   LW V0, 10768(V0)
9D002EA8  3042000E   ANDI V0, V0, 14
9D002EAC  10400017   BEQ V0, ZERO, UART6_ErrorClear
9D002EB0  3C02BF82   LUI V0, -16510
9D002EB4  8C422A10   LW V0, 10768(V0)
9D002EB8  30420002   ANDI V0, V0, 2
9D002EBC  10400003   BEQ V0, ZERO, UART6_ErrorClear
9D002EC0  3C02BF82   LUI V0, -16510
9D002EC4  24030002   ADDIU V1, ZERO, 2
9D002EC8  AC432A14   SW V1, 10772(V0)
9D002ECC  3C02BF82   LUI V0, -16510
9D002ED0  8C422A10   LW V0, 10768(V0)
9D002ED4  30420001   ANDI V0, V0, 1
9D002ED8  10400007   BEQ V0, ZERO, UART6_ErrorClear
9D002EDC  3C03BF82   LUI V1, -16510
9D002EE0  3C04BF82   LUI A0, -16510
9D002EE4  8C822A30   LW V0, 10800(A0)
9D002EE8  8C622A10   LW V0, 10768(V1)
9D002EEC  30420001   ANDI V0, V0, 1
9D002EF0  1440FFFC   BNE V0, ZERO, UART6_ErrorClear
9D002EF4  00000000   NOP
9D002EF8  3C02BF81   LUI V0, -16511
9D002EFC  3C031000   LUI V1, 4096
9D002F00  AC430094   SW V1, 148(V0)
9D002F04  3C032000   LUI V1, 8192
9D002F08  AC430094   SW V1, 148(V0)
9D002F0C  03E00008   JR RA
9D002F10  00000000   NOP
---  /home/swood/HarmonyProjects/LED_Driver/firmware/src/config/LED_Driver/peripheral/gpio/plib_gpio.c  -
1:                   /*******************************************************************************
2:                     SYS PORTS Static Functions for PORTS System Service
3:                   
4:                     Company:
5:                       Microchip Technology Inc.
6:                   
7:                     File Name:
8:                       plib_gpio.c
9:                   
10:                    Summary:
11:                      GPIO function implementations for the GPIO PLIB.
12:                  
13:                    Description:
14:                      The GPIO PLIB provides a simple interface to manage peripheral
15:                      input-output controller.
16:                  
17:                  *******************************************************************************/
18:                  
19:                  //DOM-IGNORE-BEGIN
20:                  /*******************************************************************************
21:                  * Copyright (C) 2019 Microchip Technology Inc. and its subsidiaries.
22:                  *
23:                  * Subject to your compliance with these terms, you may use Microchip software
24:                  * and any derivatives exclusively with Microchip products. It is your
25:                  * responsibility to comply with third party license terms applicable to your
26:                  * use of third party software (including open source software) that may
27:                  * accompany Microchip software.
28:                  *
29:                  * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
30:                  * EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
31:                  * WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
32:                  * PARTICULAR PURPOSE.
33:                  *
34:                  * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
35:                  * INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
36:                  * WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
37:                  * BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
38:                  * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
39:                  * ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
40:                  * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
41:                  *******************************************************************************/
42:                  //DOM-IGNORE-END
43:                  
44:                  #include "plib_gpio.h"
45:                  
46:                  
47:                  
48:                  /******************************************************************************
49:                    Function:
50:                      GPIO_Initialize ( void )
51:                  
52:                    Summary:
53:                      Initialize the GPIO library.
54:                  
55:                    Remarks:
56:                      See plib_gpio.h for more details.
57:                  */
58:                  void GPIO_Initialize ( void )
59:                  {
60:                  
61:                      /* PORTA Initialization */
62:                      /* PORTB Initialization */
63:                      /* PORTC Initialization */
64:                      ANSELCCLR = 0x4U; /* Digital Mode Enable */
65:                      /* PORTD Initialization */
66:                      /* PORTE Initialization */
67:                      /* PORTF Initialization */
68:                      ANSELFCLR = 0x2000U; /* Digital Mode Enable */
69:                      /* PORTG Initialization */
70:                      ANSELGCLR = 0x1c0U; /* Digital Mode Enable */
71:                      /* PORTH Initialization */
72:                      /* PORTJ Initialization */
73:                      /* PORTK Initialization */
74:                  
75:                      /* Unlock system for PPS configuration */
76:                      SYSKEY = 0x00000000U;
77:                      SYSKEY = 0xAA996655U;
78:                      SYSKEY = 0x556699AAU;
79:                  
80:                      CFGCONbits.IOLOCK = 0U;
81:                  
82:                      /* PPS Input Remapping */
83:                      U6RXR = 9;
84:                  
85:                      /* PPS Output Remapping */
86:                      RPF2R = 4;
87:                  
88:                          /* Lock back the system after PPS configuration */
89:                      CFGCONbits.IOLOCK = 1U;
90:                  
91:                      SYSKEY = 0x00000000U;
92:                  
93:                  }
94:                  
95:                  // *****************************************************************************
96:                  // *****************************************************************************
97:                  // Section: GPIO APIs which operates on multiple pins of a port
98:                  // *****************************************************************************
99:                  // *****************************************************************************
100:                 
101:                 // *****************************************************************************
102:                 /* Function:
103:                     uint32_t GPIO_PortRead ( GPIO_PORT port )
104:                 
105:                   Summary:
106:                     Read all the I/O lines of the selected port.
107:                 
108:                   Description:
109:                     This function reads the live data values on all the I/O lines of the
110:                     selected port.  Bit values returned in each position indicate corresponding
111:                     pin levels.
112:                     1 = Pin is high.
113:                     0 = Pin is low.
114:                 
115:                     This function reads the value regardless of pin configuration, whether it is
116:                     set as as an input, driven by the GPIO Controller, or driven by a peripheral.
117:                 
118:                   Remarks:
119:                     If the port has less than 32-bits, unimplemented pins will read as
120:                     low (0).
121:                     Implemented pins are Right aligned in the 32-bit return value.
122:                 */
123:                 uint32_t GPIO_PortRead(GPIO_PORT port)
124:                 {
125:                     return (*(volatile uint32_t *)(&PORTA + (port * 0x40U)));
126:                 }
127:                 
128:                 // *****************************************************************************
129:                 /* Function:
130:                     void GPIO_PortWrite (GPIO_PORT port, uint32_t mask, uint32_t value);
131:                 
132:                   Summary:
133:                     Write the value on the masked I/O lines of the selected port.
134:                 
135:                   Remarks:
136:                     See plib_gpio.h for more details.
137:                 */
138:                 void GPIO_PortWrite(GPIO_PORT port, uint32_t mask, uint32_t value)
139:                 {
140:                     *(volatile uint32_t *)(&LATA + (port * 0x40U)) = (*(volatile uint32_t *)(&LATA + (port * 0x40U)) & (~mask)) | (mask & value);
141:                 }
142:                 
143:                 // *****************************************************************************
144:                 /* Function:
145:                     uint32_t GPIO_PortLatchRead ( GPIO_PORT port )
146:                 
147:                   Summary:
148:                     Read the latched value on all the I/O lines of the selected port.
149:                 
150:                   Remarks:
151:                     See plib_gpio.h for more details.
152:                 */
153:                 uint32_t GPIO_PortLatchRead(GPIO_PORT port)
154:                 {
155:                     return (*(volatile uint32_t *)(&LATA + (port * 0x40U)));
156:                 }
157:                 
158:                 // *****************************************************************************
159:                 /* Function:
160:                     void GPIO_PortSet ( GPIO_PORT port, uint32_t mask )
161:                 
162:                   Summary:
163:                     Set the selected IO pins of a port.
164:                 
165:                   Remarks:
166:                     See plib_gpio.h for more details.
167:                 */
168:                 void GPIO_PortSet(GPIO_PORT port, uint32_t mask)
169:                 {
170:                     *(volatile uint32_t *)(&LATASET + (port * 0x40U)) = mask;
171:                 }
172:                 
173:                 // *****************************************************************************
174:                 /* Function:
175:                     void GPIO_PortClear ( GPIO_PORT port, uint32_t mask )
176:                 
177:                   Summary:
178:                     Clear the selected IO pins of a port.
179:                 
180:                   Remarks:
181:                     See plib_gpio.h for more details.
182:                 */
183:                 void GPIO_PortClear(GPIO_PORT port, uint32_t mask)
184:                 {
185:                     *(volatile uint32_t *)(&LATACLR + (port * 0x40U)) = mask;
186:                 }
187:                 
188:                 // *****************************************************************************
189:                 /* Function:
190:                     void GPIO_PortToggle ( GPIO_PORT port, uint32_t mask )
191:                 
192:                   Summary:
193:                     Toggles the selected IO pins of a port.
194:                 
195:                   Remarks:
196:                     See plib_gpio.h for more details.
197:                 */
198:                 void GPIO_PortToggle(GPIO_PORT port, uint32_t mask)
199:                 {
200:                     *(volatile uint32_t *)(&LATAINV + (port * 0x40U))= mask;
201:                 }
202:                 
203:                 // *****************************************************************************
204:                 /* Function:
205:                     void GPIO_PortInputEnable ( GPIO_PORT port, uint32_t mask )
206:                 
207:                   Summary:
208:                     Enables selected IO pins of a port as input.
209:                 
210:                   Remarks:
211:                     See plib_gpio.h for more details.
212:                 */
213:                 void GPIO_PortInputEnable(GPIO_PORT port, uint32_t mask)
214:                 {
215:                     *(volatile uint32_t *)(&TRISASET + (port * 0x40U)) = mask;
216:                 }
217:                 
218:                 // *****************************************************************************
219:                 /* Function:
220:                     void GPIO_PortOutputEnable ( GPIO_PORT port, uint32_t mask )
221:                 
222:                   Summary:
223:                     Enables selected IO pins of a port as output(s).
224:                 
225:                   Remarks:
226:                     See plib_gpio.h for more details.
227:                 */
228:                 void GPIO_PortOutputEnable(GPIO_PORT port, uint32_t mask)
229:                 {
230:                     *(volatile uint32_t *)(&TRISACLR + (port * 0x40U)) = mask;
231:                 }
232:                 
233:                 
234:                 
235:                 
236:                 /*******************************************************************************
237:                  End of File
238:                 */
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
00000004  00000000   NOP
00000008  00000000   NOP
00000010  00000000   NOP
00000014  00000000   NOP
00000018  00000000   NOP
0000001C  00000000   NOP
00000020  00000000   NOP
00000024  00000000   NOP
9D002C2C  24040004   ADDIU A0, ZERO, 4
9D002C30  3C02BF86   LUI V0, -16506
9D002C34  AC440204   SW A0, 516(V0)
9D002C38  3C02BF86   LUI V0, -16506
9D002C3C  24032000   ADDIU V1, ZERO, 8192
9D002C40  AC430504   SW V1, 1284(V0)
9D002C44  3C02BF86   LUI V0, -16506
9D002C48  240301C0   ADDIU V1, ZERO, 448
9D002C4C  AC430604   SW V1, 1540(V0)
9D002C50  3C02BF80   LUI V0, -16512
9D002C54  AC400030   SW ZERO, 48(V0)
9D002C58  3C03AA99   LUI V1, -21863
9D002C5C  24636655   ADDIU V1, V1, 26197
9D002C60  AC430030   SW V1, 48(V0)
9D002C64  3C035566   LUI V1, 21862
9D002C68  346399AA   ORI V1, V1, -26198
9D002C6C  AC430030   SW V1, 48(V0)
9D002C70  3C03BF80   LUI V1, -16512
9D002C74  8C650000   LW A1, 0(V1)
9D002C78  7C056B44   INS A1, ZERO, 13, 1
9D002C7C  AC650000   SW A1, 0(V1)
9D002C80  3C05BF80   LUI A1, -16512
9D002C84  24060009   ADDIU A2, ZERO, 9
9D002C88  ACA61490   SW A2, 5264(A1)
9D002C8C  3C05BF80   LUI A1, -16512
9D002C90  ACA41648   SW A0, 5704(A1)
9D002C94  8C640000   LW A0, 0(V1)
9D002C98  24050001   ADDIU A1, ZERO, 1
9D002C9C  7CA46B44   INS A0, A1, 13, 1
9D002CA0  AC640000   SW A0, 0(V1)
9D002CA4  AC400030   SW ZERO, 48(V0)
9D002CA8  03E00008   JR RA
9D002CAC  00000000   NOP
---  /home/swood/HarmonyProjects/LED_Driver/firmware/src/config/LED_Driver/peripheral/evic/plib_evic.c  -
1:                   /*******************************************************************************
2:                     EVIC PLIB Implementation
3:                   
4:                     Company:
5:                       Microchip Technology Inc.
6:                   
7:                     File Name:
8:                       plib_evic.c
9:                   
10:                    Summary:
11:                      EVIC PLIB Source File
12:                  
13:                    Description:
14:                      None
15:                  
16:                  *******************************************************************************/
17:                  
18:                  // DOM-IGNORE-BEGIN
19:                  /*******************************************************************************
20:                  * Copyright (C) 2019 Microchip Technology Inc. and its subsidiaries.
21:                  *
22:                  * Subject to your compliance with these terms, you may use Microchip software
23:                  * and any derivatives exclusively with Microchip products. It is your
24:                  * responsibility to comply with third party license terms applicable to your
25:                  * use of third party software (including open source software) that may
26:                  * accompany Microchip software.
27:                  *
28:                  * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
29:                  * EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
30:                  * WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
31:                  * PARTICULAR PURPOSE.
32:                  *
33:                  * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
34:                  * INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
35:                  * WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
36:                  * BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
37:                  * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
38:                  * ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
39:                  * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
40:                  *******************************************************************************/
41:                  // DOM-IGNORE-END
42:                  
43:                  #include "device.h"
44:                  #include "plib_evic.h"
45:                  
46:                  
47:                  // *****************************************************************************
48:                  // *****************************************************************************
49:                  // Section: IRQ Implementation
50:                  // *****************************************************************************
51:                  // *****************************************************************************
52:                  
53:                  void EVIC_Initialize( void )
54:                  {
55:                      INTCONSET = _INTCON_MVEC_MASK;
56:                  
57:                      /* Set up priority and subpriority of enabled interrupts */
58:                      IPC47SET = 0x4 | 0x0;  /* UART6_FAULT:  Priority 1 / Subpriority 0 */
59:                      IPC47SET = 0x400 | 0x0;  /* UART6_RX:  Priority 1 / Subpriority 0 */
60:                      IPC47SET = 0x40000 | 0x0;  /* UART6_TX:  Priority 1 / Subpriority 0 */
61:                  
62:                  
63:                  
64:                      /* Configure Shadow Register Set */
65:                      PRISS = 0x76543210;
66:                  
67:                      while (PRISS != 0x76543210)
68:                      {
69:                          /* Wait for PRISS value to take effect */
70:                      }
71:                  }
72:                  
73:                  void EVIC_SourceEnable( INT_SOURCE source )
74:                  {
75:                      volatile uint32_t *IECx = (volatile uint32_t *) (&IEC0 + ((0x10 * (source / 32)) / 4));
76:                      volatile uint32_t *IECxSET = (volatile uint32_t *)(IECx + 2);
77:                  
78:                      *IECxSET = 1 << (source & 0x1f);
79:                  }
80:                  
81:                  void EVIC_SourceDisable( INT_SOURCE source )
82:                  {
83:                      volatile uint32_t *IECx = (volatile uint32_t *) (&IEC0 + ((0x10 * (source / 32)) / 4));
84:                      volatile uint32_t *IECxCLR = (volatile uint32_t *)(IECx + 1);
85:                  
86:                      *IECxCLR = 1 << (source & 0x1f);
87:                  }
88:                  
89:                  bool EVIC_SourceIsEnabled( INT_SOURCE source )
90:                  {
91:                      volatile uint32_t *IECx = (volatile uint32_t *) (&IEC0 + ((0x10 * (source / 32)) / 4));
92:                  
93:                      return (bool)((*IECx >> (source & 0x1f)) & 0x01);
94:                  }
95:                  
96:                  bool EVIC_SourceStatusGet( INT_SOURCE source )
97:                  {
98:                      volatile uint32_t *IFSx = (volatile uint32_t *)(&IFS0 + ((0x10 * (source / 32)) / 4));
99:                  
100:                     return (bool)((*IFSx >> (source & 0x1f)) & 0x1);
101:                 }
102:                 
103:                 void EVIC_SourceStatusSet( INT_SOURCE source )
104:                 {
105:                     volatile uint32_t *IFSx = (volatile uint32_t *) (&IFS0 + ((0x10 * (source / 32)) / 4));
106:                     volatile uint32_t *IFSxSET = (volatile uint32_t *)(IFSx + 2);
107:                 
108:                     *IFSxSET = 1 << (source & 0x1f);
109:                 }
110:                 
111:                 void EVIC_SourceStatusClear( INT_SOURCE source )
112:                 {
113:                     volatile uint32_t *IFSx = (volatile uint32_t *) (&IFS0 + ((0x10 * (source / 32)) / 4));
114:                     volatile uint32_t *IFSxCLR = (volatile uint32_t *)(IFSx + 1);
115:                 
116:                     *IFSxCLR = 1 << (source & 0x1f);
117:                 }
118:                 
119:                 void EVIC_INT_Enable( void )
120:                 {
121:                     __builtin_enable_interrupts();
122:                 }
123:                 
124:                 bool EVIC_INT_Disable( void )
125:                 {
126:                     uint32_t processorStatus;
127:                 
128:                     /* Save the processor status and then Disable the global interrupt */
129:                     processorStatus = ( uint32_t )__builtin_disable_interrupts();
130:                 
131:                     /* return the interrupt status */
132:                     return (bool)(processorStatus & 0x01);
133:                 }
134:                 
135:                 void EVIC_INT_Restore( bool state )
136:                 {
137:                     if (state)
138:                     {
139:                         /* restore the state of CP0 Status register before the disable occurred */
140:                         __builtin_enable_interrupts();
141:                     }
142:                 }
143:                 
144:                 
145:                 /* End of file */
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
00000004  00000000   NOP
00000008  00000000   NOP
0000000C  00000000   NOP
00000010  00000000   NOP
00000014  00000000   NOP
00000018  00000000   NOP
0000001C  00000000   NOP
00000020  00000000   NOP
9D002FC8  3C02BF81   LUI V0, -16511
9D002FCC  24031000   ADDIU V1, ZERO, 4096
9D002FD0  AC430008   SW V1, 8(V0)
9D002FD4  3C02BF81   LUI V0, -16511
9D002FD8  24030004   ADDIU V1, ZERO, 4
9D002FDC  AC430438   SW V1, 1080(V0)
9D002FE0  24030400   ADDIU V1, ZERO, 1024
9D002FE4  AC430438   SW V1, 1080(V0)
9D002FE8  3C030004   LUI V1, 4
9D002FEC  AC430438   SW V1, 1080(V0)
9D002FF0  3C03BF81   LUI V1, -16511
9D002FF4  3C027654   LUI V0, 30292
9D002FF8  24423210   ADDIU V0, V0, 12816
9D002FFC  AC620010   SW V0, 16(V1)
9D003000  3C027654   LUI V0, 30292
9D003004  24423210   ADDIU V0, V0, 12816
9D003008  8C640010   LW A0, 16(V1)
9D00300C  1482FFFE   BNE A0, V0, 0x9D003008
9D003010  00000000   NOP
9D003014  03E00008   JR RA
9D003018  00000000   NOP
---  /home/swood/HarmonyProjects/LED_Driver/firmware/src/config/LED_Driver/peripheral/clk/plib_clk.c  ---
1:                   /*******************************************************************************
2:                     SYS CLK Static Functions for Clock System Service
3:                   
4:                     Company:
5:                       Microchip Technology Inc.
6:                   
7:                     File Name:
8:                       plib_clk.c
9:                   
10:                    Summary:
11:                      SYS CLK static function implementations for the Clock System Service.
12:                  
13:                    Description:
14:                      The Clock System Service provides a simple interface to manage the
15:                      oscillators on Microchip microcontrollers. This file defines the static
16:                      implementation for the Clock System Service.
17:                  
18:                    Remarks:
19:                      Static functions incorporate all system clock configuration settings as
20:                      determined by the user via the Microchip Harmony Configurator GUI.
21:                      It provides static version of the routines, eliminating the need for an
22:                      object ID or object handle.
23:                  
24:                      Static single-open interfaces also eliminate the need for the open handle.
25:                  
26:                  *******************************************************************************/
27:                  
28:                  /*******************************************************************************
29:                  * Copyright (C) 2019 Microchip Technology Inc. and its subsidiaries.
30:                  *
31:                  * Subject to your compliance with these terms, you may use Microchip software
32:                  * and any derivatives exclusively with Microchip products. It is your
33:                  * responsibility to comply with third party license terms applicable to your
34:                  * use of third party software (including open source software) that may
35:                  * accompany Microchip software.
36:                  *
37:                  * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
38:                  * EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
39:                  * WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
40:                  * PARTICULAR PURPOSE.
41:                  *
42:                  * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
43:                  * INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
44:                  * WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
45:                  * BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
46:                  * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
47:                  * ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
48:                  * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
49:                  *******************************************************************************/
50:                  
51:                  // *****************************************************************************
52:                  // *****************************************************************************
53:                  // Section: Include Files
54:                  // *****************************************************************************
55:                  // *****************************************************************************
56:                  
57:                  #include "device.h"
58:                  #include "plib_clk.h"
59:                  
60:                  // *****************************************************************************
61:                  // *****************************************************************************
62:                  // Section: File Scope Functions
63:                  // *****************************************************************************
64:                  // *****************************************************************************
65:                  
66:                  // *****************************************************************************
67:                  /* Function:
68:                      void CLK_Initialize( void )
69:                  
70:                    Summary:
71:                      Initializes hardware and internal data structure of the System Clock.
72:                  
73:                    Description:
74:                      This function initializes the hardware and internal data structure of System
75:                      Clock Service.
76:                  
77:                    Remarks:
78:                      This is configuration values for the static version of the Clock System
79:                      Service module is determined by the user via the MHC GUI.
80:                  
81:                      The objective is to eliminate the user's need to be knowledgeable in the
82:                      function of the 'configuration bits' to configure the system oscillators.
83:                  */
84:                  
85:                  void CLK_Initialize( void )
86:                  {
87:                      /* unlock system for clock configuration */
88:                      SYSKEY = 0x00000000;
89:                      SYSKEY = 0xAA996655;
90:                      SYSKEY = 0x556699AA;
91:                  
92:                  
93:                    
94:                  
95:                      /* Peripheral Module Disable Configuration */
96:                  
97:                      CFGCONbits.PMDLOCK = 0;
98:                  
99:                      PMD1 = 0x1001;
100:                     PMD2 = 0x3;
101:                     PMD3 = 0x1ff01ff;
102:                     PMD4 = 0x1ff;
103:                     PMD5 = 0x301f3f1f;
104:                     PMD6 = 0x10830001;
105:                     PMD7 = 0x500000;
106:                 
107:                     CFGCONbits.PMDLOCK = 1;
108:                 
109:                     /* Lock system since done with clock configuration */
110:                     SYSKEY = 0x33333333;
111:                 }
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D0029C4  3C02BF80   LUI V0, -16512
9D0029C8  AC400030   SW ZERO, 48(V0)
9D0029CC  3C03AA99   LUI V1, -21863
9D0029D0  24636655   ADDIU V1, V1, 26197
9D0029D4  AC430030   SW V1, 48(V0)
9D0029D8  3C035566   LUI V1, 21862
9D0029DC  346399AA   ORI V1, V1, -26198
9D0029E0  AC430030   SW V1, 48(V0)
9D0029E4  3C03BF80   LUI V1, -16512
9D0029E8  8C640000   LW A0, 0(V1)
9D0029EC  7C046304   INS A0, ZERO, 12, 1
9D0029F0  AC640000   SW A0, 0(V1)
9D0029F4  3C04BF80   LUI A0, -16512
9D0029F8  24051001   ADDIU A1, ZERO, 4097
9D0029FC  AC850040   SW A1, 64(A0)
9D002A00  3C04BF80   LUI A0, -16512
9D002A04  24050003   ADDIU A1, ZERO, 3
9D002A08  AC850050   SW A1, 80(A0)
9D002A0C  3C05BF80   LUI A1, -16512
9D002A10  3C0401FF   LUI A0, 511
9D002A14  248401FF   ADDIU A0, A0, 511
9D002A18  ACA40060   SW A0, 96(A1)
9D002A1C  3C04BF80   LUI A0, -16512
9D002A20  240501FF   ADDIU A1, ZERO, 511
9D002A24  AC850070   SW A1, 112(A0)
9D002A28  3C05BF80   LUI A1, -16512
9D002A2C  3C04301F   LUI A0, 12319
9D002A30  24843F1F   ADDIU A0, A0, 16159
9D002A34  ACA40080   SW A0, 128(A1)
9D002A38  3C05BF80   LUI A1, -16512
9D002A3C  3C041083   LUI A0, 4227
9D002A40  24840001   ADDIU A0, A0, 1
9D002A44  ACA40090   SW A0, 144(A1)
9D002A48  3C04BF80   LUI A0, -16512
9D002A4C  3C050050   LUI A1, 80
9D002A50  AC8500A0   SW A1, 160(A0)
9D002A54  8C640000   LW A0, 0(V1)
9D002A58  24050001   ADDIU A1, ZERO, 1
9D002A5C  7CA46304   INS A0, A1, 12, 1
9D002A60  AC640000   SW A0, 0(V1)
9D002A64  3C033333   LUI V1, 13107
9D002A68  24633333   ADDIU V1, V1, 13107
9D002A6C  AC430030   SW V1, 48(V0)
9D002A70  03E00008   JR RA
9D002A74  00000000   NOP
---  /home/swood/HarmonyProjects/LED_Driver/firmware/src/config/LED_Driver/interrupts.c  ----------------
1:                   /*******************************************************************************
2:                    System Interrupts File
3:                   
4:                     Company:
5:                       Microchip Technology Inc.
6:                   
7:                     File Name:
8:                       interrupt.c
9:                   
10:                    Summary:
11:                      Interrupt vectors mapping
12:                  
13:                    Description:
14:                      This file maps all the interrupt vectors to their corresponding
15:                      implementations. If a particular module interrupt is used, then its ISR
16:                      definition can be found in corresponding PLIB source file. If a module
17:                      interrupt is not used, then its ISR implementation is mapped to dummy
18:                      handler.
19:                   *******************************************************************************/
20:                  
21:                  // DOM-IGNORE-BEGIN
22:                  /*******************************************************************************
23:                  * Copyright (C) 2018 Microchip Technology Inc. and its subsidiaries.
24:                  *
25:                  * Subject to your compliance with these terms, you may use Microchip software
26:                  * and any derivatives exclusively with Microchip products. It is your
27:                  * responsibility to comply with third party license terms applicable to your
28:                  * use of third party software (including open source software) that may
29:                  * accompany Microchip software.
30:                  *
31:                  * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
32:                  * EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
33:                  * WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
34:                  * PARTICULAR PURPOSE.
35:                  *
36:                  * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
37:                  * INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
38:                  * WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
39:                  * BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
40:                  * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
41:                  * ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
42:                  * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
43:                   *******************************************************************************/
44:                  // DOM-IGNORE-END
45:                  
46:                  // *****************************************************************************
47:                  // *****************************************************************************
48:                  // Section: Included Files
49:                  // *****************************************************************************
50:                  // *****************************************************************************
51:                  
52:                  #include "interrupts.h"
53:                  #include "definitions.h"
54:                  
55:                  
56:                  // *****************************************************************************
57:                  // *****************************************************************************
58:                  // Section: System Interrupt Vector Functions
59:                  // *****************************************************************************
60:                  // *****************************************************************************
61:                  
62:                  
63:                  void UART6_FAULT_InterruptHandler( void );
64:                  void UART6_RX_InterruptHandler( void );
65:                  void UART6_TX_InterruptHandler( void );
66:                  
67:                  
68:                  
69:                  /* All the handlers are defined here.  Each will call its PLIB-specific function. */
70:                  void __ISR(_UART6_FAULT_VECTOR, ipl1SRS) UART6_FAULT_Handler (void)
71:                  {
72:                      UART6_FAULT_InterruptHandler();
73:                  }
74:                  
75:                  void __ISR(_UART6_RX_VECTOR, ipl1SRS) UART6_RX_Handler (void)
76:                  {
77:                      UART6_RX_InterruptHandler();
78:                  }
79:                  
80:                  void __ISR(_UART6_TX_VECTOR, ipl1SRS) UART6_TX_Handler (void)
81:                  {
82:                      UART6_TX_InterruptHandler();
83:                  }
84:                  
85:                  
86:                  
87:                  
88:                  /*******************************************************************************
89:                   End of File
90:                  */
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00153C  415DE800   RDPGPR SP, SP
9D001540  401A7000   MFC0 K0, EPC
9D001544  401B6000   MFC0 K1, Status
9D001548  27BDFEE8   ADDIU SP, SP, -280
9D00154C  AFBA0114   SW K0, 276(SP)
9D001550  401A6002   MFC0 K0, SRSCtl
9D001554  AFBB0110   SW K1, 272(SP)
9D001558  AFBA010C   SW K0, 268(SP)
9D00155C  7C1B7844   INS K1, ZERO, 1, 15
9D001560  377B0400   ORI K1, K1, 1024
9D001564  409B6000   MTC0 K1, Status
9D001568  F7BF00D8   SDC1 F31, 216(SP)
9D00156C  F7BD00D0   SDC1 F29, 208(SP)
9D001570  F7BB00C8   SDC1 F27, 200(SP)
9D001574  F7B900C0   SDC1 F25, 192(SP)
9D001578  F7B700B8   SDC1 F23, 184(SP)
9D00157C  F7B500B0   SDC1 F21, 176(SP)
9D001580  F7B300A8   SDC1 F19, 168(SP)
9D001584  F7B200A0   SDC1 F18, 160(SP)
9D001588  F7B10098   SDC1 F17, 152(SP)
9D00158C  F7B00090   SDC1 F16, 144(SP)
9D001590  F7AF0088   SDC1 F15, 136(SP)
9D001594  F7AE0080   SDC1 F14, 128(SP)
9D001598  F7AD0078   SDC1 F13, 120(SP)
9D00159C  F7AC0070   SDC1 F12, 112(SP)
9D0015A0  F7AB0068   SDC1 F11, 104(SP)
9D0015A4  F7AA0060   SDC1 F10, 96(SP)
9D0015A8  F7A90058   SDC1 F9, 88(SP)
9D0015AC  F7A80050   SDC1 F8, 80(SP)
9D0015B0  F7A70048   SDC1 F7, 72(SP)
9D0015B4  F7A60040   SDC1 F6, 64(SP)
9D0015B8  F7A50038   SDC1 F5, 56(SP)
9D0015BC  F7A40030   SDC1 F4, 48(SP)
9D0015C0  F7A30028   SDC1 F3, 40(SP)
9D0015C4  F7A20020   SDC1 F2, 32(SP)
9D0015C8  F7A10018   SDC1 F1, 24(SP)
9D0015CC  F7A00010   SDC1 F0, 16(SP)
9D0015D0  00001012   MFLO V0
9D0015D4  AFA20104   SW V0, 260(SP)
9D0015D8  00001810   MFHI V1
9D0015DC  AFA30100   SW V1, 256(SP)
9D0015E0  00201012   MFLO V0
9D0015E4  AFA200FC   SW V0, 252(SP)
9D0015E8  00201810   MFHI V1
9D0015EC  AFA300F8   SW V1, 248(SP)
9D0015F0  00401012   MFLO V0
9D0015F4  AFA200F4   SW V0, 244(SP)
9D0015F8  00401810   MFHI V1
9D0015FC  AFA300F0   SW V1, 240(SP)
9D001600  00601012   MFLO V0
9D001604  AFA200EC   SW V0, 236(SP)
9D001608  00601810   MFHI V1
9D00160C  AFA300E8   SW V1, 232(SP)
9D001610  7C3F1CB8   RDDSP V1, 0x3F
9D001614  AFA30108   SW V1, 264(SP)
9D001618  4442F800   CFC1 V0, F31
9D00161C  AFA200E4   SW V0, 228(SP)
9D001620  0F400064   JAL UART6_FAULT_InterruptHandler
9D001624  00000000   NOP
9D001628  8FA200E4   LW V0, 228(SP)
9D00162C  44C2F800   CTC1 V0, F31
9D001630  8FA30108   LW V1, 264(SP)
9D001634  7C61FCF8   WRDSP V1, 0x3F
9D001638  8FA20104   LW V0, 260(SP)
9D00163C  00400013   MTLO V0
9D001640  8FA30100   LW V1, 256(SP)
9D001644  00600011   MTHI V1
9D001648  8FA500FC   LW A1, 252(SP)
9D00164C  00A00813   MTLO A1
9D001650  8FA500F8   LW A1, 248(SP)
9D001654  00A00811   MTHI A1
9D001658  8FA500F4   LW A1, 244(SP)
9D00165C  00A01013   MTLO A1
9D001660  8FA500F0   LW A1, 240(SP)
9D001664  00A01011   MTHI A1
9D001668  8FA500EC   LW A1, 236(SP)
9D00166C  00A01813   MTLO A1
9D001670  8FA500E8   LW A1, 232(SP)
9D001674  00A01811   MTHI A1
9D001678  D7BF00D8   LDC1 F31, 216(SP)
9D00167C  D7BD00D0   LDC1 F29, 208(SP)
9D001680  D7BB00C8   LDC1 F27, 200(SP)
9D001684  D7B900C0   LDC1 F25, 192(SP)
9D001688  D7B700B8   LDC1 F23, 184(SP)
9D00168C  D7B500B0   LDC1 F21, 176(SP)
9D001690  D7B300A8   LDC1 F19, 168(SP)
9D001694  D7B200A0   LDC1 F18, 160(SP)
9D001698  D7B10098   LDC1 F17, 152(SP)
9D00169C  D7B00090   LDC1 F16, 144(SP)
9D0016A0  D7AF0088   LDC1 F15, 136(SP)
9D0016A4  D7AE0080   LDC1 F14, 128(SP)
9D0016A8  D7AD0078   LDC1 F13, 120(SP)
9D0016AC  D7AC0070   LDC1 F12, 112(SP)
9D0016B0  D7AB0068   LDC1 F11, 104(SP)
9D0016B4  D7AA0060   LDC1 F10, 96(SP)
9D0016B8  D7A90058   LDC1 F9, 88(SP)
9D0016BC  D7A80050   LDC1 F8, 80(SP)
9D0016C0  D7A70048   LDC1 F7, 72(SP)
9D0016C4  D7A60040   LDC1 F6, 64(SP)
9D0016C8  D7A50038   LDC1 F5, 56(SP)
9D0016CC  D7A40030   LDC1 F4, 48(SP)
9D0016D0  D7A30028   LDC1 F3, 40(SP)
9D0016D4  D7A20020   LDC1 F2, 32(SP)
9D0016D8  D7A10018   LDC1 F1, 24(SP)
9D0016DC  D7A00010   LDC1 F0, 16(SP)
9D0016E0  41606000   DI ZERO
9D0016E4  000000C0   EHB
9D0016E8  8FBB010C   LW K1, 268(SP)
9D0016EC  8FBA0114   LW K0, 276(SP)
9D0016F0  409B6002   MTC0 K1, SRSCtl
9D0016F4  8FBB0110   LW K1, 272(SP)
9D0016F8  409A7000   MTC0 K0, EPC
9D0016FC  27BD0118   ADDIU SP, SP, 280
9D001700  41DDE800   WRPGPR SP, SP
9D001704  409B6000   MTC0 K1, Status
9D001708  42000018   ERET
9D00170C  415DE800   RDPGPR SP, SP
9D001710  401A7000   MFC0 K0, EPC
9D001714  401B6000   MFC0 K1, Status
9D001718  27BDFEE8   ADDIU SP, SP, -280
9D00171C  AFBA0114   SW K0, 276(SP)
9D001720  401A6002   MFC0 K0, SRSCtl
9D001724  AFBB0110   SW K1, 272(SP)
9D001728  AFBA010C   SW K0, 268(SP)
9D00172C  7C1B7844   INS K1, ZERO, 1, 15
9D001730  377B0400   ORI K1, K1, 1024
9D001734  409B6000   MTC0 K1, Status
9D001738  F7BF00D8   SDC1 F31, 216(SP)
9D00173C  F7BD00D0   SDC1 F29, 208(SP)
9D001740  F7BB00C8   SDC1 F27, 200(SP)
9D001744  F7B900C0   SDC1 F25, 192(SP)
9D001748  F7B700B8   SDC1 F23, 184(SP)
9D00174C  F7B500B0   SDC1 F21, 176(SP)
9D001750  F7B300A8   SDC1 F19, 168(SP)
9D001754  F7B200A0   SDC1 F18, 160(SP)
9D001758  F7B10098   SDC1 F17, 152(SP)
9D00175C  F7B00090   SDC1 F16, 144(SP)
9D001760  F7AF0088   SDC1 F15, 136(SP)
9D001764  F7AE0080   SDC1 F14, 128(SP)
9D001768  F7AD0078   SDC1 F13, 120(SP)
9D00176C  F7AC0070   SDC1 F12, 112(SP)
9D001770  F7AB0068   SDC1 F11, 104(SP)
9D001774  F7AA0060   SDC1 F10, 96(SP)
9D001778  F7A90058   SDC1 F9, 88(SP)
9D00177C  F7A80050   SDC1 F8, 80(SP)
9D001780  F7A70048   SDC1 F7, 72(SP)
9D001784  F7A60040   SDC1 F6, 64(SP)
9D001788  F7A50038   SDC1 F5, 56(SP)
9D00178C  F7A40030   SDC1 F4, 48(SP)
9D001790  F7A30028   SDC1 F3, 40(SP)
9D001794  F7A20020   SDC1 F2, 32(SP)
9D001798  F7A10018   SDC1 F1, 24(SP)
9D00179C  F7A00010   SDC1 F0, 16(SP)
9D0017A0  00001012   MFLO V0
9D0017A4  AFA20104   SW V0, 260(SP)
9D0017A8  00001810   MFHI V1
9D0017AC  AFA30100   SW V1, 256(SP)
9D0017B0  00201012   MFLO V0
9D0017B4  AFA200FC   SW V0, 252(SP)
9D0017B8  00201810   MFHI V1
9D0017BC  AFA300F8   SW V1, 248(SP)
9D0017C0  00401012   MFLO V0
9D0017C4  AFA200F4   SW V0, 244(SP)
9D0017C8  00401810   MFHI V1
9D0017CC  AFA300F0   SW V1, 240(SP)
9D0017D0  00601012   MFLO V0
9D0017D4  AFA200EC   SW V0, 236(SP)
9D0017D8  00601810   MFHI V1
9D0017DC  AFA300E8   SW V1, 232(SP)
9D0017E0  7C3F1CB8   RDDSP V1, 0x3F
9D0017E4  AFA30108   SW V1, 264(SP)
9D0017E8  4442F800   CFC1 V0, F31
9D0017EC  AFA200E4   SW V0, 228(SP)
9D0017F0  0F40080A   JAL UART6_RX_InterruptHandler
9D0017F4  00000000   NOP
9D0017F8  8FA200E4   LW V0, 228(SP)
9D0017FC  44C2F800   CTC1 V0, F31
9D001800  8FA30108   LW V1, 264(SP)
9D001804  7C61FCF8   WRDSP V1, 0x3F
9D001808  8FA20104   LW V0, 260(SP)
9D00180C  00400013   MTLO V0
9D001810  8FA30100   LW V1, 256(SP)
9D001814  00600011   MTHI V1
9D001818  8FA500FC   LW A1, 252(SP)
9D00181C  00A00813   MTLO A1
9D001820  8FA500F8   LW A1, 248(SP)
9D001824  00A00811   MTHI A1
9D001828  8FA500F4   LW A1, 244(SP)
9D00182C  00A01013   MTLO A1
9D001830  8FA500F0   LW A1, 240(SP)
9D001834  00A01011   MTHI A1
9D001838  8FA500EC   LW A1, 236(SP)
9D00183C  00A01813   MTLO A1
9D001840  8FA500E8   LW A1, 232(SP)
9D001844  00A01811   MTHI A1
9D001848  D7BF00D8   LDC1 F31, 216(SP)
9D00184C  D7BD00D0   LDC1 F29, 208(SP)
9D001850  D7BB00C8   LDC1 F27, 200(SP)
9D001854  D7B900C0   LDC1 F25, 192(SP)
9D001858  D7B700B8   LDC1 F23, 184(SP)
9D00185C  D7B500B0   LDC1 F21, 176(SP)
9D001860  D7B300A8   LDC1 F19, 168(SP)
9D001864  D7B200A0   LDC1 F18, 160(SP)
9D001868  D7B10098   LDC1 F17, 152(SP)
9D00186C  D7B00090   LDC1 F16, 144(SP)
9D001870  D7AF0088   LDC1 F15, 136(SP)
9D001874  D7AE0080   LDC1 F14, 128(SP)
9D001878  D7AD0078   LDC1 F13, 120(SP)
9D00187C  D7AC0070   LDC1 F12, 112(SP)
9D001880  D7AB0068   LDC1 F11, 104(SP)
9D001884  D7AA0060   LDC1 F10, 96(SP)
9D001888  D7A90058   LDC1 F9, 88(SP)
9D00188C  D7A80050   LDC1 F8, 80(SP)
9D001890  D7A70048   LDC1 F7, 72(SP)
9D001894  D7A60040   LDC1 F6, 64(SP)
9D001898  D7A50038   LDC1 F5, 56(SP)
9D00189C  D7A40030   LDC1 F4, 48(SP)
9D0018A0  D7A30028   LDC1 F3, 40(SP)
9D0018A4  D7A20020   LDC1 F2, 32(SP)
9D0018A8  D7A10018   LDC1 F1, 24(SP)
9D0018AC  D7A00010   LDC1 F0, 16(SP)
9D0018B0  41606000   DI ZERO
9D0018B4  000000C0   EHB
9D0018B8  8FBB010C   LW K1, 268(SP)
9D0018BC  8FBA0114   LW K0, 276(SP)
9D0018C0  409B6002   MTC0 K1, SRSCtl
9D0018C4  8FBB0110   LW K1, 272(SP)
9D0018C8  409A7000   MTC0 K0, EPC
9D0018CC  27BD0118   ADDIU SP, SP, 280
9D0018D0  41DDE800   WRPGPR SP, SP
9D0018D4  409B6000   MTC0 K1, Status
9D0018D8  42000018   ERET
9D0018DC  415DE800   RDPGPR SP, SP
9D0018E0  401A7000   MFC0 K0, EPC
9D0018E4  401B6000   MFC0 K1, Status
9D0018E8  27BDFEE8   ADDIU SP, SP, -280
9D0018EC  AFBA0114   SW K0, 276(SP)
9D0018F0  401A6002   MFC0 K0, SRSCtl
9D0018F4  AFBB0110   SW K1, 272(SP)
9D0018F8  AFBA010C   SW K0, 268(SP)
9D0018FC  7C1B7844   INS K1, ZERO, 1, 15
9D001900  377B0400   ORI K1, K1, 1024
9D001904  409B6000   MTC0 K1, Status
9D001908  F7BF00D8   SDC1 F31, 216(SP)
9D00190C  F7BD00D0   SDC1 F29, 208(SP)
9D001910  F7BB00C8   SDC1 F27, 200(SP)
9D001914  F7B900C0   SDC1 F25, 192(SP)
9D001918  F7B700B8   SDC1 F23, 184(SP)
9D00191C  F7B500B0   SDC1 F21, 176(SP)
9D001920  F7B300A8   SDC1 F19, 168(SP)
9D001924  F7B200A0   SDC1 F18, 160(SP)
9D001928  F7B10098   SDC1 F17, 152(SP)
9D00192C  F7B00090   SDC1 F16, 144(SP)
9D001930  F7AF0088   SDC1 F15, 136(SP)
9D001934  F7AE0080   SDC1 F14, 128(SP)
9D001938  F7AD0078   SDC1 F13, 120(SP)
9D00193C  F7AC0070   SDC1 F12, 112(SP)
9D001940  F7AB0068   SDC1 F11, 104(SP)
9D001944  F7AA0060   SDC1 F10, 96(SP)
9D001948  F7A90058   SDC1 F9, 88(SP)
9D00194C  F7A80050   SDC1 F8, 80(SP)
9D001950  F7A70048   SDC1 F7, 72(SP)
9D001954  F7A60040   SDC1 F6, 64(SP)
9D001958  F7A50038   SDC1 F5, 56(SP)
9D00195C  F7A40030   SDC1 F4, 48(SP)
9D001960  F7A30028   SDC1 F3, 40(SP)
9D001964  F7A20020   SDC1 F2, 32(SP)
9D001968  F7A10018   SDC1 F1, 24(SP)
9D00196C  F7A00010   SDC1 F0, 16(SP)
9D001970  00001012   MFLO V0
9D001974  AFA20104   SW V0, 260(SP)
9D001978  00001810   MFHI V1
9D00197C  AFA30100   SW V1, 256(SP)
9D001980  00201012   MFLO V0
9D001984  AFA200FC   SW V0, 252(SP)
9D001988  00201810   MFHI V1
9D00198C  AFA300F8   SW V1, 248(SP)
9D001990  00401012   MFLO V0
9D001994  AFA200F4   SW V0, 244(SP)
9D001998  00401810   MFHI V1
9D00199C  AFA300F0   SW V1, 240(SP)
9D0019A0  00601012   MFLO V0
9D0019A4  AFA200EC   SW V0, 236(SP)
9D0019A8  00601810   MFHI V1
9D0019AC  AFA300E8   SW V1, 232(SP)
9D0019B0  7C3F1CB8   RDDSP V1, 0x3F
9D0019B4  AFA30108   SW V1, 264(SP)
9D0019B8  4442F800   CFC1 V0, F31
9D0019BC  AFA200E4   SW V0, 228(SP)
9D0019C0  0F400850   JAL UART6_TX_InterruptHandler
9D0019C4  00000000   NOP
9D0019C8  8FA200E4   LW V0, 228(SP)
9D0019CC  44C2F800   CTC1 V0, F31
9D0019D0  8FA30108   LW V1, 264(SP)
9D0019D4  7C61FCF8   WRDSP V1, 0x3F
9D0019D8  8FA20104   LW V0, 260(SP)
9D0019DC  00400013   MTLO V0
9D0019E0  8FA30100   LW V1, 256(SP)
9D0019E4  00600011   MTHI V1
9D0019E8  8FA500FC   LW A1, 252(SP)
9D0019EC  00A00813   MTLO A1
9D0019F0  8FA500F8   LW A1, 248(SP)
9D0019F4  00A00811   MTHI A1
9D0019F8  8FA500F4   LW A1, 244(SP)
9D0019FC  00A01013   MTLO A1
9D001A00  8FA500F0   LW A1, 240(SP)
9D001A04  00A01011   MTHI A1
9D001A08  8FA500EC   LW A1, 236(SP)
9D001A0C  00A01813   MTLO A1
9D001A10  8FA500E8   LW A1, 232(SP)
9D001A14  00A01811   MTHI A1
9D001A18  D7BF00D8   LDC1 F31, 216(SP)
9D001A1C  D7BD00D0   LDC1 F29, 208(SP)
9D001A20  D7BB00C8   LDC1 F27, 200(SP)
9D001A24  D7B900C0   LDC1 F25, 192(SP)
9D001A28  D7B700B8   LDC1 F23, 184(SP)
9D001A2C  D7B500B0   LDC1 F21, 176(SP)
9D001A30  D7B300A8   LDC1 F19, 168(SP)
9D001A34  D7B200A0   LDC1 F18, 160(SP)
9D001A38  D7B10098   LDC1 F17, 152(SP)
9D001A3C  D7B00090   LDC1 F16, 144(SP)
9D001A40  D7AF0088   LDC1 F15, 136(SP)
9D001A44  D7AE0080   LDC1 F14, 128(SP)
9D001A48  D7AD0078   LDC1 F13, 120(SP)
9D001A4C  D7AC0070   LDC1 F12, 112(SP)
9D001A50  D7AB0068   LDC1 F11, 104(SP)
9D001A54  D7AA0060   LDC1 F10, 96(SP)
9D001A58  D7A90058   LDC1 F9, 88(SP)
9D001A5C  D7A80050   LDC1 F8, 80(SP)
9D001A60  D7A70048   LDC1 F7, 72(SP)
9D001A64  D7A60040   LDC1 F6, 64(SP)
9D001A68  D7A50038   LDC1 F5, 56(SP)
9D001A6C  D7A40030   LDC1 F4, 48(SP)
9D001A70  D7A30028   LDC1 F3, 40(SP)
9D001A74  D7A20020   LDC1 F2, 32(SP)
9D001A78  D7A10018   LDC1 F1, 24(SP)
9D001A7C  D7A00010   LDC1 F0, 16(SP)
9D001A80  41606000   DI ZERO
9D001A84  000000C0   EHB
9D001A88  8FBB010C   LW K1, 268(SP)
9D001A8C  8FBA0114   LW K0, 276(SP)
9D001A90  409B6002   MTC0 K1, SRSCtl
9D001A94  8FBB0110   LW K1, 272(SP)
9D001A98  409A7000   MTC0 K0, EPC
9D001A9C  27BD0118   ADDIU SP, SP, 280
9D001AA0  41DDE800   WRPGPR SP, SP
9D001AA4  409B6000   MTC0 K1, Status
9D001AA8  42000018   ERET
---  /home/swood/HarmonyProjects/LED_Driver/firmware/src/config/LED_Driver/initialization.c  ------------
1:                   /*******************************************************************************
2:                     System Initialization File
3:                   
4:                     File Name:
5:                       initialization.c
6:                   
7:                     Summary:
8:                       This file contains source code necessary to initialize the system.
9:                   
10:                    Description:
11:                      This file contains source code necessary to initialize the system.  It
12:                      implements the "SYS_Initialize" function, defines the configuration bits,
13:                      and allocates any necessary global system resources,
14:                   *******************************************************************************/
15:                  
16:                  // DOM-IGNORE-BEGIN
17:                  /*******************************************************************************
18:                  * Copyright (C) 2018 Microchip Technology Inc. and its subsidiaries.
19:                  *
20:                  * Subject to your compliance with these terms, you may use Microchip software
21:                  * and any derivatives exclusively with Microchip products. It is your
22:                  * responsibility to comply with third party license terms applicable to your
23:                  * use of third party software (including open source software) that may
24:                  * accompany Microchip software.
25:                  *
26:                  * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
27:                  * EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
28:                  * WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
29:                  * PARTICULAR PURPOSE.
30:                  *
31:                  * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
32:                  * INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
33:                  * WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
34:                  * BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
35:                  * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
36:                  * ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
37:                  * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
38:                   *******************************************************************************/
39:                  // DOM-IGNORE-END
40:                  
41:                  // *****************************************************************************
42:                  // *****************************************************************************
43:                  // Section: Included Files
44:                  // *****************************************************************************
45:                  // *****************************************************************************
46:                  #include "definitions.h"
47:                  #include "device.h"
48:                  
49:                  
50:                  
51:                  // ****************************************************************************
52:                  // ****************************************************************************
53:                  // Section: Configuration Bits
54:                  // ****************************************************************************
55:                  // ****************************************************************************
56:                  
57:                  /*** DEVCFG0 ***/
58:                  #pragma config DEBUG =      OFF
59:                  #pragma config JTAGEN =     OFF
60:                  #pragma config ICESEL =     ICS_PGx1
61:                  #pragma config TRCEN =      OFF
62:                  #pragma config BOOTISA =    MIPS32
63:                  #pragma config FECCCON =    OFF_UNLOCKED
64:                  #pragma config FSLEEP =     OFF
65:                  #pragma config DBGPER =     PG_ALL
66:                  #pragma config SMCLR =      MCLR_NORM
67:                  #pragma config SOSCGAIN =   GAIN_LEVEL_3
68:                  #pragma config SOSCBOOST =  ON
69:                  #pragma config POSCGAIN =   GAIN_LEVEL_3
70:                  #pragma config POSCBOOST =  ON
71:                  #pragma config EJTAGBEN =   NORMAL
72:                  #pragma config CP =         OFF
73:                  
74:                  /*** DEVCFG1 ***/
75:                  #pragma config FNOSC =      SPLL
76:                  #pragma config DMTINTV =    WIN_127_128
77:                  #pragma config FSOSCEN =    OFF
78:                  #pragma config IESO =       OFF
79:                  #pragma config POSCMOD =    OFF
80:                  #pragma config OSCIOFNC =   OFF
81:                  #pragma config FCKSM =      CSECME
82:                  #pragma config WDTPS =      PS1048576
83:                  #pragma config WDTSPGM =    STOP
84:                  #pragma config FWDTEN =     OFF
85:                  #pragma config WINDIS =     NORMAL
86:                  #pragma config FWDTWINSZ =  WINSZ_25
87:                  #pragma config DMTCNT =     DMT31
88:                  #pragma config FDMTEN =     OFF
89:                  
90:                  /*** DEVCFG2 ***/
91:                  #pragma config FPLLIDIV =   DIV_1
92:                  #pragma config FPLLRNG =    RANGE_5_10_MHZ
93:                  #pragma config FPLLICLK =   PLL_FRC
94:                  #pragma config FPLLMULT =   MUL_50
95:                  #pragma config FPLLODIV =   DIV_2
96:                  #pragma config UPLLFSEL =   FREQ_24MHZ
97:                  
98:                  /*** DEVCFG3 ***/
99:                  #pragma config USERID =     0xffff
100:                 #pragma config FMIIEN =     ON
101:                 #pragma config FETHIO =     ON
102:                 #pragma config PGL1WAY =    ON
103:                 #pragma config PMDL1WAY =   ON
104:                 #pragma config IOL1WAY =    ON
105:                 #pragma config FUSBIDIO =   ON
106:                 
107:                 /*** BF1SEQ0 ***/
108:                 
109:                 #pragma config TSEQ =       0xffff
110:                 #pragma config CSEQ =       0x0
111:                 
112:                 
113:                 
114:                 
115:                 
116:                 // *****************************************************************************
117:                 // *****************************************************************************
118:                 // Section: Driver Initialization Data
119:                 // *****************************************************************************
120:                 // *****************************************************************************
121:                 
122:                 
123:                 // *****************************************************************************
124:                 // *****************************************************************************
125:                 // Section: System Data
126:                 // *****************************************************************************
127:                 // *****************************************************************************
128:                 
129:                 // *****************************************************************************
130:                 // *****************************************************************************
131:                 // Section: Library/Stack Initialization Data
132:                 // *****************************************************************************
133:                 // *****************************************************************************
134:                 
135:                 
136:                 // *****************************************************************************
137:                 // *****************************************************************************
138:                 // Section: System Initialization
139:                 // *****************************************************************************
140:                 // *****************************************************************************
141:                 
142:                 
143:                 
144:                 // *****************************************************************************
145:                 // *****************************************************************************
146:                 // Section: Local initialization functions
147:                 // *****************************************************************************
148:                 // *****************************************************************************
149:                 
150:                 
151:                 
152:                 /*******************************************************************************
153:                   Function:
154:                     void SYS_Initialize ( void *data )
155:                 
156:                   Summary:
157:                     Initializes the board, services, drivers, application and other modules.
158:                 
159:                   Remarks:
160:                  */
161:                 
162:                 void SYS_Initialize ( void* data )
163:                 {
164:                     /* MISRAC 2012 deviation block start */
165:                     /* MISRA C-2012 Rule 2.2 deviated in this file.  Deviation record ID -  H3_MISRAC_2012_R_2_2_DR_1 */
166:                 
167:                     /* Start out with interrupts disabled before configuring any modules */
168:                     __builtin_disable_interrupts();
169:                 
170:                   
171:                     CLK_Initialize();
172:                     /* Configure Prefetch, Wait States and ECC */
173:                     PRECONbits.PREFEN = 3;
174:                     PRECONbits.PFMWS = 3;
175:                     CFGCONbits.ECCCON = 3;
176:                 
177:                 
178:                 
179:                 	GPIO_Initialize();
180:                 
181:                 	UART6_Initialize();
182:                 
183:                 
184:                 
185:                 
186:                 
187:                     EVIC_Initialize();
188:                 
189:                 	/* Enable global interrupts */
190:                     __builtin_enable_interrupts();
191:                 
192:                 
193:                     /* MISRAC 2012 deviation block end */
194:                 }
195:                 
196:                 
197:                 /*******************************************************************************
198:                  End of File
199:                 */
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D000110  27BDFFE8   ADDIU SP, SP, -24
9D000114  AFBF0014   SW RA, 20(SP)
9D000118  41626000   DI V0
9D00011C  000000C0   EHB
9D000120  0F400A71   JAL CLK_Initialize
9D000124  00000000   NOP
9D000128  3C02BF8E   LUI V0, -16498
9D00012C  8C440000   LW A0, 0(V0)
9D000130  24030003   ADDIU V1, ZERO, 3
9D000134  7C642904   INS A0, V1, 4, 2
9D000138  AC440000   SW A0, 0(V0)
9D00013C  8C440000   LW A0, 0(V0)
9D000140  7C641004   INS A0, V1, 0, 3
9D000144  AC440000   SW A0, 0(V0)
9D000148  3C02BF80   LUI V0, -16512
9D00014C  8C440000   LW A0, 0(V0)
9D000150  7C642904   INS A0, V1, 4, 2
9D000154  AC440000   SW A0, 0(V0)
9D000158  0F400B0B   JAL GPIO_Initialize
9D00015C  00000000   NOP
9D000160  0F400AC7   JAL UART6_Initialize
9D000164  00000000   NOP
9D000168  0F400BF2   JAL EVIC_Initialize
9D00016C  00000000   NOP
9D000170  41626020   EI V0
9D000174  8FBF0014   LW RA, 20(SP)
9D000178  03E00008   JR RA
9D00017C  27BD0018   ADDIU SP, SP, 24
---  /home/swood/HarmonyProjects/LED_Driver/firmware/src/config/LED_Driver/exceptions.c  ----------------
1:                   /*******************************************************************************
2:                     MPLAB Harmony Exceptions Source File
3:                   
4:                     File Name:
5:                       exceptions.c
6:                   
7:                     Summary:
8:                       This file contains a function which overrides the default _weak_ exception
9:                       handler provided by the XC32 compiler.
10:                  
11:                    Description:
12:                      This file redefines the default _weak_  exception handler with a more debug
13:                      friendly one. If an unexpected exception occurs the code will stop in a
14:                      while(1) loop.  The debugger can be halted and two variables _excep_code and
15:                      _except_addr can be examined to determine the cause and address where the
16:                      exception occurred.
17:                   *******************************************************************************/
18:                  
19:                  // DOM-IGNORE-BEGIN
20:                  /*******************************************************************************
21:                  * Copyright (C) 2018 Microchip Technology Inc. and its subsidiaries.
22:                  *
23:                  * Subject to your compliance with these terms, you may use Microchip software
24:                  * and any derivatives exclusively with Microchip products. It is your
25:                  * responsibility to comply with third party license terms applicable to your
26:                  * use of third party software (including open source software) that may
27:                  * accompany Microchip software.
28:                  *
29:                  * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
30:                  * EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
31:                  * WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
32:                  * PARTICULAR PURPOSE.
33:                  *
34:                  * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
35:                  * INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
36:                  * WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
37:                  * BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
38:                  * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
39:                  * ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
40:                  * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
41:                  *******************************************************************************/
42:                  // DOM-IGNORE-END
43:                  
44:                  // *****************************************************************************
45:                  // *****************************************************************************
46:                  // Section: Included Files
47:                  // *****************************************************************************
48:                  // *****************************************************************************
49:                  #include "device.h"
50:                  #include "definitions.h"
51:                  #include <stdio.h>
52:                  
53:                  
54:                  // *****************************************************************************
55:                  // *****************************************************************************
56:                  // Section: Global Data Definitions
57:                  // *****************************************************************************
58:                  // *****************************************************************************
59:                  
60:                  /*******************************************************************************
61:                    Exception Reason Data
62:                  
63:                    <editor-fold defaultstate="expanded" desc="Exception Reason Data">
64:                  
65:                    Remarks:
66:                      These global static items are used instead of local variables in the
67:                      _general_exception_handler function because the stack may not be available
68:                      if an exception has occured.
69:                  */
70:                  
71:                  /* Address of instruction that caused the exception. */
72:                  static unsigned int _excep_addr;
73:                  
74:                  /* Enum identifying the cause */
75:                  typedef enum {
76:                      EXCEP_IRQ      =  0, // interrupt
77:                      EXCEP_AdEL     =  4, // address error exception (load or ifetch)
78:                      EXCEP_AdES     =  5, // address error exception (store)
79:                      EXCEP_IBE      =  6, // bus error (ifetch)
80:                      EXCEP_DBE      =  7, // bus error (load/store)
81:                      EXCEP_Sys      =  8, // syscall
82:                      EXCEP_Bp       =  9, // breakpoint
83:                      EXCEP_RI       = 10, // reserved instruction
84:                      EXCEP_CpU      = 11, // coprocessor unusable
85:                      EXCEP_Overflow = 12, // arithmetic overflow
86:                      EXCEP_Trap     = 13, // trap (possible divide by zero)
87:                      EXCEP_IS1      = 16, // implementation specfic 1
88:                      EXCEP_CEU      = 17, // CorExtend Unuseable
89:                      EXCEP_C2E      = 18, // coprocessor 2
90:                  } excep_code;
91:                  
92:                  /* Code identifying the cause of the exception (CP0 Cause register). */
93:                  static excep_code _excep_code;
94:                  
95:                  // </editor-fold>
96:                  
97:                  /*******************************************************************************
98:                    Function:
99:                      void _general_exception_handler ( void )
100:                 
101:                   Description:
102:                     A general exception is any non-interrupt exception which occurs during program
103:                     execution outside of bootstrap code.
104:                 
105:                   Remarks:
106:                     Refer to the XC32 User's Guide for additional information.
107:                  */
108:                 
109:                 void __attribute__((noreturn)) _general_exception_handler ( void )
110:                 {
111:                     /* Mask off the ExcCode Field from the Cause Register
112:                     Refer to the MIPs Software User's manual */
113:                     _excep_code = (_CP0_GET_CAUSE() & 0x0000007C) >> 2;
114:                     _excep_addr = _CP0_GET_EPC();
115:                 
116:                     while (1)
117:                     {
118:                         #if defined(__DEBUG) || defined(__DEBUG_D) && defined(__XC32)
119:                             __builtin_software_breakpoint();
120:                         #endif
121:                     }
122:                 }
123:                 
124:                 /*******************************************************************************
125:                   Function:
126:                     void _bootstrap_exception_handler ( void )
127:                 
128:                   Description:
129:                     A bootstrap exception is any exception which occurs while bootstrap code is
130:                     running (STATUS.BEV bit is 1).
131:                 
132:                   Remarks:
133:                     Refer to the XC32 User's Guide for additional information.
134:                  */
135:                 
136:                 void __attribute__((noreturn)) _bootstrap_exception_handler(void)
137:                 {
138:                     /* Mask off the ExcCode Field from the Cause Register
139:                     Refer to the MIPs Software User's manual */
140:                     _excep_code = (_CP0_GET_CAUSE() & 0x0000007C) >> 2;
141:                     _excep_addr = _CP0_GET_EPC();
142:                 
143:                     while (1)
144:                     {
145:                         #if defined(__DEBUG) || defined(__DEBUG_D) && defined(__XC32)
146:                             __builtin_software_breakpoint();
147:                         #endif
148:                     }
149:                 }
150:                 /*******************************************************************************
151:                   Function:
152:                     void _cache_err_exception_handler ( void )
153:                 
154:                   Description:
155:                     A cache-error exception occurs when an instruction or data reference detects
156:                     a cache tag or data error. This exception is not maskable. To avoid
157:                     disturbing the error in the cache array the exception vector is to an
158:                     unmapped, uncached address. This exception is precise.
159:                 
160:                   Remarks:
161:                     Refer to the XC32 User's Guide for additional information.
162:                  */
163:                 
164:                 void __attribute__((noreturn)) _cache_err_exception_handler(void)
165:                 {
166:                     /* Mask off the ExcCode Field from the Cause Register
167:                     Refer to the MIPs Software User's manual */
168:                     _excep_code = (_CP0_GET_CAUSE() & 0x0000007C) >> 2;
169:                     _excep_addr = _CP0_GET_EPC();
170:                 
171:                     while (1)
172:                     {
173:                         #if defined(__DEBUG) || defined(__DEBUG_D) && defined(__XC32)
174:                             __builtin_software_breakpoint();
175:                         #endif
176:                     }
177:                 }
178:                 
179:                 /*******************************************************************************
180:                   Function:
181:                     void _simple_tlb_refill_exception_handler ( void )
182:                 
183:                   Description:
184:                     During an instruction fetch or data access, a TLB refill exception occurs
185:                     when no TLB entry matches a reference to a mapped address space and the EXL
186:                     bit is 0 in the Status register. Note that this is distinct from the case
187:                     in which an entry matches, but has the valid bit off. In that case, a TLB
188:                     Invalid exception occurs.
189:                 
190:                   Remarks:
191:                     Refer to the XC32 User's Guide for additional information.
192:                  */
193:                 
194:                 void __attribute__((noreturn)) _simple_tlb_refill_exception_handler(void)
195:                 {
196:                     /* Mask off the ExcCode Field from the Cause Register
197:                     Refer to the MIPs Software User's manual */
198:                     _excep_code = (_CP0_GET_CAUSE() & 0x0000007C) >> 2;
199:                     _excep_addr = _CP0_GET_EPC();
200:                 
201:                     while (1)
202:                     {
203:                         #if defined(__DEBUG) || defined(__DEBUG_D) && defined(__XC32)
204:                             __builtin_software_breakpoint();
205:                         #endif
206:                     }
207:                 }
208:                 /*******************************************************************************
209:                  End of File
210:                 */
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D0031F8  27BDFFF8   ADDIU SP, SP, -8
9D0031FC  AFBF0004   SW RA, 4(SP)
9D003200  40026800   MFC0 V0, Cause
9D003204  40027000   MFC0 V0, EPC
9D003208  7000003F   SDBBP 0
9D00320C  1000FFFE   BEQ ZERO, ZERO, 0x9D003208
9D003210  00000000   NOP
9D003214  27BDFFF8   ADDIU SP, SP, -8
9D003218  AFBF0004   SW RA, 4(SP)
9D00321C  40026800   MFC0 V0, Cause
9D003220  40027000   MFC0 V0, EPC
9D003224  7000003F   SDBBP 0
9D003228  1000FFFE   BEQ ZERO, ZERO, 0x9D003224
9D00322C  00000000   NOP
9D003230  27BDFFF8   ADDIU SP, SP, -8
9D003234  AFBF0004   SW RA, 4(SP)
9D003238  40026800   MFC0 V0, Cause
9D00323C  40027000   MFC0 V0, EPC
9D003240  7000003F   SDBBP 0
9D003244  1000FFFE   BEQ ZERO, ZERO, 0x9D003240
9D003248  00000000   NOP
9D00324C  27BDFFF8   ADDIU SP, SP, -8
9D003250  AFBF0004   SW RA, 4(SP)
9D003254  40026800   MFC0 V0, Cause
9D003258  40027000   MFC0 V0, EPC
9D00325C  7000003F   SDBBP 0
9D003260  1000FFFE   BEQ ZERO, ZERO, 0x9D00325C
9D003264  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-WOZ14-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/string/xc32/memset.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D0031B4  00801025   OR V0, A0, ZERO
9D0031B8  00863021   ADDU A2, A0, A2
9D0031BC  00801825   OR V1, A0, ZERO
9D0031C0  14660003   BNE V1, A2, 0x9D0031D0
9D0031C4  24630001   ADDIU V1, V1, 1
9D0031C8  03E00008   JR RA
9D0031CC  00000000   NOP
9D0031D0  1000FFFB   BEQ ZERO, ZERO, 0x9D0031C0
9D0031D4  A065FFFF   SB A1, -1(V1)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-WOZ14-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/string/xc32/memcpy.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D003138  00801025   OR V0, A0, ZERO
9D00313C  00001825   OR V1, ZERO, ZERO
9D003140  14C30003   BNE A2, V1, 0x9D003150
9D003144  00A33821   ADDU A3, A1, V1
9D003148  03E00008   JR RA
9D00314C  00000000   NOP
9D003150  90E70000   LBU A3, 0(A3)
9D003154  00432021   ADDU A0, V0, V1
9D003158  24630001   ADDIU V1, V1, 1
9D00315C  1000FFF8   BEQ ZERO, ZERO, 0x9D003140
9D003160  A0870000   SB A3, 0(A0)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-WOZ14-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/stdlib/atoi.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D002DB0  24050020   ADDIU A1, ZERO, 32
9D002DB4  80820000   LB V0, 0(A0)
9D002DCC  1043000A   BEQ V0, V1, 0x9D002DF8
9D002DD0  2403002D   ADDIU V1, ZERO, 45
9D002DD4  14430003   BNE V0, V1, 0x9D002DE4
9D002DD8  00002825   OR A1, ZERO, ZERO
9D002DDC  24050001   ADDIU A1, ZERO, 1
9D002DE0  24840001   ADDIU A0, A0, 1
9D002DE4  00001025   OR V0, ZERO, ZERO
9D002DE8  10000007   BEQ ZERO, ZERO, 0x9D002E08
9D002DEC  2407000A   ADDIU A3, ZERO, 10
9D002DF0  1000FFF0   BEQ ZERO, ZERO, 0x9D002DB4
9D002DF4  24840001   ADDIU A0, A0, 1
9D002DF8  1000FFF9   BEQ ZERO, ZERO, 0x9D002DE0
9D002DFC  00002825   OR A1, ZERO, ZERO
9D002E00  24840001   ADDIU A0, A0, 1
9D002E04  00431023   SUBU V0, V0, V1
9D002E08  80830000   LB V1, 0(A0)
9D002E0C  2463FFD0   ADDIU V1, V1, -48
9D002E10  2C66000A   SLTIU A2, V1, 10
9D002E14  54C0FFFA   BNEL A2, ZERO, 0x9D002E00
9D002E18  70471002   MUL V0, V0, A3
9D002E1C  50A00001   BEQL A1, ZERO, 0x9D002E24
9D002E20  00021023   SUBU V0, ZERO, V0
9D002E24  03E00008   JR RA
9D002E28  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-WOZ14-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/stdio/mchp/__printf_core.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
9D000260  27BDFF18   ADDIU SP, SP, -232
9D000264  AFB500D8   SW S5, 216(SP)
9D000268  3C159D00   LUI S5, -25344
9D00026C  AFB600DC   SW S6, 220(SP)
9D000270  AFB400D4   SW S4, 212(SP)
9D000274  AFB300D0   SW S3, 208(SP)
9D000278  AFB200CC   SW S2, 204(SP)
9D00027C  AFB100C8   SW S1, 200(SP)
9D000280  AFBF00E4   SW RA, 228(SP)
9D000284  AFB700E0   SW S7, 224(SP)
9D000288  AFB000C4   SW S0, 196(SP)
9D00028C  00809025   OR S2, A0, ZERO
9D000290  00C08825   OR S1, A2, ZERO
9D000294  AFA500B0   SW A1, 176(SP)
9D000298  00009825   OR S3, ZERO, ZERO
9D00029C  27B60010   ADDIU S6, SP, 16
9D0002A0  24140025   ADDIU S4, ZERO, 37
9D0002A4  26B53318   ADDIU S5, S5, 13080
9D0002A8  8FA500B0   LW A1, 176(SP)
9D0002AC  80A20000   LB V0, 0(A1)
9D0002B0  104000E0   BEQ V0, ZERO, 0x9D000634
9D0002B4  2402FFFF   ADDIU V0, ZERO, -1
9D0002B8  AFA20094   SW V0, 148(SP)
9D0002BC  24020080   ADDIU V0, ZERO, 128
9D0002C0  AFA00090   SW ZERO, 144(SP)
9D0002C4  AFA00098   SW ZERO, 152(SP)
9D0002C8  AFB6009C   SW S6, 156(SP)
9D0002CC  AFA200A0   SW V0, 160(SP)
9D0002D0  00008025   OR S0, ZERO, ZERO
9D0002D4  00B01021   ADDU V0, A1, S0
9D0002D8  80420000   LB V0, 0(V0)
9D0002DC  10400003   BEQ V0, ZERO, 0x9D0002EC
9D0002E0  00000000   NOP
9D0002E4  5454FFFB   BNEL V0, S4, 0x9D0002D4
9D0002E8  26100001   ADDIU S0, S0, 1
9D0002EC  12000006   BEQ S0, ZERO, 0x9D000308
9D0002F0  02003025   OR A2, S0, ZERO
9D0002F4  0F400BC5   JAL __string_out
9D0002F8  02402025   OR A0, S2, ZERO
9D0002FC  8FA200B0   LW V0, 176(SP)
9D000300  00501021   ADDU V0, V0, S0
9D000304  AFA200B0   SW V0, 176(SP)
9D000308  8FB700B0   LW S7, 176(SP)
9D00030C  82E20000   LB V0, 0(S7)
9D000310  145400C1   BNE V0, S4, 0x9D000618
9D000314  26F70001   ADDIU S7, S7, 1
9D000318  AFB700B0   SW S7, 176(SP)
9D00031C  2405002B   ADDIU A1, ZERO, 43
9D000320  2406002D   ADDIU A2, ZERO, 45
9D000324  24030030   ADDIU V1, ZERO, 48
9D000328  24070020   ADDIU A3, ZERO, 32
9D00032C  24080023   ADDIU T0, ZERO, 35
9D000330  8FA400B0   LW A0, 176(SP)
9D000334  80820000   LB V0, 0(A0)
9D000338  5045001B   BEQL V0, A1, 0x9D0003A8
9D00033C  8FA20090   LW V0, 144(SP)
9D000340  2849002C   SLTI T1, V0, 44
9D000344  1120001E   BEQ T1, ZERO, __printf_core::vfpfcnvrt
9D000348  00000000   NOP
9D00034C  50470018   BEQL V0, A3, 0x9D0003B0
9D000350  8FA20090   LW V0, 144(SP)
9D000354  50480018   BEQL V0, T0, 0x9D0003B8
9D000358  8FA20090   LW V0, 144(SP)
9D00035C  2403002A   ADDIU V1, ZERO, 42
9D000360  5043001E   BEQL V0, V1, __printf_core::vfpfcnvrt
9D000364  8E220000   LW V0, 0(S1)
9D000368  0F400B6C   JAL atoi
9D00036C  00000000   NOP
9D000370  AFA20098   SW V0, 152(SP)
9D000374  8FA300B0   LW V1, 176(SP)
9D000378  80620000   LB V0, 0(V1)
9D00037C  2442FFD0   ADDIU V0, V0, -48
9D000380  2C42000A   SLTIU V0, V0, 10
9D000384  10400021   BEQ V0, ZERO, 0x9D00040C
9D000388  24630001   ADDIU V1, V1, 1
9D00038C  1000FFF9   BEQ ZERO, ZERO, 0x9D000374
9D000390  AFA300B0   SW V1, 176(SP)
9D000394  34420001   ORI V0, V0, 1
9D000398  24840001   ADDIU A0, A0, 1
9D00039C  AFA20090   SW V0, 144(SP)
9D0003A0  1000FFE3   BEQ ZERO, ZERO, 0x9D000330
9D0003A4  AFA400B0   SW A0, 176(SP)
9D0003A8  1000FFFB   BEQ ZERO, ZERO, 0x9D000398
9D0003AC  34420004   ORI V0, V0, 4
9D0003B0  1000FFF9   BEQ ZERO, ZERO, 0x9D000398
9D0003B4  34420008   ORI V0, V0, 8
9D0003B8  1000FFF7   BEQ ZERO, ZERO, 0x9D000398
9D0003BC  34420010   ORI V0, V0, 16
9D0003C0  5046FFF4   BEQL V0, A2, __printf_core::vfpfcnvrt
9D0003C4  8FA20090   LW V0, 144(SP)
9D0003C8  5443FFE5   BNEL V0, V1, 0x9D000360
9D0003CC  2403002A   ADDIU V1, ZERO, 42
9D0003D0  8FA20090   LW V0, 144(SP)
9D0003D4  1000FFF0   BEQ ZERO, ZERO, 0x9D000398
9D0003D8  34420002   ORI V0, V0, 2
9D0003DC  24840001   ADDIU A0, A0, 1
9D0003E0  AFA400B0   SW A0, 176(SP)
9D0003E4  24430004   ADDIU V1, V0, 4
9D0003E8  8C420000   LW V0, 0(V0)
9D0003EC  AE230000   SW V1, 0(S1)
9D0003F0  04410006   BGEZ V0, 0x9D00040C
9D0003F4  AFA20098   SW V0, 152(SP)
9D0003F8  8FA30090   LW V1, 144(SP)
9D0003FC  00021023   SUBU V0, ZERO, V0
9D000400  AFA20098   SW V0, 152(SP)
9D000404  38630001   XORI V1, V1, 1
9D000408  AFA30090   SW V1, 144(SP)
9D00040C  8FA20090   LW V0, 144(SP)
9D000410  30430001   ANDI V1, V0, 1
9D000414  10600002   BEQ V1, ZERO, 0x9D000420
9D000418  7C020844   INS V0, ZERO, 1, 1
9D00041C  AFA20090   SW V0, 144(SP)
9D000420  8FA200B0   LW V0, 176(SP)
9D000424  2403002E   ADDIU V1, ZERO, 46
9D000428  80440000   LB A0, 0(V0)
9D00042C  1483000D   BNE A0, V1, 0x9D000464
9D000430  24440001   ADDIU A0, V0, 1
9D000434  AFA00094   SW ZERO, 148(SP)
9D000438  AFA400B0   SW A0, 176(SP)
9D00043C  80450001   LB A1, 1(V0)
9D000440  2403002A   ADDIU V1, ZERO, 42
9D000444  14A30023   BNE A1, V1, __printf_core::vfpfcnvrt
9D000448  24420002   ADDIU V0, V0, 2
9D00044C  AFA200B0   SW V0, 176(SP)
9D000450  8E220000   LW V0, 0(S1)
9D000454  24430004   ADDIU V1, V0, 4
9D000458  8C420000   LW V0, 0(V0)
9D00045C  AE230000   SW V1, 0(S1)
9D000460  AFA20094   SW V0, 148(SP)
9D000464  0F400BDC   JAL __fmt_state
9D000468  27A400B0   ADDIU A0, SP, 176
9D00046C  AFA200B8   SW V0, 184(SP)
9D000470  8FA200B0   LW V0, 176(SP)
9D000474  0F400C9A   JAL tolower
9D000478  80440000   LB A0, 0(V0)
9D00047C  24030069   ADDIU V1, ZERO, 105
9D000480  10430078   BEQ V0, V1, __printf_core::vfpfcnvrt
9D000484  8FA500B8   LW A1, 184(SP)
9D000488  2843006A   SLTI V1, V0, 106
9D00048C  1060002E   BEQ V1, ZERO, __printf_core::vfpfcnvrt
9D000490  24030063   ADDIU V1, ZERO, 99
9D000494  104300BC   BEQ V0, V1, __printf_core::vfpfcnvrt
9D000498  28430064   SLTI V1, V0, 100
9D00049C  10600018   BEQ V1, ZERO, __printf_core::vfpfcnvrt
9D0004A0  24030064   ADDIU V1, ZERO, 100
9D0004A4  105400C5   BEQ V0, S4, __printf_core::vfpfcnvrt
9D0004A8  24030061   ADDIU V1, ZERO, 97
9D0004AC  5043004E   BEQL V0, V1, __printf_core::vfpfcnvrt
9D0004B0  02203025   OR A2, S1, ZERO
9D0004B4  24020025   ADDIU V0, ZERO, 37
9D0004B8  A3A200A8   SB V0, 168(SP)
9D0004BC  2402FFFF   ADDIU V0, ZERO, -1
9D0004C0  AFB700B0   SW S7, 176(SP)
9D0004C4  AFA00090   SW ZERO, 144(SP)
9D0004C8  AFA00098   SW ZERO, 152(SP)
9D0004CC  100000B8   BEQ ZERO, ZERO, 0x9D0007B0
9D0004D0  AFA20094   SW V0, 148(SP)
9D0004D4  0F400B6C   JAL atoi
9D0004D8  00000000   NOP
9D0004DC  AFA20094   SW V0, 148(SP)
9D0004E0  8FA300B0   LW V1, 176(SP)
9D0004E4  80620000   LB V0, 0(V1)
9D0004E8  2442FFD0   ADDIU V0, V0, -48
9D0004EC  2C42000A   SLTIU V0, V0, 10
9D0004F0  1040FFDC   BEQ V0, ZERO, 0x9D000464
9D0004F4  24630001   ADDIU V1, V1, 1
9D0004F8  1000FFF9   BEQ ZERO, ZERO, 0x9D0004E0
9D0004FC  AFA300B0   SW V1, 176(SP)
9D000500  10430058   BEQ V0, V1, __printf_core::vfpfcnvrt
9D000504  28420068   SLTI V0, V0, 104
9D000508  1040FFEB   BEQ V0, ZERO, 0x9D0004B8
9D00050C  24020025   ADDIU V0, ZERO, 37
9D000510  02203025   OR A2, S1, ZERO
9D000514  0F400C1C   JAL __pop_float
9D000518  27A400A8   ADDIU A0, SP, 168
9D00051C  10400096   BEQ V0, ZERO, 0x9D000778
9D000520  8FA200B0   LW V0, 176(SP)
9D000524  27A600A8   ADDIU A2, SP, 168
9D000528  27A50090   ADDIU A1, SP, 144
9D00052C  24430001   ADDIU V1, V0, 1
9D000530  AFA300B0   SW V1, 176(SP)
9D000534  80470000   LB A3, 0(V0)
9D000538  0F400CC4   JAL __dummy_fmt4
9D00053C  02402025   OR A0, S2, ZERO
9D000540  10000035   BEQ ZERO, ZERO, 0x9D000618
9D000544  02028021   ADDU S0, S0, V0
9D000548  24030070   ADDIU V1, ZERO, 112
9D00054C  10430070   BEQ V0, V1, __printf_core::vfpfcnvrt
9D000550  28430071   SLTI V1, V0, 113
9D000554  10600013   BEQ V1, ZERO, __printf_core::vfpfcnvrt
9D000558  2403006E   ADDIU V1, ZERO, 110
9D00055C  10430082   BEQ V0, V1, __printf_core::vfpfcnvrt
9D000560  2403006F   ADDIU V1, ZERO, 111
9D000564  1443FFD4   BNE V0, V1, 0x9D0004B8
9D000568  24020025   ADDIU V0, ZERO, 37
9D00056C  02203825   OR A3, S1, ZERO
9D000570  00003025   OR A2, ZERO, ZERO
9D000574  0F4006AB   JAL __pop_int
9D000578  27A400A8   ADDIU A0, SP, 168
9D00057C  1040007E   BEQ V0, ZERO, 0x9D000778
9D000580  8FA200B0   LW V0, 176(SP)
9D000584  27A600A8   ADDIU A2, SP, 168
9D000588  27A50090   ADDIU A1, SP, 144
9D00058C  24420001   ADDIU V0, V0, 1
9D000590  02402025   OR A0, S2, ZERO
9D000594  0F4008D3   JAL __fmt_o
9D000598  AFA200B0   SW V0, 176(SP)
9D00059C  1000001E   BEQ ZERO, ZERO, 0x9D000618
9D0005A0  02028021   ADDU S0, S0, V0
9D0005A4  24030075   ADDIU V1, ZERO, 117
9D0005A8  1043003C   BEQ V0, V1, __printf_core::vfpfcnvrt
9D0005AC  24030078   ADDIU V1, ZERO, 120
9D0005B0  10430048   BEQ V0, V1, __printf_core::vfpfcnvrt
9D0005B4  24030073   ADDIU V1, ZERO, 115
9D0005B8  1443FFBE   BNE V0, V1, 0x9D0004B4
9D0005BC  24020080   ADDIU V0, ZERO, 128
9D0005C0  14A2006D   BNE A1, V0, 0x9D000778
9D0005C4  8FA200B0   LW V0, 176(SP)
9D0005C8  00003825   OR A3, ZERO, ZERO
9D0005CC  24420001   ADDIU V0, V0, 1
9D0005D0  AFA200B0   SW V0, 176(SP)
9D0005D4  8E220000   LW V0, 0(S1)
9D0005D8  24430004   ADDIU V1, V0, 4
9D0005DC  AE230000   SW V1, 0(S1)
9D0005E0  1000005A   BEQ ZERO, ZERO, 0x9D00074C
9D0005E4  8C460000   LW A2, 0(V0)
9D0005E8  0F400C1C   JAL __pop_float
9D0005EC  27A400A8   ADDIU A0, SP, 168
9D0005F0  10400061   BEQ V0, ZERO, 0x9D000778
9D0005F4  8FA200B0   LW V0, 176(SP)
9D0005F8  27A600A8   ADDIU A2, SP, 168
9D0005FC  27A50090   ADDIU A1, SP, 144
9D000600  24430001   ADDIU V1, V0, 1
9D000604  AFA300B0   SW V1, 176(SP)
9D000608  80470000   LB A3, 0(V0)
9D00060C  0F400CC4   JAL __dummy_fmt4
9D000610  02402025   OR A0, S2, ZERO
9D000614  02028021   ADDU S0, S0, V0
9D000618  02708021   ADDU S0, S3, S0
9D00061C  0213982A   SLT S3, S0, S3
9D000620  1260006D   BEQ S3, ZERO, 0x9D0007D8
9D000624  3C028000   LUI V0, -32768
9D000628  2403004F   ADDIU V1, ZERO, 79
9D00062C  AC4303D8   SW V1, 984(V0)
9D000630  2413FFFF   ADDIU S3, ZERO, -1
9D000634  8FBF00E4   LW RA, 228(SP)
9D000638  02601025   OR V0, S3, ZERO
9D00063C  8FB700E0   LW S7, 224(SP)
9D000640  8FB600DC   LW S6, 220(SP)
9D000644  8FB500D8   LW S5, 216(SP)
9D000648  8FB400D4   LW S4, 212(SP)
9D00064C  8FB300D0   LW S3, 208(SP)
9D000650  8FB200CC   LW S2, 204(SP)
9D000654  8FB100C8   LW S1, 200(SP)
9D000658  8FB000C4   LW S0, 196(SP)
9D00065C  03E00008   JR RA
9D000660  27BD00E8   ADDIU SP, SP, 232
9D000664  02203825   OR A3, S1, ZERO
9D000668  24060001   ADDIU A2, ZERO, 1
9D00066C  0F4006AB   JAL __pop_int
9D000670  27A400A8   ADDIU A0, SP, 168
9D000674  10400040   BEQ V0, ZERO, 0x9D000778
9D000678  8FA200B0   LW V0, 176(SP)
9D00067C  27A600A8   ADDIU A2, SP, 168
9D000680  27A50090   ADDIU A1, SP, 144
9D000684  24420001   ADDIU V0, V0, 1
9D000688  02402025   OR A0, S2, ZERO
9D00068C  0F400767   JAL __fmt_d
9D000690  AFA200B0   SW V0, 176(SP)
9D000694  1000FFE0   BEQ ZERO, ZERO, 0x9D000618
9D000698  02028021   ADDU S0, S0, V0
9D00069C  02203825   OR A3, S1, ZERO
9D0006A0  00003025   OR A2, ZERO, ZERO
9D0006A4  0F4006AB   JAL __pop_int
9D0006A8  27A400A8   ADDIU A0, SP, 168
9D0006AC  10400032   BEQ V0, ZERO, 0x9D000778
9D0006B0  8FA200B0   LW V0, 176(SP)
9D0006B4  27A600A8   ADDIU A2, SP, 168
9D0006B8  27A50090   ADDIU A1, SP, 144
9D0006BC  24420001   ADDIU V0, V0, 1
9D0006C0  02402025   OR A0, S2, ZERO
9D0006C4  0F400A42   JAL __fmt_u
9D0006C8  AFA200B0   SW V0, 176(SP)
9D0006CC  1000FFD2   BEQ ZERO, ZERO, 0x9D000618
9D0006D0  02028021   ADDU S0, S0, V0
9D0006D4  02203825   OR A3, S1, ZERO
9D0006D8  00003025   OR A2, ZERO, ZERO
9D0006DC  0F4006AB   JAL __pop_int
9D0006E0  27A400A8   ADDIU A0, SP, 168
9D0006E4  10400024   BEQ V0, ZERO, 0x9D000778
9D0006E8  8FA200B0   LW V0, 176(SP)
9D0006EC  24430001   ADDIU V1, V0, 1
9D0006F0  AFA300B0   SW V1, 176(SP)
9D0006F4  80470000   LB A3, 0(V0)
9D0006F8  27A600A8   ADDIU A2, SP, 168
9D0006FC  27A50090   ADDIU A1, SP, 144
9D000700  0F4004CD   JAL __fmt_x
9D000704  02402025   OR A0, S2, ZERO
9D000708  1000FFC3   BEQ ZERO, ZERO, 0x9D000618
9D00070C  02028021   ADDU S0, S0, V0
9D000710  02203825   OR A3, S1, ZERO
9D000714  00003025   OR A2, ZERO, ZERO
9D000718  240500F0   ADDIU A1, ZERO, 240
9D00071C  0F4006AB   JAL __pop_int
9D000720  27A400A8   ADDIU A0, SP, 168
9D000724  10400014   BEQ V0, ZERO, 0x9D000778
9D000728  8FA200B0   LW V0, 176(SP)
9D00072C  8FA300AC   LW V1, 172(SP)
9D000730  24420001   ADDIU V0, V0, 1
9D000734  AFA200B0   SW V0, 176(SP)
9D000738  8FA200A8   LW V0, 168(SP)
9D00073C  00431025   OR V0, V0, V1
9D000740  14400007   BNE V0, ZERO, 0x9D000760
9D000744  02A03025   OR A2, S5, ZERO
9D000748  00003825   OR A3, ZERO, ZERO
9D00074C  27A50090   ADDIU A1, SP, 144
9D000750  0F400A9E   JAL __fmt_s
9D000754  02402025   OR A0, S2, ZERO
9D000758  1000FFAF   BEQ ZERO, ZERO, 0x9D000618
9D00075C  02028021   ADDU S0, S0, V0
9D000760  1000FFE5   BEQ ZERO, ZERO, 0x9D0006F8
9D000764  24070078   ADDIU A3, ZERO, 120
9D000768  02203825   OR A3, S1, ZERO
9D00076C  02703021   ADDU A2, S3, S0
9D000770  0F400004   JAL __pop_ptr
9D000774  27A400A8   ADDIU A0, SP, 168
9D000778  8FA200B0   LW V0, 176(SP)
9D00077C  24420001   ADDIU V0, V0, 1
9D000780  1000FFA5   BEQ ZERO, ZERO, 0x9D000618
9D000784  AFA200B0   SW V0, 176(SP)
9D000788  24020080   ADDIU V0, ZERO, 128
9D00078C  14A2FFFA   BNE A1, V0, 0x9D000778
9D000790  8FA200B0   LW V0, 176(SP)
9D000794  24420001   ADDIU V0, V0, 1
9D000798  AFA200B0   SW V0, 176(SP)
9D00079C  8E220000   LW V0, 0(S1)
9D0007A0  24430004   ADDIU V1, V0, 4
9D0007A4  8C420000   LW V0, 0(V0)
9D0007A8  AE230000   SW V1, 0(S1)
9D0007AC  A3A200A8   SB V0, 168(SP)
9D0007B0  24070001   ADDIU A3, ZERO, 1
9D0007B4  1000FFE5   BEQ ZERO, ZERO, 0x9D00074C
9D0007B8  27A600A8   ADDIU A2, SP, 168
9D0007BC  24020080   ADDIU V0, ZERO, 128
9D0007C0  14A2FFED   BNE A1, V0, 0x9D000778
9D0007C4  8FA200B0   LW V0, 176(SP)
9D0007C8  A3B400A8   SB S4, 168(SP)
9D0007CC  24420001   ADDIU V0, V0, 1
9D0007D0  1000FFF7   BEQ ZERO, ZERO, 0x9D0007B0
9D0007D4  AFA200B0   SW V0, 176(SP)
9D0007D8  1000FEB3   BEQ ZERO, ZERO, 0x9D0002A8
9D0007DC  02009825   OR S3, S0, ZERO
9D00224C  27BDFFC0   ADDIU SP, SP, -64
9D002250  AFB3002C   SW S3, 44(SP)
9D002254  8FB30050   LW S3, 80(SP)
9D002258  AFB60038   SW S6, 56(SP)
9D00225C  AFB40030   SW S4, 48(SP)
9D002260  32730001   ANDI S3, S3, 1
9D002264  AFB20028   SW S2, 40(SP)
9D002268  AFB10024   SW S1, 36(SP)
9D00226C  AFB00020   SW S0, 32(SP)
9D002270  AFBF003C   SW RA, 60(SP)
9D002274  AFB50034   SW S5, 52(SP)
9D002278  00809025   OR S2, A0, ZERO
9D00227C  00A0B025   OR S6, A1, ZERO
9D002280  00C08025   OR S0, A2, ZERO
9D002284  00E08825   OR S1, A3, ZERO
9D002288  16600003   BNE S3, ZERO, 0x9D002298
9D00228C  00C7A02B   SLTU S4, A2, A3
9D002290  56800013   BNEL S4, ZERO, 0x9D0022E0
9D002294  0230A023   SUBU S4, S1, S0
9D002298  02003025   OR A2, S0, ZERO
9D00229C  02C02825   OR A1, S6, ZERO
9D0022A0  0F400BC5   JAL __string_out
9D0022A4  02402025   OR A0, S2, ZERO
9D0022A8  1680000D   BNE S4, ZERO, 0x9D0022E0
9D0022AC  0230A023   SUBU S4, S1, S0
9D0022B0  02008825   OR S1, S0, ZERO
9D0022B4  8FBF003C   LW RA, 60(SP)
9D0022B8  02201025   OR V0, S1, ZERO
9D0022BC  8FB60038   LW S6, 56(SP)
9D0022C0  8FB50034   LW S5, 52(SP)
9D0022C4  8FB40030   LW S4, 48(SP)
9D0022C8  8FB3002C   LW S3, 44(SP)
9D0022CC  8FB20028   LW S2, 40(SP)
9D0022D0  8FB10024   LW S1, 36(SP)
9D0022D4  8FB00020   LW S0, 32(SP)
9D0022D8  03E00008   JR RA
9D0022DC  27BD0040   ADDIU SP, SP, 64
9D0022E0  2E860011   SLTIU A2, S4, 17
9D0022E4  24020010   ADDIU V0, ZERO, 16
9D0022E8  0286100B   MOVN V0, S4, A2
9D0022EC  00403025   OR A2, V0, ZERO
9D0022F0  24050020   ADDIU A1, ZERO, 32
9D0022F4  27A40010   ADDIU A0, SP, 16
9D0022F8  0F400C6D   JAL memset
9D0022FC  0280A825   OR S5, S4, ZERO
9D002300  2EA20010   SLTIU V0, S5, 16
9D002304  1040000B   BEQ V0, ZERO, 0x9D002334
9D002308  3286000F   ANDI A2, S4, 15
9D00230C  27A50010   ADDIU A1, SP, 16
9D002310  0F400BC5   JAL __string_out
9D002314  02402025   OR A0, S2, ZERO
9D002318  1660FFE6   BNE S3, ZERO, 0x9D0022B4
9D00231C  02003025   OR A2, S0, ZERO
9D002320  02C02825   OR A1, S6, ZERO
9D002324  0F400BC5   JAL __string_out
9D002328  02402025   OR A0, S2, ZERO
9D00232C  1000FFE2   BEQ ZERO, ZERO, 0x9D0022B8
9D002330  8FBF003C   LW RA, 60(SP)
9D002334  24060010   ADDIU A2, ZERO, 16
9D002338  27A50010   ADDIU A1, SP, 16
9D00233C  0F400BC5   JAL __string_out
9D002340  02402025   OR A0, S2, ZERO
9D002344  1000FFEE   BEQ ZERO, ZERO, 0x9D002300
9D002348  26B5FFF0   ADDIU S5, S5, -16
9D002F14  8C820010   LW V0, 16(A0)
9D002F18  27BDFFE0   ADDIU SP, SP, -32
9D002F1C  AFB00014   SW S0, 20(SP)
9D002F20  00808025   OR S0, A0, ZERO
9D002F24  8C840014   LW A0, 20(A0)
9D002F28  AFB10018   SW S1, 24(SP)
9D002F2C  00C2882B   SLTU S1, A2, V0
9D002F30  0051300A   MOVZ A2, V0, S1
9D002F34  AFBF001C   SW RA, 28(SP)
9D002F38  0F400C4E   JAL memcpy
9D002F3C  00C08825   OR S1, A2, ZERO
9D002F40  8E020014   LW V0, 20(S0)
9D002F44  8E060010   LW A2, 16(S0)
9D002F48  00511021   ADDU V0, V0, S1
9D002F4C  00D18823   SUBU S1, A2, S1
9D002F50  AE110010   SW S1, 16(S0)
9D002F54  AE020014   SW V0, 20(S0)
9D002F58  A0400000   SB ZERO, 0(V0)
9D002F5C  8FBF001C   LW RA, 28(SP)
9D002F60  8FB10018   LW S1, 24(SP)
9D002F64  8FB00014   LW S0, 20(SP)
9D002F68  03E00008   JR RA
9D002F6C  27BD0020   ADDIU SP, SP, 32
9D002F70  3C069D00   LUI A2, -25344
9D002F74  00001025   OR V0, ZERO, ZERO
9D002F78  24C632E8   ADDIU A2, A2, 13032
9D002F7C  00021840   SLL V1, V0, 1
9D002F80  00661821   ADDU V1, V1, A2
9D002F84  80670000   LB A3, 0(V1)
9D002F88  54E00003   BNEL A3, ZERO, 0x9D002F98
9D002F8C  8C850000   LW A1, 0(A0)
9D002F90  03E00008   JR RA
9D002F94  90620001   LBU V0, 1(V1)
9D002F98  24420001   ADDIU V0, V0, 1
9D002F9C  80A80000   LB T0, 0(A1)
9D002FA0  15070004   BNE T0, A3, 0x9D002FB4
9D002FA4  304200FF   ANDI V0, V0, 255
9D002FA8  90620001   LBU V0, 1(V1)
9D002FAC  24A50001   ADDIU A1, A1, 1
9D002FB0  AC850000   SW A1, 0(A0)
9D002FB4  2C43000B   SLTIU V1, V0, 11
9D002FB8  1460FFF1   BNE V1, ZERO, 0x9D002F80
9D002FBC  00021840   SLL V1, V0, 1
9D002FC0  03E00008   JR RA
9D002FC4  00000000   NOP
9D003310  03E00008   JR RA
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-WOZ14-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/stdio/mchp/__pop_ptr.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D000010  24020084   ADDIU V0, ZERO, 132
9D000048  8CE20000   LW V0, 0(A3)
9D00004C  24430004   ADDIU V1, V0, 4
9D000050  ACE30000   SW V1, 0(A3)
9D000054  8C420000   LW V0, 0(V0)
9D000058  AC820000   SW V0, 0(A0)
9D00005C  10000015   BEQ ZERO, ZERO, __pop_ptr_needed
9D000060  AC460000   SW A2, 0(V0)
9D000064  24020090   ADDIU V0, ZERO, 144
9D000068  50A2001A   BEQL A1, V0, __pop_ptr_needed
9D00006C  8CE20000   LW V0, 0(A3)
9D000070  28A20091   SLTI V0, A1, 145
9D000074  10400005   BEQ V0, ZERO, __pop_ptr_needed
9D000078  24020088   ADDIU V0, ZERO, 136
9D00007C  50A2000F   BEQL A1, V0, __pop_ptr_needed
9D000080  8CE20000   LW V0, 0(A3)
9D000084  03E00008   JR RA
9D000088  00001025   OR V0, ZERO, ZERO
9D00008C  240200A0   ADDIU V0, ZERO, 160
9D000090  50A2FFEE   BEQL A1, V0, __pop_ptr_needed
9D000094  8CE20000   LW V0, 0(A3)
9D000098  1000FFE9   BEQ ZERO, ZERO, __pop_ptr_needed
9D00009C  240200C0   ADDIU V0, ZERO, 192
9D0000A0  24430004   ADDIU V1, V0, 4
9D0000A4  ACE30000   SW V1, 0(A3)
9D0000A8  8C420000   LW V0, 0(V0)
9D0000AC  AC820000   SW V0, 0(A0)
9D0000B0  A4460000   SH A2, 0(V0)
9D0000B4  03E00008   JR RA
9D0000B8  24020001   ADDIU V0, ZERO, 1
9D0000BC  24430004   ADDIU V1, V0, 4
9D0000C0  ACE30000   SW V1, 0(A3)
9D0000C4  8C420000   LW V0, 0(V0)
9D0000C8  AC820000   SW V0, 0(A0)
9D0000CC  1000FFF9   BEQ ZERO, ZERO, __pop_ptr_needed
9D0000D0  A0460000   SB A2, 0(V0)
9D0000D4  24430004   ADDIU V1, V0, 4
9D0000D8  ACE30000   SW V1, 0(A3)
9D0000DC  8C420000   LW V0, 0(V0)
9D0000E0  AC820000   SW V0, 0(A0)
9D0000E4  AC460000   SW A2, 0(V0)
9D0000E8  000637C3   SRA A2, A2, 31
9D0000EC  1000FFF1   BEQ ZERO, ZERO, __pop_ptr_needed
9D0000F0  AC460004   SW A2, 4(V0)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-WOZ14-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/stdio/mchp/__pop_int.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D001AAC  24020088   ADDIU V0, ZERO, 136
9D001AD8  03E00008   JR RA
9D001ADC  00001025   OR V0, ZERO, ZERO
9D001AE0  24020082   ADDIU V0, ZERO, 130
9D001AE4  50A2003B   BEQL A1, V0, __pop_int_needed
9D001AE8  8CE20000   LW V0, 0(A3)
9D001AEC  24020084   ADDIU V0, ZERO, 132
9D001AF0  14A2FFF9   BNE A1, V0, __pop_int_needed
9D001AF4  00000000   NOP
9D001AF8  8CE20000   LW V0, 0(A3)
9D001AFC  24430004   ADDIU V1, V0, 4
9D001B00  8C420000   LW V0, 0(V0)
9D001B04  10C00027   BEQ A2, ZERO, __pop_int_needed
9D001B08  ACE30000   SW V1, 0(A3)
9D001B0C  7C021620   SEH V0, V0
9D001B10  AC820000   SW V0, 0(A0)
9D001B14  000217C3   SRA V0, V0, 31
9D001B18  AC820004   SW V0, 4(A0)
9D001B1C  03E00008   JR RA
9D001B20  24020001   ADDIU V0, ZERO, 1
9D001B24  240200A0   ADDIU V0, ZERO, 160
9D001B28  50A20036   BEQL A1, V0, __pop_int_needed
9D001B2C  8CE20000   LW V0, 0(A3)
9D001B30  28A200A1   SLTI V0, A1, 161
9D001B34  10400010   BEQ V0, ZERO, __pop_int_needed
9D001B38  24020090   ADDIU V0, ZERO, 144
9D001B3C  14A2FFE6   BNE A1, V0, __pop_int_needed
9D001B40  00000000   NOP
9D001B44  8CE20000   LW V0, 0(A3)
9D001B48  24420007   ADDIU V0, V0, 7
9D001B4C  7C021004   INS V0, ZERO, 0, 3
9D001B50  8C480000   LW T0, 0(V0)
9D001B54  8C490004   LW T1, 4(V0)
9D001B58  24420008   ADDIU V0, V0, 8
9D001B5C  ACE20000   SW V0, 0(A3)
9D001B60  AC880000   SW T0, 0(A0)
9D001B64  AC890004   SW T1, 4(A0)
9D001B68  10C00001   BEQ A2, ZERO, __pop_int_needed
9D001B6C  24020001   ADDIU V0, ZERO, 1
9D001B70  03E00008   JR RA
9D001B74  00000000   NOP
9D001B78  240200C0   ADDIU V0, ZERO, 192
9D001B7C  50A20005   BEQL A1, V0, __pop_int_needed
9D001B80  8CE20000   LW V0, 0(A3)
9D001B84  240200F0   ADDIU V0, ZERO, 240
9D001B88  14A2FFD3   BNE A1, V0, __pop_int_needed
9D001B8C  00000000   NOP
9D001B90  8CE20000   LW V0, 0(A3)
9D001B94  24430004   ADDIU V1, V0, 4
9D001B98  ACE30000   SW V1, 0(A3)
9D001B9C  10000002   BEQ ZERO, ZERO, __pop_int_needed
9D001BA0  8C420000   LW V0, 0(V0)
9D001BA4  3042FFFF   ANDI V0, V0, -1
9D001BA8  10000020   BEQ ZERO, ZERO, __pop_int_needed
9D001BAC  AC820000   SW V0, 0(A0)
9D001BB0  8CE20000   LW V0, 0(A3)
9D001BB4  24430004   ADDIU V1, V0, 4
9D001BB8  8C420000   LW V0, 0(V0)
9D001BBC  10C00003   BEQ A2, ZERO, __pop_int_needed
9D001BC0  ACE30000   SW V1, 0(A3)
9D001BC4  1000FFD2   BEQ ZERO, ZERO, __pop_int_needed
9D001BC8  7C021420   SEB V0, V0
9D001BCC  1000FFF6   BEQ ZERO, ZERO, __pop_int_needed
9D001BD0  304200FF   ANDI V0, V0, 255
9D001BD4  24420007   ADDIU V0, V0, 7
9D001BD8  7C021004   INS V0, ZERO, 0, 3
9D001BDC  8C480000   LW T0, 0(V0)
9D001BE0  8C490004   LW T1, 4(V0)
9D001BE4  24420008   ADDIU V0, V0, 8
9D001BE8  ACE20000   SW V0, 0(A3)
9D001BEC  AC880000   SW T0, 0(A0)
9D001BF0  AC890004   SW T1, 4(A0)
9D001BF4  10C0FFDE   BEQ A2, ZERO, __pop_int_needed
9D001BF8  24020001   ADDIU V0, ZERO, 1
9D001BFC  03E00008   JR RA
9D001C00  00000000   NOP
9D001C04  24430004   ADDIU V1, V0, 4
9D001C08  ACE30000   SW V1, 0(A3)
9D001C0C  1000FFC0   BEQ ZERO, ZERO, __pop_int_needed
9D001C10  8C420000   LW V0, 0(V0)
9D001C14  8CE20000   LW V0, 0(A3)
9D001C18  24430004   ADDIU V1, V0, 4
9D001C1C  ACE30000   SW V1, 0(A3)
9D001C20  8C420000   LW V0, 0(V0)
9D001C24  14C0FFBB   BNE A2, ZERO, __pop_int_needed
9D001C28  AC820000   SW V0, 0(A0)
9D001C2C  1000FFBB   BEQ ZERO, ZERO, __pop_int_needed
9D001C30  AC800004   SW ZERO, 4(A0)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-WOZ14-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/stdio/mchp/__pop_float.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D003070  28A30080   SLTI V1, A1, 128
9D003090  8CC20000   LW V0, 0(A2)
9D003094  24420007   ADDIU V0, V0, 7
9D003098  7C021004   INS V0, ZERO, 0, 3
9D00309C  24430008   ADDIU V1, V0, 8
9D0030A0  ACC30000   SW V1, 0(A2)
9D0030A4  D4400000   LDC1 F0, 0(V0)
9D0030A8  24020001   ADDIU V0, ZERO, 1
9D0030AC  F4800000   SDC1 F0, 0(A0)
9D0030B0  03E00008   JR RA
9D0030B4  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-WOZ14-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/stdio/mchp/__fmt_x.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D001334  8CA20004   LW V0, 4(A1)
9D001338  27BDFFA8   ADDIU SP, SP, -88
9D00133C  AFB60048   SW S6, 72(SP)
9D001340  AFB3003C   SW S3, 60(SP)
9D001344  AFB20038   SW S2, 56(SP)
9D001348  AFBF0054   SW RA, 84(SP)
9D00134C  AFBE0050   SW FP, 80(SP)
9D001350  AFB7004C   SW S7, 76(SP)
9D001354  AFB50044   SW S5, 68(SP)
9D001358  AFB40040   SW S4, 64(SP)
9D00135C  AFB10034   SW S1, 52(SP)
9D001360  AFB00030   SW S0, 48(SP)
9D001364  00809825   OR S3, A0, ZERO
9D001368  00A09025   OR S2, A1, ZERO
9D00136C  00E04025   OR T0, A3, ZERO
9D001370  0440004D   BLTZ V0, __fmt_x_needed
9D001374  8CB60000   LW S6, 0(A1)
9D001378  7C160844   INS S6, ZERO, 1, 1
9D00137C  8E470008   LW A3, 8(S2)
9D001380  32C90010   ANDI T1, S6, 16
9D001384  8CD40000   LW S4, 0(A2)
9D001388  8CD70004   LW S7, 4(A2)
9D00138C  11200004   BEQ T1, ZERO, __fmt_x_needed
9D001390  00E08825   OR S1, A3, ZERO
9D001394  02971825   OR V1, S4, S7
9D001398  54600001   BNEL V1, ZERO, __fmt_x_needed
9D00139C  24F1FFFE   ADDIU S1, A3, -2
9D0013A0  32CA0008   ANDI T2, S6, 8
9D0013A4  55400001   BNEL T2, ZERO, __fmt_x_needed
9D0013A8  2631FFFF   ADDIU S1, S1, -1
9D0013AC  8E500010   LW S0, 16(S2)
9D0013B0  8E55000C   LW S5, 12(S2)
9D0013B4  251EFFBF   ADDIU FP, T0, -65
9D0013B8  2610FFFF   ADDIU S0, S0, -1
9D0013BC  02B01821   ADDU V1, S5, S0
9D0013C0  A0600000   SB ZERO, 0(V1)
9D0013C4  00512823   SUBU A1, V0, S1
9D0013C8  32CB0002   ANDI T3, S6, 2
9D0013CC  2FDE001A   SLTIU FP, FP, 26
9D0013D0  2A020002   SLTI V0, S0, 2
9D0013D4  1440000A   BNE V0, ZERO, __fmt_x_needed
9D0013D8  02971025   OR V0, S4, S7
9D0013DC  14400034   BNE V0, ZERO, __fmt_x_needed
9D0013E0  3283000F   ANDI V1, S4, 15
9D0013E4  00B11021   ADDU V0, A1, S1
9D0013E8  1C400032   BGTZ V0, __fmt_x_needed
9D0013EC  2864000A   SLTI A0, V1, 10
9D0013F0  1A200003   BLEZ S1, __fmt_x_needed
9D0013F4  00000000   NOP
9D0013F8  1560002E   BNE T3, ZERO, __fmt_x_needed
9D0013FC  00000000   NOP
9D001400  1120000B   BEQ T1, ZERO, __fmt_x_needed
9D001404  00000000   NOP
9D001408  8CC20000   LW V0, 0(A2)
9D00140C  8CC30004   LW V1, 4(A2)
9D001410  00431025   OR V0, V0, V1
9D001414  10400006   BEQ V0, ZERO, __fmt_x_needed
9D001418  02B01021   ADDU V0, S5, S0
9D00141C  2610FFFE   ADDIU S0, S0, -2
9D001420  A048FFFF   SB T0, -1(V0)
9D001424  24030030   ADDIU V1, ZERO, 48
9D001428  02B01021   ADDU V0, S5, S0
9D00142C  A0430000   SB V1, 0(V0)
9D001430  11400004   BEQ T2, ZERO, __fmt_x_needed
9D001434  24030020   ADDIU V1, ZERO, 32
9D001438  2610FFFF   ADDIU S0, S0, -1
9D00143C  02B01021   ADDU V0, S5, S0
9D001440  A0430000   SB V1, 0(V0)
9D001444  8E460010   LW A2, 16(S2)
9D001448  AFB60010   SW S6, 16(SP)
9D00144C  02B02821   ADDU A1, S5, S0
9D001450  24C6FFFF   ADDIU A2, A2, -1
9D001454  00D03023   SUBU A2, A2, S0
9D001458  0F400893   JAL __pad
9D00145C  02602025   OR A0, S3, ZERO
9D001460  8E630004   LW V1, 4(S3)
9D001464  30630100   ANDI V1, V1, 256
9D001468  10600004   BEQ V1, ZERO, __fmt_x_needed
9D00146C  8FBF0054   LW RA, 84(SP)
9D001470  8E430004   LW V1, 4(S2)
9D001474  0043202A   SLT A0, V0, V1
9D001478  0064100B   MOVN V0, V1, A0
9D00147C  8FBE0050   LW FP, 80(SP)
9D001480  8FB7004C   LW S7, 76(SP)
9D001484  8FB60048   LW S6, 72(SP)
9D001488  8FB50044   LW S5, 68(SP)
9D00148C  8FB40040   LW S4, 64(SP)
9D001490  8FB3003C   LW S3, 60(SP)
9D001494  8FB20038   LW S2, 56(SP)
9D001498  8FB10034   LW S1, 52(SP)
9D00149C  8FB00030   LW S0, 48(SP)
9D0014A0  03E00008   JR RA
9D0014A4  27BD0058   ADDIU SP, SP, 88
9D0014A8  1000FFB4   BEQ ZERO, ZERO, __fmt_x_needed
9D0014AC  24020001   ADDIU V0, ZERO, 1
9D0014B0  2864000A   SLTI A0, V1, 10
9D0014B4  10800002   BEQ A0, ZERO, __fmt_x_needed
9D0014B8  24620057   ADDIU V0, V1, 87
9D0014BC  24620030   ADDIU V0, V1, 48
9D0014C0  13C00015   BEQ FP, ZERO, __fmt_x_needed
9D0014C4  34430020   ORI V1, V0, 32
9D0014C8  2463FF9F   ADDIU V1, V1, -97
9D0014CC  2C63001A   SLTIU V1, V1, 26
9D0014D0  50600012   BEQL V1, ZERO, __fmt_x_needed
9D0014D4  2610FFFF   ADDIU S0, S0, -1
9D0014D8  00402025   OR A0, V0, ZERO
9D0014DC  AFAB0028   SW T3, 40(SP)
9D0014E0  AFA50024   SW A1, 36(SP)
9D0014E4  AFA80064   SW T0, 100(SP)
9D0014E8  AFA60060   SW A2, 96(SP)
9D0014EC  AFA70020   SW A3, 32(SP)
9D0014F0  AFAA001C   SW T2, 28(SP)
9D0014F4  0F400CA1   JAL toupper
9D0014F8  AFA90018   SW T1, 24(SP)
9D0014FC  8FAB0028   LW T3, 40(SP)
9D001500  8FA50024   LW A1, 36(SP)
9D001504  8FA80064   LW T0, 100(SP)
9D001508  8FA60060   LW A2, 96(SP)
9D00150C  8FA70020   LW A3, 32(SP)
9D001510  8FAA001C   LW T2, 28(SP)
9D001514  8FA90018   LW T1, 24(SP)
9D001518  2610FFFF   ADDIU S0, S0, -1
9D00151C  02B01821   ADDU V1, S5, S0
9D001520  A0620000   SB V0, 0(V1)
9D001524  0014A102   SRL S4, S4, 4
9D001528  00171700   SLL V0, S7, 28
9D00152C  2631FFFF   ADDIU S1, S1, -1
9D001530  0054A025   OR S4, V0, S4
9D001534  1000FFA6   BEQ ZERO, ZERO, __fmt_x_needed
9D001538  0017B902   SRL S7, S7, 4
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-WOZ14-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/stdio/mchp/__fmt_u.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D001EEC  8C820004   LW V0, 4(A0)
9D001EF0  27BDFFC0   ADDIU SP, SP, -64
9D001EF4  AFBE0038   SW FP, 56(SP)
9D001EF8  AFB40028   SW S4, 40(SP)
9D001EFC  AFB20020   SW S2, 32(SP)
9D001F00  AFB1001C   SW S1, 28(SP)
9D001F04  AFBF003C   SW RA, 60(SP)
9D001F08  AFB70034   SW S7, 52(SP)
9D001F0C  AFB60030   SW S6, 48(SP)
9D001F10  AFB5002C   SW S5, 44(SP)
9D001F14  AFB30024   SW S3, 36(SP)
9D001F18  AFB00018   SW S0, 24(SP)
9D001F1C  00C08825   OR S1, A2, ZERO
9D001F20  00E09025   OR S2, A3, ZERO
9D001F24  8FB40054   LW S4, 84(SP)
9D001F28  04410002   BGEZ V0, 0x9D001F34
9D001F2C  8FBE0058   LW FP, 88(SP)
9D001F30  24020001   ADDIU V0, ZERO, 1
9D001F34  8C900010   LW S0, 16(A0)
9D001F38  8C95000C   LW S5, 12(A0)
9D001F3C  8FD70000   LW S7, 0(FP)
9D001F40  8FB30050   LW S3, 80(SP)
9D001F44  2610FFFF   ADDIU S0, S0, -1
9D001F48  02B01821   ADDU V1, S5, S0
9D001F4C  A0600000   SB ZERO, 0(V1)
9D001F50  24090001   ADDIU T1, ZERO, 1
9D001F54  00534023   SUBU T0, V0, S3
9D001F58  32F70002   ANDI S7, S7, 2
9D001F5C  0014B7C3   SRA S6, S4, 31
9D001F60  1E000010   BGTZ S0, 0x9D001FA4
9D001F64  02321025   OR V0, S1, S2
9D001F68  5120002C   BEQL T1, ZERO, 0x9D00201C
9D001F6C  8FC20000   LW V0, 0(FP)
9D001F70  8FBF003C   LW RA, 60(SP)
9D001F74  02001025   OR V0, S0, ZERO
9D001F78  8FBE0038   LW FP, 56(SP)
9D001F7C  8FB70034   LW S7, 52(SP)
9D001F80  8FB60030   LW S6, 48(SP)
9D001F84  8FB5002C   LW S5, 44(SP)
9D001F88  8FB40028   LW S4, 40(SP)
9D001F8C  8FB30024   LW S3, 36(SP)
9D001F90  8FB20020   LW S2, 32(SP)
9D001F94  8FB1001C   LW S1, 28(SP)
9D001F98  8FB00018   LW S0, 24(SP)
9D001F9C  03E00008   JR RA
9D001FA0  27BD0040   ADDIU SP, SP, 64
9D001FA4  14400007   BNE V0, ZERO, 0x9D001FC4
9D001FA8  01131021   ADDU V0, T0, S3
9D001FAC  1C400006   BGTZ V0, 0x9D001FC8
9D001FB0  02202025   OR A0, S1, ZERO
9D001FB4  1A60FFEC   BLEZ S3, 0x9D001F68
9D001FB8  00000000   NOP
9D001FBC  12E0FFEA   BEQ S7, ZERO, 0x9D001F68
9D001FC0  00000000   NOP
9D001FC4  02202025   OR A0, S1, ZERO
9D001FC8  02402825   OR A1, S2, ZERO
9D001FCC  02803025   OR A2, S4, ZERO
9D001FD0  02C03825   OR A3, S6, ZERO
9D001FD4  AFA80014   SW T0, 20(SP)
9D001FD8  0F4003DF   JAL __umoddi3
9D001FDC  2610FFFF   ADDIU S0, S0, -1
9D001FE0  AFA20010   SW V0, 16(SP)
9D001FE4  02B01821   ADDU V1, S5, S0
9D001FE8  24420030   ADDIU V0, V0, 48
9D001FEC  02202025   OR A0, S1, ZERO
9D001FF0  02402825   OR A1, S2, ZERO
9D001FF4  A0620000   SB V0, 0(V1)
9D001FF8  02803025   OR A2, S4, ZERO
9D001FFC  0F4002F0   JAL __udivdi3
9D002000  02C03825   OR A3, S6, ZERO
9D002004  2673FFFF   ADDIU S3, S3, -1
9D002008  00408825   OR S1, V0, ZERO
9D00200C  00609025   OR S2, V1, ZERO
9D002010  8FA80014   LW T0, 20(SP)
9D002014  1000FFD2   BEQ ZERO, ZERO, 0x9D001F60
9D002018  8FA90010   LW T1, 16(SP)
9D00201C  7C022104   INS V0, ZERO, 4, 1
9D002020  1000FFD3   BEQ ZERO, ZERO, 0x9D001F70
9D002024  AFC20000   SW V0, 0(FP)
9D002908  8CA20000   LW V0, 0(A1)
9D00290C  8CA30004   LW V1, 4(A1)
9D002910  27BDFFC0   ADDIU SP, SP, -64
9D002914  AFB30038   SW S3, 56(SP)
9D002918  AFB20034   SW S2, 52(SP)
9D00291C  AFB10030   SW S1, 48(SP)
9D002920  AFB0002C   SW S0, 44(SP)
9D002924  AFBF003C   SW RA, 60(SP)
9D002928  00808825   OR S1, A0, ZERO
9D00292C  00A08025   OR S0, A1, ZERO
9D002930  8CB20008   LW S2, 8(A1)
9D002934  AFA20020   SW V0, 32(SP)
9D002938  04600003   BLTZ V1, __fmt_u_needed
9D00293C  8CB3000C   LW S3, 12(A1)
9D002940  7C020844   INS V0, ZERO, 1, 1
9D002944  AFA20020   SW V0, 32(SP)
9D002948  27A20020   ADDIU V0, SP, 32
9D00294C  AFA20018   SW V0, 24(SP)
9D002950  2402000A   ADDIU V0, ZERO, 10
9D002954  AFA20014   SW V0, 20(SP)
9D002958  AFB20010   SW S2, 16(SP)
9D00295C  8CC70004   LW A3, 4(A2)
9D002960  8CC60000   LW A2, 0(A2)
9D002964  0F4007BB   JAL __cvt_u
9D002968  02002025   OR A0, S0, ZERO
9D00296C  8E060010   LW A2, 16(S0)
9D002970  8FA30020   LW V1, 32(SP)
9D002974  02403825   OR A3, S2, ZERO
9D002978  24C6FFFF   ADDIU A2, A2, -1
9D00297C  AFA30010   SW V1, 16(SP)
9D002980  00C23023   SUBU A2, A2, V0
9D002984  02622821   ADDU A1, S3, V0
9D002988  0F400893   JAL __pad
9D00298C  02202025   OR A0, S1, ZERO
9D002990  8E230004   LW V1, 4(S1)
9D002994  30630100   ANDI V1, V1, 256
9D002998  10600004   BEQ V1, ZERO, __fmt_u_needed
9D00299C  8FBF003C   LW RA, 60(SP)
9D0029A0  8E030004   LW V1, 4(S0)
9D0029A4  0043202A   SLT A0, V0, V1
9D0029A8  0064100B   MOVN V0, V1, A0
9D0029AC  8FB30038   LW S3, 56(SP)
9D0029B0  8FB20034   LW S2, 52(SP)
9D0029B4  8FB10030   LW S1, 48(SP)
9D0029B8  8FB0002C   LW S0, 44(SP)
9D0029BC  03E00008   JR RA
9D0029C0  27BD0040   ADDIU SP, SP, 64
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-WOZ14-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/stdio/mchp/__fmt_s.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D002A78  3C036C75   LUI V1, 27765
9D002A7C  27BDFFC8   ADDIU SP, SP, -56
9D002A80  24636E28   ADDIU V1, V1, 28200
9D002A84  AFA30018   SW V1, 24(SP)
9D002A88  2403296C   ADDIU V1, ZERO, 10604
9D002A8C  AFB20028   SW S2, 40(SP)
9D002A90  AFB00020   SW S0, 32(SP)
9D002A94  AFBF0034   SW RA, 52(SP)
9D002A98  AFB40030   SW S4, 48(SP)
9D002A9C  AFB3002C   SW S3, 44(SP)
9D002AA0  AFB10024   SW S1, 36(SP)
9D002AA4  00809025   OR S2, A0, ZERO
9D002AA8  00E01025   OR V0, A3, ZERO
9D002AAC  A7A3001C   SH V1, 28(SP)
9D002AB0  A3A0001E   SB ZERO, 30(SP)
9D002AB4  10C00002   BEQ A2, ZERO, __fmt_s_needed, __fmt_0_needed
9D002AB8  27B00018   ADDIU S0, SP, 24
9D002ABC  00C08025   OR S0, A2, ZERO
9D002AC0  8CB10004   LW S1, 4(A1)
9D002AC4  8CB30008   LW S3, 8(A1)
9D002AC8  14400003   BNE V0, ZERO, __fmt_s_needed, __fmt_0_needed
9D002ACC  8CB40000   LW S4, 0(A1)
9D002AD0  0F40070D   JAL strlen
9D002AD4  02002025   OR A0, S0, ZERO
9D002AD8  06200002   BLTZ S1, __fmt_s_needed, __fmt_0_needed
9D002ADC  0222182B   SLTU V1, S1, V0
9D002AE0  0223100B   MOVN V0, S1, V1
9D002AE4  AFB40010   SW S4, 16(SP)
9D002AE8  02603825   OR A3, S3, ZERO
9D002AEC  02002825   OR A1, S0, ZERO
9D002AF0  02402025   OR A0, S2, ZERO
9D002AF4  0F400893   JAL __pad
9D002AF8  00403025   OR A2, V0, ZERO
9D002AFC  8FBF0034   LW RA, 52(SP)
9D002B00  8FB40030   LW S4, 48(SP)
9D002B04  8FB3002C   LW S3, 44(SP)
9D002B08  8FB20028   LW S2, 40(SP)
9D002B0C  8FB10024   LW S1, 36(SP)
9D002B10  8FB00020   LW S0, 32(SP)
9D002B14  03E00008   JR RA
9D002B18  27BD0038   ADDIU SP, SP, 56
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-WOZ14-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/stdio/mchp/__fmt_o.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00234C  8CA20000   LW V0, 0(A1)
9D002350  8CA30004   LW V1, 4(A1)
9D002354  27BDFFC0   ADDIU SP, SP, -64
9D002358  AFB30038   SW S3, 56(SP)
9D00235C  AFB20034   SW S2, 52(SP)
9D002360  AFB10030   SW S1, 48(SP)
9D002364  AFB0002C   SW S0, 44(SP)
9D002368  AFBF003C   SW RA, 60(SP)
9D00236C  00809025   OR S2, A0, ZERO
9D002370  00A08025   OR S0, A1, ZERO
9D002374  8CB30008   LW S3, 8(A1)
9D002378  AFA20020   SW V0, 32(SP)
9D00237C  04600003   BLTZ V1, __fmt_o_needed
9D002380  8CB1000C   LW S1, 12(A1)
9D002384  7C020844   INS V0, ZERO, 1, 1
9D002388  AFA20020   SW V0, 32(SP)
9D00238C  27A20020   ADDIU V0, SP, 32
9D002390  AFA20018   SW V0, 24(SP)
9D002394  24020008   ADDIU V0, ZERO, 8
9D002398  AFA20014   SW V0, 20(SP)
9D00239C  AFB30010   SW S3, 16(SP)
9D0023A0  8CC70004   LW A3, 4(A2)
9D0023A4  8CC60000   LW A2, 0(A2)
9D0023A8  0F4007BB   JAL __cvt_u
9D0023AC  02002025   OR A0, S0, ZERO
9D0023B0  8FA30020   LW V1, 32(SP)
9D0023B4  30630010   ANDI V1, V1, 16
9D0023B8  10600004   BEQ V1, ZERO, __fmt_o_needed
9D0023BC  24040030   ADDIU A0, ZERO, 48
9D0023C0  2442FFFF   ADDIU V0, V0, -1
9D0023C4  02221821   ADDU V1, S1, V0
9D0023C8  A0640000   SB A0, 0(V1)
9D0023CC  8FA30020   LW V1, 32(SP)
9D0023D0  30630008   ANDI V1, V1, 8
9D0023D4  10600004   BEQ V1, ZERO, __fmt_o_needed
9D0023D8  24040020   ADDIU A0, ZERO, 32
9D0023DC  2442FFFF   ADDIU V0, V0, -1
9D0023E0  02221821   ADDU V1, S1, V0
9D0023E4  A0640000   SB A0, 0(V1)
9D0023E8  8E060010   LW A2, 16(S0)
9D0023EC  8FA30020   LW V1, 32(SP)
9D0023F0  02603825   OR A3, S3, ZERO
9D0023F4  24C6FFFF   ADDIU A2, A2, -1
9D0023F8  AFA30010   SW V1, 16(SP)
9D0023FC  00C23023   SUBU A2, A2, V0
9D002400  02222821   ADDU A1, S1, V0
9D002404  0F400893   JAL __pad
9D002408  02402025   OR A0, S2, ZERO
9D00240C  8E430004   LW V1, 4(S2)
9D002410  30630100   ANDI V1, V1, 256
9D002414  10600004   BEQ V1, ZERO, __fmt_o_needed
9D002418  8FBF003C   LW RA, 60(SP)
9D00241C  8E030004   LW V1, 4(S0)
9D002420  0043202A   SLT A0, V0, V1
9D002424  0064100B   MOVN V0, V1, A0
9D002428  8FB30038   LW S3, 56(SP)
9D00242C  8FB20034   LW S2, 52(SP)
9D002430  8FB10030   LW S1, 48(SP)
9D002434  8FB0002C   LW S0, 44(SP)
9D002438  03E00008   JR RA
9D00243C  27BD0040   ADDIU SP, SP, 64
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-WOZ14-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/stdio/mchp/__fmt_d.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D001D9C  27BDFFC0   ADDIU SP, SP, -64
9D001DAC  8C870004   LW A3, 4(A0)
9D001DB0  8CA20000   LW V0, 0(A1)
9D001DB4  AFB40038   SW S4, 56(SP)
9D001DB8  0007A7C2   SRL S4, A3, 31
9D001DBC  AFB30034   SW S3, 52(SP)
9D001DC0  AFB20030   SW S2, 48(SP)
9D001DC4  AFB00028   SW S0, 40(SP)
9D001DC8  AFBF003C   SW RA, 60(SP)
9D001DCC  00A08025   OR S0, A1, ZERO
9D001DD0  8CA30004   LW V1, 4(A1)
9D001DD4  8CB20008   LW S2, 8(A1)
9D001DD8  AFA20020   SW V0, 32(SP)
9D001DDC  8CB3000C   LW S3, 12(A1)
9D001DE0  1280003E   BEQ S4, ZERO, __fmt_d_needed
9D001DE4  8CC60000   LW A2, 0(A2)
9D001DE8  00063023   SUBU A2, ZERO, A2
9D001DEC  0006202B   SLTU A0, ZERO, A2
9D001DF0  00073823   SUBU A3, ZERO, A3
9D001DF4  04600008   BLTZ V1, __fmt_d_needed
9D001DF8  00E43823   SUBU A3, A3, A0
9D001DFC  7C020844   INS V0, ZERO, 1, 1
9D001E00  16800005   BNE S4, ZERO, __fmt_d_needed
9D001E04  AFA20020   SW V0, 32(SP)
9D001E08  8FA20020   LW V0, 32(SP)
9D001E0C  30430004   ANDI V1, V0, 4
9D001E10  1060002A   BEQ V1, ZERO, __fmt_d_needed
9D001E14  7C4200C0   EXT V0, V0, 3, 1
9D001E18  2642FFFF   ADDIU V0, S2, -1
9D001E1C  27A30020   ADDIU V1, SP, 32
9D001E20  AFA30018   SW V1, 24(SP)
9D001E24  2403000A   ADDIU V1, ZERO, 10
9D001E28  AFA30014   SW V1, 20(SP)
9D001E2C  AFA20010   SW V0, 16(SP)
9D001E30  0F4007BB   JAL __cvt_u
9D001E34  02002025   OR A0, S0, ZERO
9D001E38  16800006   BNE S4, ZERO, __fmt_d_needed
9D001E3C  2403002D   ADDIU V1, ZERO, 45
9D001E40  8FA30020   LW V1, 32(SP)
9D001E44  30640004   ANDI A0, V1, 4
9D001E48  1080001E   BEQ A0, ZERO, __fmt_d_needed
9D001E4C  30630008   ANDI V1, V1, 8
9D001E50  2403002B   ADDIU V1, ZERO, 43
9D001E54  2442FFFF   ADDIU V0, V0, -1
9D001E58  02622021   ADDU A0, S3, V0
9D001E5C  A0830000   SB V1, 0(A0)
9D001E60  8E060010   LW A2, 16(S0)
9D001E64  8FA30020   LW V1, 32(SP)
9D001E68  02403825   OR A3, S2, ZERO
9D001E6C  24C6FFFF   ADDIU A2, A2, -1
9D001E70  AFA30010   SW V1, 16(SP)
9D001E74  00C23023   SUBU A2, A2, V0
9D001E78  02622821   ADDU A1, S3, V0
9D001E7C  0F400893   JAL __pad
9D001E80  02202025   OR A0, S1, ZERO
9D001E84  8E230004   LW V1, 4(S1)
9D001E88  30630100   ANDI V1, V1, 256
9D001E8C  10600004   BEQ V1, ZERO, __fmt_d_needed
9D001E90  8FBF003C   LW RA, 60(SP)
9D001E94  8E030004   LW V1, 4(S0)
9D001E98  0043202A   SLT A0, V0, V1
9D001E9C  0064100B   MOVN V0, V1, A0
9D001EA0  8FB40038   LW S4, 56(SP)
9D001EA4  8FB30034   LW S3, 52(SP)
9D001EA8  8FB20030   LW S2, 48(SP)
9D001EAC  8FB1002C   LW S1, 44(SP)
9D001EB0  8FB00028   LW S0, 40(SP)
9D001EB4  03E00008   JR RA
9D001EB8  27BD0040   ADDIU SP, SP, 64
9D001EBC  1000FFD7   BEQ ZERO, ZERO, __fmt_d_needed
9D001EC0  02421023   SUBU V0, S2, V0
9D001EC4  1060FFE6   BEQ V1, ZERO, __fmt_d_needed
9D001EC8  24040020   ADDIU A0, ZERO, 32
9D001ECC  2442FFFF   ADDIU V0, V0, -1
9D001ED0  02621821   ADDU V1, S3, V0
9D001ED4  1000FFE2   BEQ ZERO, ZERO, __fmt_d_needed
9D001ED8  A0640000   SB A0, 0(V1)
9D001EDC  0463FFC8   BGEZL V1, __fmt_d_needed
9D001EE0  7C020844   INS V0, ZERO, 1, 1
9D001EE4  1000FFC9   BEQ ZERO, ZERO, __fmt_d_needed
9D001EE8  8FA20020   LW V0, 32(SP)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-WOZ14-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/smartio/__sio_sprintf_doux.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
00000008  00000000   NOP
00000010  00000000   NOP
00000018  00000000   NOP
00000020  00000000   NOP
00000028  00000000   NOP
00000030  00000000   NOP
00000038  00000000   NOP
00000040  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-WOZ14-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/smartio/__int_vsprintf.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00318C  00C03825   OR A3, A2, ZERO
9D003190  00A03025   OR A2, A1, ZERO
9D003194  3C057FFF   LUI A1, 32767
9D003198  27BDFFE8   ADDIU SP, SP, -24
9D00319C  AFBF0014   SW RA, 20(SP)
9D0031A0  0F400B4C   JAL __vsnprintf
9D0031A4  34A5FFFF   ORI A1, A1, -1
9D0031A8  8FBF0014   LW RA, 20(SP)
9D0031AC  03E00008   JR RA
9D0031B0  27BD0018   ADDIU SP, SP, 24
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-WOZ14-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/smartio/__int_vsnprintf.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D002D30  27BDFFC8   ADDIU SP, SP, -56
9D002D34  2403FFFF   ADDIU V1, ZERO, -1
9D002D38  AFA30010   SW V1, 16(SP)
9D002D3C  24030102   ADDIU V1, ZERO, 258
9D002D40  00A01025   OR V0, A1, ZERO
9D002D44  AFBF0034   SW RA, 52(SP)
9D002D48  00C02825   OR A1, A2, ZERO
9D002D4C  AFA30014   SW V1, 20(SP)
9D002D50  14800002   BNE A0, ZERO, 0x9D002D5C
9D002D54  00E03025   OR A2, A3, ZERO
9D002D58  27A4002C   ADDIU A0, SP, 44
9D002D5C  AFA40018   SW A0, 24(SP)
9D002D60  AFA2001C   SW V0, 28(SP)
9D002D64  10400002   BEQ V0, ZERO, 0x9D002D70
9D002D68  00001825   OR V1, ZERO, ZERO
9D002D6C  2443FFFF   ADDIU V1, V0, -1
9D002D70  04410008   BGEZ V0, 0x9D002D94
9D002D74  AFA30020   SW V1, 32(SP)
9D002D78  3C028000   LUI V0, -32768
9D002D7C  2403004F   ADDIU V1, ZERO, 79
9D002D80  AC4303D8   SW V1, 984(V0)
9D002D84  2402FFFF   ADDIU V0, ZERO, -1
9D002D88  8FBF0034   LW RA, 52(SP)
9D002D8C  03E00008   JR RA
9D002D90  27BD0038   ADDIU SP, SP, 56
9D002D94  AFA40028   SW A0, 40(SP)
9D002D98  AFA40024   SW A0, 36(SP)
9D002D9C  A0800000   SB ZERO, 0(A0)
9D002DA0  0F400C3F   JAL __vfprintf
9D002DA4  27A40010   ADDIU A0, SP, 16
9D002DA8  1000FFF8   BEQ ZERO, ZERO, 0x9D002D8C
9D002DAC  8FBF0034   LW RA, 52(SP)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-WOZ14-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/smartio/__int_vfprintf.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D0030FC  27BDFFE0   ADDIU SP, SP, -32
9D003100  AFB00018   SW S0, 24(SP)
9D003104  AFA60010   SW A2, 16(SP)
9D003108  00808025   OR S0, A0, ZERO
9D00310C  AFBF001C   SW RA, 28(SP)
9D003110  0F400098   JAL __printf_core
9D003114  27A60010   ADDIU A2, SP, 16
9D003118  8E030004   LW V1, 4(S0)
9D00311C  8FBF001C   LW RA, 28(SP)
9D003120  2404FFFF   ADDIU A0, ZERO, -1
9D003124  30630010   ANDI V1, V1, 16
9D003128  0083100B   MOVN V0, A0, V1
9D00312C  8FB00018   LW S0, 24(SP)
9D003130  03E00008   JR RA
9D003134  27BD0020   ADDIU SP, SP, 32
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-WOZ14-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/smartio/__int_sprintf.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D003164  27BDFFE0   ADDIU SP, SP, -32
9D00316C  27A60028   ADDIU A2, SP, 40
9D003170  AFBF001C   SW RA, 28(SP)
9D003174  AFA7002C   SW A3, 44(SP)
9D003178  0F400C63   JAL __vsprintf
9D00317C  AFA60010   SW A2, 16(SP)
9D003180  8FBF001C   LW RA, 28(SP)
9D003184  03E00008   JR RA
9D003188  27BD0020   ADDIU SP, SP, 32
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-WOZ14-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/ctype/toupper.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
00000008  00000000   NOP
00000010  00000000   NOP
9D003284  2483FF9F   ADDIU V1, A0, -97
9D003288  2C63001A   SLTIU V1, V1, 26
9D00328C  10600002   BEQ V1, ZERO, 0x9D003298
9D003290  00801025   OR V0, A0, ZERO
9D003294  3082005F   ANDI V0, A0, 95
9D003298  03E00008   JR RA
9D00329C  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-WOZ14-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/ctype/tolower.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
00000008  00000000   NOP
00000010  00000000   NOP
9D003268  2483FFBF   ADDIU V1, A0, -65
9D00326C  2C63001A   SLTIU V1, V1, 26
9D003270  10600002   BEQ V1, ZERO, 0x9D00327C
9D003274  00801025   OR V0, A0, ZERO
9D003278  34820020   ORI V0, A0, 32
9D00327C  03E00008   JR RA
9D003280  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-WOZ14-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/include/ctype.h
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D002DB0  24050020   ADDIU A1, ZERO, 32
9D002DB4  80820000   LB V0, 0(A0)
9D002DB8  1045000D   BEQ V0, A1, 0x9D002DF0
9D002DBC  2443FFF7   ADDIU V1, V0, -9
9D002DC0  2C630005   SLTIU V1, V1, 5
9D002DC4  1460000A   BNE V1, ZERO, 0x9D002DF0
9D002DC8  2403002B   ADDIU V1, ZERO, 43
9D002DCC  1043000A   BEQ V0, V1, 0x9D002DF8
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-WOZ14-JOB1/src/xc32-gcc/gcc/libgcc/libgcc2.c  -------
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D000BC0  00C04025   OR T0, A2, ZERO
9D000BC4  00E01825   OR V1, A3, ZERO
9D000BC8  00805025   OR T2, A0, ZERO
9D000BCC  14E00098   BNE A3, ZERO, 0x9D000E30
9D000BD0  00A01025   OR V0, A1, ZERO
9D000BD4  00A6302B   SLTU A2, A1, A2
9D000BD8  10C00035   BEQ A2, ZERO, 0x9D000CB0
9D000BDC  00000000   NOP
9D000BE0  71052820   CLZ A1, T0
9D000BE4  10A00006   BEQ A1, ZERO, 0x9D000C00
9D000BE8  00052023   SUBU A0, ZERO, A1
9D000BEC  008A2006   SRLV A0, T2, A0
9D000BF0  00A21004   SLLV V0, V0, A1
9D000BF4  00A84004   SLLV T0, T0, A1
9D000BF8  00821025   OR V0, A0, V0
9D000BFC  00AA5004   SLLV T2, T2, A1
9D000C00  00083402   SRL A2, T0, 16
9D000C04  0046001B   DIVU V0, A2
9D000C08  00C001F4   TEQ A2, ZERO
9D000C0C  3105FFFF   ANDI A1, T0, -1
9D000C10  000A2402   SRL A0, T2, 16
9D000C14  00003812   MFLO A3
9D000C18  00001010   MFHI V0
9D000C1C  00021400   SLL V0, V0, 16
9D000C20  00442025   OR A0, V0, A0
9D000C24  70A74802   MUL T1, A1, A3
9D000C28  0089582B   SLTU T3, A0, T1
9D000C2C  1160000A   BEQ T3, ZERO, 0x9D000C58
9D000C30  00E01025   OR V0, A3, ZERO
9D000C34  00882021   ADDU A0, A0, T0
9D000C38  0088582B   SLTU T3, A0, T0
9D000C3C  15600006   BNE T3, ZERO, 0x9D000C58
9D000C40  24E2FFFF   ADDIU V0, A3, -1
9D000C44  0089582B   SLTU T3, A0, T1
9D000C48  51600004   BEQL T3, ZERO, 0x9D000C5C
9D000C4C  00892023   SUBU A0, A0, T1
9D000C50  24E2FFFE   ADDIU V0, A3, -2
9D000C54  00882021   ADDU A0, A0, T0
9D000C58  00892023   SUBU A0, A0, T1
9D000C5C  0086001B   DIVU A0, A2
9D000C60  00C001F4   TEQ A2, ZERO
9D000C64  00003010   MFHI A2
9D000C68  00063400   SLL A2, A2, 16
9D000C6C  00002012   MFLO A0
9D000C70  70A43802   MUL A3, A1, A0
9D000C74  3145FFFF   ANDI A1, T2, -1
9D000C78  00C52825   OR A1, A2, A1
9D000C7C  00A7482B   SLTU T1, A1, A3
9D000C80  11200008   BEQ T1, ZERO, 0x9D000CA4
9D000C84  00803025   OR A2, A0, ZERO
9D000C88  01052821   ADDU A1, T0, A1
9D000C8C  00A8402B   SLTU T0, A1, T0
9D000C90  15000004   BNE T0, ZERO, 0x9D000CA4
9D000C94  2486FFFF   ADDIU A2, A0, -1
9D000C98  00A7282B   SLTU A1, A1, A3
9D000C9C  54A00001   BNEL A1, ZERO, 0x9D000CA4
9D000CA0  2486FFFE   ADDIU A2, A0, -2
9D000CA4  00021400   SLL V0, V0, 16
9D000CA8  03E00008   JR RA
9D000CAC  00461025   OR V0, V0, A2
9D000CB0  15000004   BNE T0, ZERO, 0x9D000CC4
9D000CB4  24020001   ADDIU V0, ZERO, 1
9D000CB8  0048001B   DIVU V0, T0
9D000CBC  010001F4   TEQ T0, ZERO
9D000CC0  00004012   MFLO T0
9D000CC4  710B5820   CLZ T3, T0
9D000CC8  15600023   BNE T3, ZERO, 0x9D000D58
9D000CCC  24070020   ADDIU A3, ZERO, 32
9D000CD0  00A82823   SUBU A1, A1, T0
9D000CD4  24030001   ADDIU V1, ZERO, 1
9D000CD8  00083402   SRL A2, T0, 16
9D000CDC  00A6001B   DIVU A1, A2
9D000CE0  00C001F4   TEQ A2, ZERO
9D000CE4  3107FFFF   ANDI A3, T0, -1
9D000CE8  000A2402   SRL A0, T2, 16
9D000CEC  00002812   MFLO A1
9D000CF0  00001010   MFHI V0
9D000CF4  00021400   SLL V0, V0, 16
9D000CF8  00442025   OR A0, V0, A0
9D000CFC  70E54802   MUL T1, A3, A1
9D000D00  0089582B   SLTU T3, A0, T1
9D000D04  1160000A   BEQ T3, ZERO, 0x9D000D30
9D000D08  00A01025   OR V0, A1, ZERO
9D000D0C  00882021   ADDU A0, A0, T0
9D000D10  0088582B   SLTU T3, A0, T0
9D000D14  15600006   BNE T3, ZERO, 0x9D000D30
9D000D18  24A2FFFF   ADDIU V0, A1, -1
9D000D1C  0089582B   SLTU T3, A0, T1
9D000D20  51600004   BEQL T3, ZERO, 0x9D000D34
9D000D24  00892023   SUBU A0, A0, T1
9D000D28  24A2FFFE   ADDIU V0, A1, -2
9D000D2C  00882021   ADDU A0, A0, T0
9D000D30  00892023   SUBU A0, A0, T1
9D000D34  0086001B   DIVU A0, A2
9D000D38  00C001F4   TEQ A2, ZERO
9D000D3C  314AFFFF   ANDI T2, T2, -1
9D000D40  00002810   MFHI A1
9D000D44  00052C00   SLL A1, A1, 16
9D000D48  00AA2825   OR A1, A1, T2
9D000D4C  00002012   MFLO A0
9D000D50  1000FFCA   BEQ ZERO, ZERO, 0x9D000C7C
9D000D54  70E43802   MUL A3, A3, A0
9D000D58  00EB3823   SUBU A3, A3, T3
9D000D5C  01684004   SLLV T0, T0, T3
9D000D60  00E44806   SRLV T1, A0, A3
9D000D64  00083402   SRL A2, T0, 16
9D000D68  00E53806   SRLV A3, A1, A3
9D000D6C  00E6001B   DIVU A3, A2
9D000D70  00C001F4   TEQ A2, ZERO
9D000D74  01651004   SLLV V0, A1, T3
9D000D78  01224825   OR T1, T1, V0
9D000D7C  3102FFFF   ANDI V0, T0, -1
9D000D80  00091C02   SRL V1, T1, 16
9D000D84  00002812   MFLO A1
9D000D88  00003810   MFHI A3
9D000D8C  00073C00   SLL A3, A3, 16
9D000D90  00E33825   OR A3, A3, V1
9D000D94  70455002   MUL T2, V0, A1
9D000D98  00EA602B   SLTU T4, A3, T2
9D000D9C  1180000A   BEQ T4, ZERO, 0x9D000DC8
9D000DA0  00A01825   OR V1, A1, ZERO
9D000DA4  00E83821   ADDU A3, A3, T0
9D000DA8  00E8602B   SLTU T4, A3, T0
9D000DAC  15800006   BNE T4, ZERO, 0x9D000DC8
9D000DB0  24A3FFFF   ADDIU V1, A1, -1
9D000DB4  00EA602B   SLTU T4, A3, T2
9D000DB8  51800004   BEQL T4, ZERO, 0x9D000DCC
9D000DBC  00EA3823   SUBU A3, A3, T2
9D000DC0  24A3FFFE   ADDIU V1, A1, -2
9D000DC4  00E83821   ADDU A3, A3, T0
9D000DC8  00EA3823   SUBU A3, A3, T2
9D000DCC  00E6001B   DIVU A3, A2
9D000DD0  00C001F4   TEQ A2, ZERO
9D000DD4  3125FFFF   ANDI A1, T1, -1
9D000DD8  00003012   MFLO A2
9D000DDC  00003810   MFHI A3
9D000DE0  00073C00   SLL A3, A3, 16
9D000DE4  00E52825   OR A1, A3, A1
9D000DE8  70461002   MUL V0, V0, A2
9D000DEC  00A2482B   SLTU T1, A1, V0
9D000DF0  1120000A   BEQ T1, ZERO, 0x9D000E1C
9D000DF4  00C03825   OR A3, A2, ZERO
9D000DF8  00A82821   ADDU A1, A1, T0
9D000DFC  00A8482B   SLTU T1, A1, T0
9D000E00  15200006   BNE T1, ZERO, 0x9D000E1C
9D000E04  24C7FFFF   ADDIU A3, A2, -1
9D000E08  00A2482B   SLTU T1, A1, V0
9D000E0C  51200004   BEQL T1, ZERO, 0x9D000E20
9D000E10  00031C00   SLL V1, V1, 16
9D000E14  24C7FFFE   ADDIU A3, A2, -2
9D000E18  00A82821   ADDU A1, A1, T0
9D000E1C  00031C00   SLL V1, V1, 16
9D000E20  01645004   SLLV T2, A0, T3
9D000E24  00A22823   SUBU A1, A1, V0
9D000E28  1000FFAB   BEQ ZERO, ZERO, 0x9D000CD8
9D000E2C  00671825   OR V1, V1, A3
9D000E30  00A7402B   SLTU T0, A1, A3
9D000E34  00001825   OR V1, ZERO, ZERO
9D000E38  1500004E   BNE T0, ZERO, 0x9D000F74
9D000E3C  00001025   OR V0, ZERO, ZERO
9D000E40  70EA5020   CLZ T2, A3
9D000E44  15400007   BNE T2, ZERO, 0x9D000E64
9D000E48  24090020   ADDIU T1, ZERO, 32
9D000E4C  00E5282B   SLTU A1, A3, A1
9D000E50  14A00048   BNE A1, ZERO, 0x9D000F74
9D000E54  24020001   ADDIU V0, ZERO, 1
9D000E58  0086102B   SLTU V0, A0, A2
9D000E5C  03E00008   JR RA
9D000E60  38420001   XORI V0, V0, 1
9D000E64  012A4823   SUBU T1, T1, T2
9D000E68  01261006   SRLV V0, A2, T1
9D000E6C  01473804   SLLV A3, A3, T2
9D000E70  00473825   OR A3, V0, A3
9D000E74  01451804   SLLV V1, A1, T2
9D000E78  00074402   SRL T0, A3, 16
9D000E7C  01252806   SRLV A1, A1, T1
9D000E80  00A8001B   DIVU A1, T0
9D000E84  010001F4   TEQ T0, ZERO
9D000E88  30EBFFFF   ANDI T3, A3, -1
9D000E8C  01241006   SRLV V0, A0, T1
9D000E90  00431025   OR V0, V0, V1
9D000E94  00021C02   SRL V1, V0, 16
9D000E98  00002812   MFLO A1
9D000E9C  00004810   MFHI T1
9D000EA0  00094C00   SLL T1, T1, 16
9D000EA4  01234825   OR T1, T1, V1
9D000EA8  71656002   MUL T4, T3, A1
9D000EAC  012C682B   SLTU T5, T1, T4
9D000EB0  11A0000A   BEQ T5, ZERO, 0x9D000EDC
9D000EB4  00A01825   OR V1, A1, ZERO
9D000EB8  01274821   ADDU T1, T1, A3
9D000EBC  0127682B   SLTU T5, T1, A3
9D000EC0  15A00006   BNE T5, ZERO, 0x9D000EDC
9D000EC4  24A3FFFF   ADDIU V1, A1, -1
9D000EC8  012C682B   SLTU T5, T1, T4
9D000ECC  51A00004   BEQL T5, ZERO, 0x9D000EE0
9D000ED0  012C4823   SUBU T1, T1, T4
9D000ED4  24A3FFFE   ADDIU V1, A1, -2
9D000ED8  01274821   ADDU T1, T1, A3
9D000EDC  012C4823   SUBU T1, T1, T4
9D000EE0  0128001B   DIVU T1, T0
9D000EE4  010001F4   TEQ T0, ZERO
9D000EE8  3045FFFF   ANDI A1, V0, -1
9D000EEC  00004012   MFLO T0
9D000EF0  00004810   MFHI T1
9D000EF4  00094C00   SLL T1, T1, 16
9D000EF8  01252825   OR A1, T1, A1
9D000EFC  71685802   MUL T3, T3, T0
9D000F00  00AB102B   SLTU V0, A1, T3
9D000F04  1040000A   BEQ V0, ZERO, 0x9D000F30
9D000F08  01004825   OR T1, T0, ZERO
9D000F0C  00A72821   ADDU A1, A1, A3
9D000F10  00A7102B   SLTU V0, A1, A3
9D000F14  14400006   BNE V0, ZERO, 0x9D000F30
9D000F18  2509FFFF   ADDIU T1, T0, -1
9D000F1C  00AB102B   SLTU V0, A1, T3
9D000F20  10400004   BEQ V0, ZERO, 0x9D000F34
9D000F24  00031400   SLL V0, V1, 16
9D000F28  2509FFFE   ADDIU T1, T0, -2
9D000F2C  00A72821   ADDU A1, A1, A3
9D000F30  00031400   SLL V0, V1, 16
9D000F34  01463004   SLLV A2, A2, T2
9D000F38  00491025   OR V0, V0, T1
9D000F3C  00C20019   MULTU 0, A2, V0
9D000F40  00AB2823   SUBU A1, A1, T3
9D000F44  00003810   MFHI A3
9D000F48  00A7182B   SLTU V1, A1, A3
9D000F4C  14600007   BNE V1, ZERO, 0x9D000F6C
9D000F50  00003012   MFLO A2
9D000F54  14A70007   BNE A1, A3, 0x9D000F74
9D000F58  00001825   OR V1, ZERO, ZERO
9D000F5C  01442004   SLLV A0, A0, T2
9D000F60  0086202B   SLTU A0, A0, A2
9D000F64  10800003   BEQ A0, ZERO, 0x9D000F74
9D000F68  00000000   NOP
9D000F6C  2442FFFF   ADDIU V0, V0, -1
9D000F70  00001825   OR V1, ZERO, ZERO
9D000F74  03E00008   JR RA
9D000F78  00000000   NOP
9D000F7C  00C04825   OR T1, A2, ZERO
9D000F80  00801025   OR V0, A0, ZERO
9D000F84  14E0008B   BNE A3, ZERO, 0x9D0011B4
9D000F88  00A01825   OR V1, A1, ZERO
9D000F8C  00A6302B   SLTU A2, A1, A2
9D000F90  10C00033   BEQ A2, ZERO, 0x9D001060
9D000F94  712A5020   CLZ T2, T1
9D000F98  11400008   BEQ T2, ZERO, 0x9D000FBC
9D000F9C  00095C02   SRL T3, T1, 16
9D000FA0  01451804   SLLV V1, A1, T2
9D000FA4  000A2823   SUBU A1, ZERO, T2
9D000FA8  00A42806   SRLV A1, A0, A1
9D000FAC  01494804   SLLV T1, T1, T2
9D000FB0  00A31825   OR V1, A1, V1
9D000FB4  01441004   SLLV V0, A0, T2
9D000FB8  00095C02   SRL T3, T1, 16
9D000FBC  006B001B   DIVU V1, T3
9D000FC0  016001F4   TEQ T3, ZERO
9D000FC4  3124FFFF   ANDI A0, T1, -1
9D000FC8  00001812   MFLO V1
9D000FCC  00002810   MFHI A1
9D000FD0  70643002   MUL A2, V1, A0
9D000FD4  00051C00   SLL V1, A1, 16
9D000FD8  00022C02   SRL A1, V0, 16
9D000FDC  00651825   OR V1, V1, A1
9D000FE0  0066282B   SLTU A1, V1, A2
9D000FE4  50A00008   BEQL A1, ZERO, 0x9D001008
9D000FE8  00661823   SUBU V1, V1, A2
9D000FEC  00691821   ADDU V1, V1, T1
9D000FF0  0069282B   SLTU A1, V1, T1
9D000FF4  14A00003   BNE A1, ZERO, 0x9D001004
9D000FF8  0066282B   SLTU A1, V1, A2
9D000FFC  54A00001   BNEL A1, ZERO, 0x9D001004
9D001000  00691821   ADDU V1, V1, T1
9D001004  00661823   SUBU V1, V1, A2
9D001008  006B001B   DIVU V1, T3
9D00100C  016001F4   TEQ T3, ZERO
9D001010  3042FFFF   ANDI V0, V0, -1
9D001014  00003010   MFHI A2
9D001018  00001812   MFLO V1
9D00101C  70645802   MUL T3, V1, A0
9D001020  00061C00   SLL V1, A2, 16
9D001024  00621025   OR V0, V1, V0
9D001028  004B182B   SLTU V1, V0, T3
9D00102C  50600009   BEQL V1, ZERO, 0x9D001054
9D001030  004B1023   SUBU V0, V0, T3
9D001034  00491021   ADDU V0, V0, T1
9D001038  0049182B   SLTU V1, V0, T1
9D00103C  54600005   BNEL V1, ZERO, 0x9D001054
9D001040  004B1023   SUBU V0, V0, T3
9D001044  004B182B   SLTU V1, V0, T3
9D001048  54600001   BNEL V1, ZERO, 0x9D001050
9D00104C  00491021   ADDU V0, V0, T1
9D001050  004B1023   SUBU V0, V0, T3
9D001054  01421006   SRLV V0, V0, T2
9D001058  03E00008   JR RA
9D00105C  00001825   OR V1, ZERO, ZERO
9D001060  15200004   BNE T1, ZERO, 0x9D001074
9D001064  24030001   ADDIU V1, ZERO, 1
9D001068  0069001B   DIVU V1, T1
9D00106C  012001F4   TEQ T1, ZERO
9D001070  00004812   MFLO T1
9D001074  712A5020   CLZ T2, T1
9D001078  1540001F   BNE T2, ZERO, 0x9D0010F8
9D00107C  24070020   ADDIU A3, ZERO, 32
9D001080  00A92823   SUBU A1, A1, T1
9D001084  00095C02   SRL T3, T1, 16
9D001088  00AB001B   DIVU A1, T3
9D00108C  016001F4   TEQ T3, ZERO
9D001090  3124FFFF   ANDI A0, T1, -1
9D001094  00002812   MFLO A1
9D001098  00001810   MFHI V1
9D00109C  70A43002   MUL A2, A1, A0
9D0010A0  00032C00   SLL A1, V1, 16
9D0010A4  00021C02   SRL V1, V0, 16
9D0010A8  00A32825   OR A1, A1, V1
9D0010AC  00A6182B   SLTU V1, A1, A2
9D0010B0  50600008   BEQL V1, ZERO, 0x9D0010D4
9D0010B4  00A63023   SUBU A2, A1, A2
9D0010B8  00A92821   ADDU A1, A1, T1
9D0010BC  00A9182B   SLTU V1, A1, T1
9D0010C0  14600003   BNE V1, ZERO, 0x9D0010D0
9D0010C4  00A6182B   SLTU V1, A1, A2
9D0010C8  54600001   BNEL V1, ZERO, 0x9D0010D0
9D0010CC  00A92821   ADDU A1, A1, T1
9D0010D0  00A63023   SUBU A2, A1, A2
9D0010D4  00CB001B   DIVU A2, T3
9D0010D8  016001F4   TEQ T3, ZERO
9D0010DC  3042FFFF   ANDI V0, V0, -1
9D0010E0  00002810   MFHI A1
9D0010E4  00003012   MFLO A2
9D0010E8  70C45802   MUL T3, A2, A0
9D0010EC  00053400   SLL A2, A1, 16
9D0010F0  1000FFCD   BEQ ZERO, ZERO, 0x9D001028
9D0010F4  00C21025   OR V0, A2, V0
9D0010F8  00EA3823   SUBU A3, A3, T2
9D0010FC  01494804   SLLV T1, T1, T2
9D001100  00E41806   SRLV V1, A0, A3
9D001104  00093402   SRL A2, T1, 16
9D001108  00E53806   SRLV A3, A1, A3
9D00110C  00E6001B   DIVU A3, A2
9D001110  00C001F4   TEQ A2, ZERO
9D001114  01451004   SLLV V0, A1, T2
9D001118  3128FFFF   ANDI T0, T1, -1
9D00111C  00621825   OR V1, V1, V0
9D001120  00032C02   SRL A1, V1, 16
9D001124  00003812   MFLO A3
9D001128  00006010   MFHI T4
9D00112C  70E81002   MUL V0, A3, T0
9D001130  000C3C00   SLL A3, T4, 16
9D001134  00E53825   OR A3, A3, A1
9D001138  00E2282B   SLTU A1, A3, V0
9D00113C  50A00008   BEQL A1, ZERO, 0x9D001160
9D001140  00E23823   SUBU A3, A3, V0
9D001144  00E93821   ADDU A3, A3, T1
9D001148  00E9282B   SLTU A1, A3, T1
9D00114C  14A00003   BNE A1, ZERO, 0x9D00115C
9D001150  00E2282B   SLTU A1, A3, V0
9D001154  54A00001   BNEL A1, ZERO, 0x9D00115C
9D001158  00E93821   ADDU A3, A3, T1
9D00115C  00E23823   SUBU A3, A3, V0
9D001160  00E6001B   DIVU A3, A2
9D001164  00C001F4   TEQ A2, ZERO
9D001168  3065FFFF   ANDI A1, V1, -1
9D00116C  00003012   MFLO A2
9D001170  00003810   MFHI A3
9D001174  00073C00   SLL A3, A3, 16
9D001178  00E52825   OR A1, A3, A1
9D00117C  70C83002   MUL A2, A2, T0
9D001180  00A6102B   SLTU V0, A1, A2
9D001184  10400009   BEQ V0, ZERO, 0x9D0011AC
9D001188  01441004   SLLV V0, A0, T2
9D00118C  00A92821   ADDU A1, A1, T1
9D001190  00A9102B   SLTU V0, A1, T1
9D001194  14400005   BNE V0, ZERO, 0x9D0011AC
9D001198  01441004   SLLV V0, A0, T2
9D00119C  00A6102B   SLTU V0, A1, A2
9D0011A0  54400001   BNEL V0, ZERO, 0x9D0011A8
9D0011A4  00A92821   ADDU A1, A1, T1
9D0011A8  01441004   SLLV V0, A0, T2
9D0011AC  1000FFB5   BEQ ZERO, ZERO, 0x9D001084
9D0011B0  00A62823   SUBU A1, A1, A2
9D0011B4  00A7402B   SLTU T0, A1, A3
9D0011B8  1500005C   BNE T0, ZERO, 0x9D00132C
9D0011BC  70EE7020   CLZ T6, A3
9D0011C0  15C0000A   BNE T6, ZERO, 0x9D0011EC
9D0011C4  00E5402B   SLTU T0, A3, A1
9D0011C8  15000003   BNE T0, ZERO, 0x9D0011D8
9D0011CC  0086402B   SLTU T0, A0, A2
9D0011D0  15000056   BNE T0, ZERO, 0x9D00132C
9D0011D4  00000000   NOP
9D0011D8  00861023   SUBU V0, A0, A2
9D0011DC  00A72823   SUBU A1, A1, A3
9D0011E0  0082182B   SLTU V1, A0, V0
9D0011E4  03E00008   JR RA
9D0011E8  00A31823   SUBU V1, A1, V1
9D0011EC  240B0020   ADDIU T3, ZERO, 32
9D0011F0  016E5823   SUBU T3, T3, T6
9D0011F4  01666006   SRLV T4, A2, T3
9D0011F8  01C73804   SLLV A3, A3, T6
9D0011FC  01873825   OR A3, T4, A3
9D001200  01C54004   SLLV T0, A1, T6
9D001204  00074C02   SRL T1, A3, 16
9D001208  01652806   SRLV A1, A1, T3
9D00120C  00A9001B   DIVU A1, T1
9D001210  012001F4   TEQ T1, ZERO
9D001214  01641006   SRLV V0, A0, T3
9D001218  00481025   OR V0, V0, T0
9D00121C  30E8FFFF   ANDI T0, A3, -1
9D001220  00026402   SRL T4, V0, 16
9D001224  00002812   MFLO A1
9D001228  00005010   MFHI T2
9D00122C  000A5400   SLL T2, T2, 16
9D001230  014C5025   OR T2, T2, T4
9D001234  71051802   MUL V1, T0, A1
9D001238  0143602B   SLTU T4, T2, V1
9D00123C  1180000A   BEQ T4, ZERO, 0x9D001268
9D001240  00A06825   OR T5, A1, ZERO
9D001244  01475021   ADDU T2, T2, A3
9D001248  0147602B   SLTU T4, T2, A3
9D00124C  15800006   BNE T4, ZERO, 0x9D001268
9D001250  24ADFFFF   ADDIU T5, A1, -1
9D001254  0143602B   SLTU T4, T2, V1
9D001258  51800004   BEQL T4, ZERO, 0x9D00126C
9D00125C  01435023   SUBU T2, T2, V1
9D001260  24ADFFFE   ADDIU T5, A1, -2
9D001264  01475021   ADDU T2, T2, A3
9D001268  01435023   SUBU T2, T2, V1
9D00126C  0149001B   DIVU T2, T1
9D001270  012001F4   TEQ T1, ZERO
9D001274  00004812   MFLO T1
9D001278  00005010   MFHI T2
9D00127C  000A5400   SLL T2, T2, 16
9D001280  71092802   MUL A1, T0, T1
9D001284  3048FFFF   ANDI T0, V0, -1
9D001288  01484025   OR T0, T2, T0
9D00128C  0105102B   SLTU V0, T0, A1
9D001290  1040000A   BEQ V0, ZERO, 0x9D0012BC
9D001294  01205025   OR T2, T1, ZERO
9D001298  01074021   ADDU T0, T0, A3
9D00129C  0107102B   SLTU V0, T0, A3
9D0012A0  14400006   BNE V0, ZERO, 0x9D0012BC
9D0012A4  252AFFFF   ADDIU T2, T1, -1
9D0012A8  0105102B   SLTU V0, T0, A1
9D0012AC  10400004   BEQ V0, ZERO, 0x9D0012C0
9D0012B0  000D6400   SLL T4, T5, 16
9D0012B4  252AFFFE   ADDIU T2, T1, -2
9D0012B8  01074021   ADDU T0, T0, A3
9D0012BC  000D6400   SLL T4, T5, 16
9D0012C0  01C61004   SLLV V0, A2, T6
9D0012C4  018A6025   OR T4, T4, T2
9D0012C8  01820019   MULTU 0, T4, V0
9D0012CC  01054023   SUBU T0, T0, A1
9D0012D0  01C41804   SLLV V1, A0, T6
9D0012D4  00006810   MFHI T5
9D0012D8  010D202B   SLTU A0, T0, T5
9D0012DC  01A02825   OR A1, T5, ZERO
9D0012E0  00006012   MFLO T4
9D0012E4  14800005   BNE A0, ZERO, 0x9D0012FC
9D0012E8  00003012   MFLO A2
9D0012EC  150D0007   BNE T0, T5, 0x9D00130C
9D0012F0  006C202B   SLTU A0, V1, T4
9D0012F4  10800006   BEQ A0, ZERO, 0x9D001310
9D0012F8  00663023   SUBU A2, V1, A2
9D0012FC  01823023   SUBU A2, T4, V0
9D001300  01A73823   SUBU A3, T5, A3
9D001304  0186602B   SLTU T4, T4, A2
9D001308  00EC2823   SUBU A1, A3, T4
9D00130C  00663023   SUBU A2, V1, A2
9D001310  0066182B   SLTU V1, V1, A2
9D001314  01054023   SUBU T0, T0, A1
9D001318  01031823   SUBU V1, T0, V1
9D00131C  01631004   SLLV V0, V1, T3
9D001320  01C63006   SRLV A2, A2, T6
9D001324  00461025   OR V0, V0, A2
9D001328  01C31806   SRLV V1, V1, T6
9D00132C  03E00008   JR RA
9D001330  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-WOZ14-JOB1/build-Linux/pic32m-libs/libpic32/stubs/default-on-reset.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D003300  03E00008   JR RA
9D003304  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-WOZ14-JOB1/build-Linux/pic32m-libs/libpic32/stubs/default-on-bootstrap.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D003308  03E00008   JR RA
9D00330C  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-WOZ14-JOB1/build-Linux/pic32m-libs/libpic32/startup/software-debug-break.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D0000F4  7000003F   SDBBP 0
9D0000F8  03E00008   JR RA
9D0000FC  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-WOZ14-JOB1/build-Linux/pic32m-libs/libpic32/default_vector_dispatch/defaultinterrupt.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D000218  3C020000   LUI V0, 0
9D00021C  24420000   ADDIU V0, V0, 0
9D000220  10400007   BEQ V0, ZERO, 0x9D000240
9D000224  3C029D00   LUI V0, -25344
9D000228  244200F4   ADDIU V0, V0, 244
9D00022C  50400005   BEQL V0, ZERO, 0x9D000244
9D000230  3C029D00   LUI V0, -25344
9D000234  7000003F   SDBBP 0
9D000238  03E00008   JR RA
9D00023C  00000000   NOP
9D000240  3C029D00   LUI V0, -25344
9D000244  244230B8   ADDIU V0, V0, 12472
9D000248  10400003   BEQ V0, ZERO, 0x9D000258
9D00024C  00000000   NOP
9D000250  0040F809   JALR V0
9D000254  00000000   NOP
9D000258  03E00008   JR RA
9D00025C  00000000   NOP
